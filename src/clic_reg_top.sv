// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module clic_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 13
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output clic_reg_pkg::clic_reg2hw_t reg2hw, // Write
  input  clic_reg_pkg::clic_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import clic_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [3:0] mcliccfg_mnlbits_qs;
  logic [3:0] mcliccfg_mnlbits_wd;
  logic mcliccfg_mnlbits_we;
  logic [1:0] mcliccfg_nmbits_qs;
  logic [1:0] mcliccfg_nmbits_wd;
  logic mcliccfg_nmbits_we;
  logic [3:0] mcliccfg_snlbits_qs;
  logic [3:0] mcliccfg_snlbits_wd;
  logic mcliccfg_snlbits_we;
  logic [3:0] mcliccfg_unlbits_qs;
  logic [3:0] mcliccfg_unlbits_wd;
  logic mcliccfg_unlbits_we;
  logic [3:0] mcliccfg_reserved_qs;
  logic clicint_0_ip_0_qs;
  logic clicint_0_ip_0_wd;
  logic clicint_0_ip_0_we;
  logic clicint_0_ie_0_qs;
  logic clicint_0_ie_0_wd;
  logic clicint_0_ie_0_we;
  logic clicint_0_attr_shv_0_qs;
  logic clicint_0_attr_shv_0_wd;
  logic clicint_0_attr_shv_0_we;
  logic [1:0] clicint_0_attr_trig_0_qs;
  logic [1:0] clicint_0_attr_trig_0_wd;
  logic clicint_0_attr_trig_0_we;
  logic [1:0] clicint_0_attr_mode_0_qs;
  logic [1:0] clicint_0_attr_mode_0_wd;
  logic clicint_0_attr_mode_0_we;
  logic [7:0] clicint_0_ctl_0_qs;
  logic [7:0] clicint_0_ctl_0_wd;
  logic clicint_0_ctl_0_we;
  logic clicint_1_ip_1_qs;
  logic clicint_1_ip_1_wd;
  logic clicint_1_ip_1_we;
  logic clicint_1_ie_1_qs;
  logic clicint_1_ie_1_wd;
  logic clicint_1_ie_1_we;
  logic clicint_1_attr_shv_1_qs;
  logic clicint_1_attr_shv_1_wd;
  logic clicint_1_attr_shv_1_we;
  logic [1:0] clicint_1_attr_trig_1_qs;
  logic [1:0] clicint_1_attr_trig_1_wd;
  logic clicint_1_attr_trig_1_we;
  logic [1:0] clicint_1_attr_mode_1_qs;
  logic [1:0] clicint_1_attr_mode_1_wd;
  logic clicint_1_attr_mode_1_we;
  logic [7:0] clicint_1_ctl_1_qs;
  logic [7:0] clicint_1_ctl_1_wd;
  logic clicint_1_ctl_1_we;
  logic clicint_2_ip_2_qs;
  logic clicint_2_ip_2_wd;
  logic clicint_2_ip_2_we;
  logic clicint_2_ie_2_qs;
  logic clicint_2_ie_2_wd;
  logic clicint_2_ie_2_we;
  logic clicint_2_attr_shv_2_qs;
  logic clicint_2_attr_shv_2_wd;
  logic clicint_2_attr_shv_2_we;
  logic [1:0] clicint_2_attr_trig_2_qs;
  logic [1:0] clicint_2_attr_trig_2_wd;
  logic clicint_2_attr_trig_2_we;
  logic [1:0] clicint_2_attr_mode_2_qs;
  logic [1:0] clicint_2_attr_mode_2_wd;
  logic clicint_2_attr_mode_2_we;
  logic [7:0] clicint_2_ctl_2_qs;
  logic [7:0] clicint_2_ctl_2_wd;
  logic clicint_2_ctl_2_we;
  logic clicint_3_ip_3_qs;
  logic clicint_3_ip_3_wd;
  logic clicint_3_ip_3_we;
  logic clicint_3_ie_3_qs;
  logic clicint_3_ie_3_wd;
  logic clicint_3_ie_3_we;
  logic clicint_3_attr_shv_3_qs;
  logic clicint_3_attr_shv_3_wd;
  logic clicint_3_attr_shv_3_we;
  logic [1:0] clicint_3_attr_trig_3_qs;
  logic [1:0] clicint_3_attr_trig_3_wd;
  logic clicint_3_attr_trig_3_we;
  logic [1:0] clicint_3_attr_mode_3_qs;
  logic [1:0] clicint_3_attr_mode_3_wd;
  logic clicint_3_attr_mode_3_we;
  logic [7:0] clicint_3_ctl_3_qs;
  logic [7:0] clicint_3_ctl_3_wd;
  logic clicint_3_ctl_3_we;
  logic clicint_4_ip_4_qs;
  logic clicint_4_ip_4_wd;
  logic clicint_4_ip_4_we;
  logic clicint_4_ie_4_qs;
  logic clicint_4_ie_4_wd;
  logic clicint_4_ie_4_we;
  logic clicint_4_attr_shv_4_qs;
  logic clicint_4_attr_shv_4_wd;
  logic clicint_4_attr_shv_4_we;
  logic [1:0] clicint_4_attr_trig_4_qs;
  logic [1:0] clicint_4_attr_trig_4_wd;
  logic clicint_4_attr_trig_4_we;
  logic [1:0] clicint_4_attr_mode_4_qs;
  logic [1:0] clicint_4_attr_mode_4_wd;
  logic clicint_4_attr_mode_4_we;
  logic [7:0] clicint_4_ctl_4_qs;
  logic [7:0] clicint_4_ctl_4_wd;
  logic clicint_4_ctl_4_we;
  logic clicint_5_ip_5_qs;
  logic clicint_5_ip_5_wd;
  logic clicint_5_ip_5_we;
  logic clicint_5_ie_5_qs;
  logic clicint_5_ie_5_wd;
  logic clicint_5_ie_5_we;
  logic clicint_5_attr_shv_5_qs;
  logic clicint_5_attr_shv_5_wd;
  logic clicint_5_attr_shv_5_we;
  logic [1:0] clicint_5_attr_trig_5_qs;
  logic [1:0] clicint_5_attr_trig_5_wd;
  logic clicint_5_attr_trig_5_we;
  logic [1:0] clicint_5_attr_mode_5_qs;
  logic [1:0] clicint_5_attr_mode_5_wd;
  logic clicint_5_attr_mode_5_we;
  logic [7:0] clicint_5_ctl_5_qs;
  logic [7:0] clicint_5_ctl_5_wd;
  logic clicint_5_ctl_5_we;
  logic clicint_6_ip_6_qs;
  logic clicint_6_ip_6_wd;
  logic clicint_6_ip_6_we;
  logic clicint_6_ie_6_qs;
  logic clicint_6_ie_6_wd;
  logic clicint_6_ie_6_we;
  logic clicint_6_attr_shv_6_qs;
  logic clicint_6_attr_shv_6_wd;
  logic clicint_6_attr_shv_6_we;
  logic [1:0] clicint_6_attr_trig_6_qs;
  logic [1:0] clicint_6_attr_trig_6_wd;
  logic clicint_6_attr_trig_6_we;
  logic [1:0] clicint_6_attr_mode_6_qs;
  logic [1:0] clicint_6_attr_mode_6_wd;
  logic clicint_6_attr_mode_6_we;
  logic [7:0] clicint_6_ctl_6_qs;
  logic [7:0] clicint_6_ctl_6_wd;
  logic clicint_6_ctl_6_we;
  logic clicint_7_ip_7_qs;
  logic clicint_7_ip_7_wd;
  logic clicint_7_ip_7_we;
  logic clicint_7_ie_7_qs;
  logic clicint_7_ie_7_wd;
  logic clicint_7_ie_7_we;
  logic clicint_7_attr_shv_7_qs;
  logic clicint_7_attr_shv_7_wd;
  logic clicint_7_attr_shv_7_we;
  logic [1:0] clicint_7_attr_trig_7_qs;
  logic [1:0] clicint_7_attr_trig_7_wd;
  logic clicint_7_attr_trig_7_we;
  logic [1:0] clicint_7_attr_mode_7_qs;
  logic [1:0] clicint_7_attr_mode_7_wd;
  logic clicint_7_attr_mode_7_we;
  logic [7:0] clicint_7_ctl_7_qs;
  logic [7:0] clicint_7_ctl_7_wd;
  logic clicint_7_ctl_7_we;
  logic clicint_8_ip_8_qs;
  logic clicint_8_ip_8_wd;
  logic clicint_8_ip_8_we;
  logic clicint_8_ie_8_qs;
  logic clicint_8_ie_8_wd;
  logic clicint_8_ie_8_we;
  logic clicint_8_attr_shv_8_qs;
  logic clicint_8_attr_shv_8_wd;
  logic clicint_8_attr_shv_8_we;
  logic [1:0] clicint_8_attr_trig_8_qs;
  logic [1:0] clicint_8_attr_trig_8_wd;
  logic clicint_8_attr_trig_8_we;
  logic [1:0] clicint_8_attr_mode_8_qs;
  logic [1:0] clicint_8_attr_mode_8_wd;
  logic clicint_8_attr_mode_8_we;
  logic [7:0] clicint_8_ctl_8_qs;
  logic [7:0] clicint_8_ctl_8_wd;
  logic clicint_8_ctl_8_we;
  logic clicint_9_ip_9_qs;
  logic clicint_9_ip_9_wd;
  logic clicint_9_ip_9_we;
  logic clicint_9_ie_9_qs;
  logic clicint_9_ie_9_wd;
  logic clicint_9_ie_9_we;
  logic clicint_9_attr_shv_9_qs;
  logic clicint_9_attr_shv_9_wd;
  logic clicint_9_attr_shv_9_we;
  logic [1:0] clicint_9_attr_trig_9_qs;
  logic [1:0] clicint_9_attr_trig_9_wd;
  logic clicint_9_attr_trig_9_we;
  logic [1:0] clicint_9_attr_mode_9_qs;
  logic [1:0] clicint_9_attr_mode_9_wd;
  logic clicint_9_attr_mode_9_we;
  logic [7:0] clicint_9_ctl_9_qs;
  logic [7:0] clicint_9_ctl_9_wd;
  logic clicint_9_ctl_9_we;
  logic clicint_10_ip_10_qs;
  logic clicint_10_ip_10_wd;
  logic clicint_10_ip_10_we;
  logic clicint_10_ie_10_qs;
  logic clicint_10_ie_10_wd;
  logic clicint_10_ie_10_we;
  logic clicint_10_attr_shv_10_qs;
  logic clicint_10_attr_shv_10_wd;
  logic clicint_10_attr_shv_10_we;
  logic [1:0] clicint_10_attr_trig_10_qs;
  logic [1:0] clicint_10_attr_trig_10_wd;
  logic clicint_10_attr_trig_10_we;
  logic [1:0] clicint_10_attr_mode_10_qs;
  logic [1:0] clicint_10_attr_mode_10_wd;
  logic clicint_10_attr_mode_10_we;
  logic [7:0] clicint_10_ctl_10_qs;
  logic [7:0] clicint_10_ctl_10_wd;
  logic clicint_10_ctl_10_we;
  logic clicint_11_ip_11_qs;
  logic clicint_11_ip_11_wd;
  logic clicint_11_ip_11_we;
  logic clicint_11_ie_11_qs;
  logic clicint_11_ie_11_wd;
  logic clicint_11_ie_11_we;
  logic clicint_11_attr_shv_11_qs;
  logic clicint_11_attr_shv_11_wd;
  logic clicint_11_attr_shv_11_we;
  logic [1:0] clicint_11_attr_trig_11_qs;
  logic [1:0] clicint_11_attr_trig_11_wd;
  logic clicint_11_attr_trig_11_we;
  logic [1:0] clicint_11_attr_mode_11_qs;
  logic [1:0] clicint_11_attr_mode_11_wd;
  logic clicint_11_attr_mode_11_we;
  logic [7:0] clicint_11_ctl_11_qs;
  logic [7:0] clicint_11_ctl_11_wd;
  logic clicint_11_ctl_11_we;
  logic clicint_12_ip_12_qs;
  logic clicint_12_ip_12_wd;
  logic clicint_12_ip_12_we;
  logic clicint_12_ie_12_qs;
  logic clicint_12_ie_12_wd;
  logic clicint_12_ie_12_we;
  logic clicint_12_attr_shv_12_qs;
  logic clicint_12_attr_shv_12_wd;
  logic clicint_12_attr_shv_12_we;
  logic [1:0] clicint_12_attr_trig_12_qs;
  logic [1:0] clicint_12_attr_trig_12_wd;
  logic clicint_12_attr_trig_12_we;
  logic [1:0] clicint_12_attr_mode_12_qs;
  logic [1:0] clicint_12_attr_mode_12_wd;
  logic clicint_12_attr_mode_12_we;
  logic [7:0] clicint_12_ctl_12_qs;
  logic [7:0] clicint_12_ctl_12_wd;
  logic clicint_12_ctl_12_we;
  logic clicint_13_ip_13_qs;
  logic clicint_13_ip_13_wd;
  logic clicint_13_ip_13_we;
  logic clicint_13_ie_13_qs;
  logic clicint_13_ie_13_wd;
  logic clicint_13_ie_13_we;
  logic clicint_13_attr_shv_13_qs;
  logic clicint_13_attr_shv_13_wd;
  logic clicint_13_attr_shv_13_we;
  logic [1:0] clicint_13_attr_trig_13_qs;
  logic [1:0] clicint_13_attr_trig_13_wd;
  logic clicint_13_attr_trig_13_we;
  logic [1:0] clicint_13_attr_mode_13_qs;
  logic [1:0] clicint_13_attr_mode_13_wd;
  logic clicint_13_attr_mode_13_we;
  logic [7:0] clicint_13_ctl_13_qs;
  logic [7:0] clicint_13_ctl_13_wd;
  logic clicint_13_ctl_13_we;
  logic clicint_14_ip_14_qs;
  logic clicint_14_ip_14_wd;
  logic clicint_14_ip_14_we;
  logic clicint_14_ie_14_qs;
  logic clicint_14_ie_14_wd;
  logic clicint_14_ie_14_we;
  logic clicint_14_attr_shv_14_qs;
  logic clicint_14_attr_shv_14_wd;
  logic clicint_14_attr_shv_14_we;
  logic [1:0] clicint_14_attr_trig_14_qs;
  logic [1:0] clicint_14_attr_trig_14_wd;
  logic clicint_14_attr_trig_14_we;
  logic [1:0] clicint_14_attr_mode_14_qs;
  logic [1:0] clicint_14_attr_mode_14_wd;
  logic clicint_14_attr_mode_14_we;
  logic [7:0] clicint_14_ctl_14_qs;
  logic [7:0] clicint_14_ctl_14_wd;
  logic clicint_14_ctl_14_we;
  logic clicint_15_ip_15_qs;
  logic clicint_15_ip_15_wd;
  logic clicint_15_ip_15_we;
  logic clicint_15_ie_15_qs;
  logic clicint_15_ie_15_wd;
  logic clicint_15_ie_15_we;
  logic clicint_15_attr_shv_15_qs;
  logic clicint_15_attr_shv_15_wd;
  logic clicint_15_attr_shv_15_we;
  logic [1:0] clicint_15_attr_trig_15_qs;
  logic [1:0] clicint_15_attr_trig_15_wd;
  logic clicint_15_attr_trig_15_we;
  logic [1:0] clicint_15_attr_mode_15_qs;
  logic [1:0] clicint_15_attr_mode_15_wd;
  logic clicint_15_attr_mode_15_we;
  logic [7:0] clicint_15_ctl_15_qs;
  logic [7:0] clicint_15_ctl_15_wd;
  logic clicint_15_ctl_15_we;
  logic clicint_16_ip_16_qs;
  logic clicint_16_ip_16_wd;
  logic clicint_16_ip_16_we;
  logic clicint_16_ie_16_qs;
  logic clicint_16_ie_16_wd;
  logic clicint_16_ie_16_we;
  logic clicint_16_attr_shv_16_qs;
  logic clicint_16_attr_shv_16_wd;
  logic clicint_16_attr_shv_16_we;
  logic [1:0] clicint_16_attr_trig_16_qs;
  logic [1:0] clicint_16_attr_trig_16_wd;
  logic clicint_16_attr_trig_16_we;
  logic [1:0] clicint_16_attr_mode_16_qs;
  logic [1:0] clicint_16_attr_mode_16_wd;
  logic clicint_16_attr_mode_16_we;
  logic [7:0] clicint_16_ctl_16_qs;
  logic [7:0] clicint_16_ctl_16_wd;
  logic clicint_16_ctl_16_we;
  logic clicint_17_ip_17_qs;
  logic clicint_17_ip_17_wd;
  logic clicint_17_ip_17_we;
  logic clicint_17_ie_17_qs;
  logic clicint_17_ie_17_wd;
  logic clicint_17_ie_17_we;
  logic clicint_17_attr_shv_17_qs;
  logic clicint_17_attr_shv_17_wd;
  logic clicint_17_attr_shv_17_we;
  logic [1:0] clicint_17_attr_trig_17_qs;
  logic [1:0] clicint_17_attr_trig_17_wd;
  logic clicint_17_attr_trig_17_we;
  logic [1:0] clicint_17_attr_mode_17_qs;
  logic [1:0] clicint_17_attr_mode_17_wd;
  logic clicint_17_attr_mode_17_we;
  logic [7:0] clicint_17_ctl_17_qs;
  logic [7:0] clicint_17_ctl_17_wd;
  logic clicint_17_ctl_17_we;
  logic clicint_18_ip_18_qs;
  logic clicint_18_ip_18_wd;
  logic clicint_18_ip_18_we;
  logic clicint_18_ie_18_qs;
  logic clicint_18_ie_18_wd;
  logic clicint_18_ie_18_we;
  logic clicint_18_attr_shv_18_qs;
  logic clicint_18_attr_shv_18_wd;
  logic clicint_18_attr_shv_18_we;
  logic [1:0] clicint_18_attr_trig_18_qs;
  logic [1:0] clicint_18_attr_trig_18_wd;
  logic clicint_18_attr_trig_18_we;
  logic [1:0] clicint_18_attr_mode_18_qs;
  logic [1:0] clicint_18_attr_mode_18_wd;
  logic clicint_18_attr_mode_18_we;
  logic [7:0] clicint_18_ctl_18_qs;
  logic [7:0] clicint_18_ctl_18_wd;
  logic clicint_18_ctl_18_we;
  logic clicint_19_ip_19_qs;
  logic clicint_19_ip_19_wd;
  logic clicint_19_ip_19_we;
  logic clicint_19_ie_19_qs;
  logic clicint_19_ie_19_wd;
  logic clicint_19_ie_19_we;
  logic clicint_19_attr_shv_19_qs;
  logic clicint_19_attr_shv_19_wd;
  logic clicint_19_attr_shv_19_we;
  logic [1:0] clicint_19_attr_trig_19_qs;
  logic [1:0] clicint_19_attr_trig_19_wd;
  logic clicint_19_attr_trig_19_we;
  logic [1:0] clicint_19_attr_mode_19_qs;
  logic [1:0] clicint_19_attr_mode_19_wd;
  logic clicint_19_attr_mode_19_we;
  logic [7:0] clicint_19_ctl_19_qs;
  logic [7:0] clicint_19_ctl_19_wd;
  logic clicint_19_ctl_19_we;
  logic clicint_20_ip_20_qs;
  logic clicint_20_ip_20_wd;
  logic clicint_20_ip_20_we;
  logic clicint_20_ie_20_qs;
  logic clicint_20_ie_20_wd;
  logic clicint_20_ie_20_we;
  logic clicint_20_attr_shv_20_qs;
  logic clicint_20_attr_shv_20_wd;
  logic clicint_20_attr_shv_20_we;
  logic [1:0] clicint_20_attr_trig_20_qs;
  logic [1:0] clicint_20_attr_trig_20_wd;
  logic clicint_20_attr_trig_20_we;
  logic [1:0] clicint_20_attr_mode_20_qs;
  logic [1:0] clicint_20_attr_mode_20_wd;
  logic clicint_20_attr_mode_20_we;
  logic [7:0] clicint_20_ctl_20_qs;
  logic [7:0] clicint_20_ctl_20_wd;
  logic clicint_20_ctl_20_we;
  logic clicint_21_ip_21_qs;
  logic clicint_21_ip_21_wd;
  logic clicint_21_ip_21_we;
  logic clicint_21_ie_21_qs;
  logic clicint_21_ie_21_wd;
  logic clicint_21_ie_21_we;
  logic clicint_21_attr_shv_21_qs;
  logic clicint_21_attr_shv_21_wd;
  logic clicint_21_attr_shv_21_we;
  logic [1:0] clicint_21_attr_trig_21_qs;
  logic [1:0] clicint_21_attr_trig_21_wd;
  logic clicint_21_attr_trig_21_we;
  logic [1:0] clicint_21_attr_mode_21_qs;
  logic [1:0] clicint_21_attr_mode_21_wd;
  logic clicint_21_attr_mode_21_we;
  logic [7:0] clicint_21_ctl_21_qs;
  logic [7:0] clicint_21_ctl_21_wd;
  logic clicint_21_ctl_21_we;
  logic clicint_22_ip_22_qs;
  logic clicint_22_ip_22_wd;
  logic clicint_22_ip_22_we;
  logic clicint_22_ie_22_qs;
  logic clicint_22_ie_22_wd;
  logic clicint_22_ie_22_we;
  logic clicint_22_attr_shv_22_qs;
  logic clicint_22_attr_shv_22_wd;
  logic clicint_22_attr_shv_22_we;
  logic [1:0] clicint_22_attr_trig_22_qs;
  logic [1:0] clicint_22_attr_trig_22_wd;
  logic clicint_22_attr_trig_22_we;
  logic [1:0] clicint_22_attr_mode_22_qs;
  logic [1:0] clicint_22_attr_mode_22_wd;
  logic clicint_22_attr_mode_22_we;
  logic [7:0] clicint_22_ctl_22_qs;
  logic [7:0] clicint_22_ctl_22_wd;
  logic clicint_22_ctl_22_we;
  logic clicint_23_ip_23_qs;
  logic clicint_23_ip_23_wd;
  logic clicint_23_ip_23_we;
  logic clicint_23_ie_23_qs;
  logic clicint_23_ie_23_wd;
  logic clicint_23_ie_23_we;
  logic clicint_23_attr_shv_23_qs;
  logic clicint_23_attr_shv_23_wd;
  logic clicint_23_attr_shv_23_we;
  logic [1:0] clicint_23_attr_trig_23_qs;
  logic [1:0] clicint_23_attr_trig_23_wd;
  logic clicint_23_attr_trig_23_we;
  logic [1:0] clicint_23_attr_mode_23_qs;
  logic [1:0] clicint_23_attr_mode_23_wd;
  logic clicint_23_attr_mode_23_we;
  logic [7:0] clicint_23_ctl_23_qs;
  logic [7:0] clicint_23_ctl_23_wd;
  logic clicint_23_ctl_23_we;
  logic clicint_24_ip_24_qs;
  logic clicint_24_ip_24_wd;
  logic clicint_24_ip_24_we;
  logic clicint_24_ie_24_qs;
  logic clicint_24_ie_24_wd;
  logic clicint_24_ie_24_we;
  logic clicint_24_attr_shv_24_qs;
  logic clicint_24_attr_shv_24_wd;
  logic clicint_24_attr_shv_24_we;
  logic [1:0] clicint_24_attr_trig_24_qs;
  logic [1:0] clicint_24_attr_trig_24_wd;
  logic clicint_24_attr_trig_24_we;
  logic [1:0] clicint_24_attr_mode_24_qs;
  logic [1:0] clicint_24_attr_mode_24_wd;
  logic clicint_24_attr_mode_24_we;
  logic [7:0] clicint_24_ctl_24_qs;
  logic [7:0] clicint_24_ctl_24_wd;
  logic clicint_24_ctl_24_we;
  logic clicint_25_ip_25_qs;
  logic clicint_25_ip_25_wd;
  logic clicint_25_ip_25_we;
  logic clicint_25_ie_25_qs;
  logic clicint_25_ie_25_wd;
  logic clicint_25_ie_25_we;
  logic clicint_25_attr_shv_25_qs;
  logic clicint_25_attr_shv_25_wd;
  logic clicint_25_attr_shv_25_we;
  logic [1:0] clicint_25_attr_trig_25_qs;
  logic [1:0] clicint_25_attr_trig_25_wd;
  logic clicint_25_attr_trig_25_we;
  logic [1:0] clicint_25_attr_mode_25_qs;
  logic [1:0] clicint_25_attr_mode_25_wd;
  logic clicint_25_attr_mode_25_we;
  logic [7:0] clicint_25_ctl_25_qs;
  logic [7:0] clicint_25_ctl_25_wd;
  logic clicint_25_ctl_25_we;
  logic clicint_26_ip_26_qs;
  logic clicint_26_ip_26_wd;
  logic clicint_26_ip_26_we;
  logic clicint_26_ie_26_qs;
  logic clicint_26_ie_26_wd;
  logic clicint_26_ie_26_we;
  logic clicint_26_attr_shv_26_qs;
  logic clicint_26_attr_shv_26_wd;
  logic clicint_26_attr_shv_26_we;
  logic [1:0] clicint_26_attr_trig_26_qs;
  logic [1:0] clicint_26_attr_trig_26_wd;
  logic clicint_26_attr_trig_26_we;
  logic [1:0] clicint_26_attr_mode_26_qs;
  logic [1:0] clicint_26_attr_mode_26_wd;
  logic clicint_26_attr_mode_26_we;
  logic [7:0] clicint_26_ctl_26_qs;
  logic [7:0] clicint_26_ctl_26_wd;
  logic clicint_26_ctl_26_we;
  logic clicint_27_ip_27_qs;
  logic clicint_27_ip_27_wd;
  logic clicint_27_ip_27_we;
  logic clicint_27_ie_27_qs;
  logic clicint_27_ie_27_wd;
  logic clicint_27_ie_27_we;
  logic clicint_27_attr_shv_27_qs;
  logic clicint_27_attr_shv_27_wd;
  logic clicint_27_attr_shv_27_we;
  logic [1:0] clicint_27_attr_trig_27_qs;
  logic [1:0] clicint_27_attr_trig_27_wd;
  logic clicint_27_attr_trig_27_we;
  logic [1:0] clicint_27_attr_mode_27_qs;
  logic [1:0] clicint_27_attr_mode_27_wd;
  logic clicint_27_attr_mode_27_we;
  logic [7:0] clicint_27_ctl_27_qs;
  logic [7:0] clicint_27_ctl_27_wd;
  logic clicint_27_ctl_27_we;
  logic clicint_28_ip_28_qs;
  logic clicint_28_ip_28_wd;
  logic clicint_28_ip_28_we;
  logic clicint_28_ie_28_qs;
  logic clicint_28_ie_28_wd;
  logic clicint_28_ie_28_we;
  logic clicint_28_attr_shv_28_qs;
  logic clicint_28_attr_shv_28_wd;
  logic clicint_28_attr_shv_28_we;
  logic [1:0] clicint_28_attr_trig_28_qs;
  logic [1:0] clicint_28_attr_trig_28_wd;
  logic clicint_28_attr_trig_28_we;
  logic [1:0] clicint_28_attr_mode_28_qs;
  logic [1:0] clicint_28_attr_mode_28_wd;
  logic clicint_28_attr_mode_28_we;
  logic [7:0] clicint_28_ctl_28_qs;
  logic [7:0] clicint_28_ctl_28_wd;
  logic clicint_28_ctl_28_we;
  logic clicint_29_ip_29_qs;
  logic clicint_29_ip_29_wd;
  logic clicint_29_ip_29_we;
  logic clicint_29_ie_29_qs;
  logic clicint_29_ie_29_wd;
  logic clicint_29_ie_29_we;
  logic clicint_29_attr_shv_29_qs;
  logic clicint_29_attr_shv_29_wd;
  logic clicint_29_attr_shv_29_we;
  logic [1:0] clicint_29_attr_trig_29_qs;
  logic [1:0] clicint_29_attr_trig_29_wd;
  logic clicint_29_attr_trig_29_we;
  logic [1:0] clicint_29_attr_mode_29_qs;
  logic [1:0] clicint_29_attr_mode_29_wd;
  logic clicint_29_attr_mode_29_we;
  logic [7:0] clicint_29_ctl_29_qs;
  logic [7:0] clicint_29_ctl_29_wd;
  logic clicint_29_ctl_29_we;
  logic clicint_30_ip_30_qs;
  logic clicint_30_ip_30_wd;
  logic clicint_30_ip_30_we;
  logic clicint_30_ie_30_qs;
  logic clicint_30_ie_30_wd;
  logic clicint_30_ie_30_we;
  logic clicint_30_attr_shv_30_qs;
  logic clicint_30_attr_shv_30_wd;
  logic clicint_30_attr_shv_30_we;
  logic [1:0] clicint_30_attr_trig_30_qs;
  logic [1:0] clicint_30_attr_trig_30_wd;
  logic clicint_30_attr_trig_30_we;
  logic [1:0] clicint_30_attr_mode_30_qs;
  logic [1:0] clicint_30_attr_mode_30_wd;
  logic clicint_30_attr_mode_30_we;
  logic [7:0] clicint_30_ctl_30_qs;
  logic [7:0] clicint_30_ctl_30_wd;
  logic clicint_30_ctl_30_we;
  logic clicint_31_ip_31_qs;
  logic clicint_31_ip_31_wd;
  logic clicint_31_ip_31_we;
  logic clicint_31_ie_31_qs;
  logic clicint_31_ie_31_wd;
  logic clicint_31_ie_31_we;
  logic clicint_31_attr_shv_31_qs;
  logic clicint_31_attr_shv_31_wd;
  logic clicint_31_attr_shv_31_we;
  logic [1:0] clicint_31_attr_trig_31_qs;
  logic [1:0] clicint_31_attr_trig_31_wd;
  logic clicint_31_attr_trig_31_we;
  logic [1:0] clicint_31_attr_mode_31_qs;
  logic [1:0] clicint_31_attr_mode_31_wd;
  logic clicint_31_attr_mode_31_we;
  logic [7:0] clicint_31_ctl_31_qs;
  logic [7:0] clicint_31_ctl_31_wd;
  logic clicint_31_ctl_31_we;
  logic clicint_32_ip_32_qs;
  logic clicint_32_ip_32_wd;
  logic clicint_32_ip_32_we;
  logic clicint_32_ie_32_qs;
  logic clicint_32_ie_32_wd;
  logic clicint_32_ie_32_we;
  logic clicint_32_attr_shv_32_qs;
  logic clicint_32_attr_shv_32_wd;
  logic clicint_32_attr_shv_32_we;
  logic [1:0] clicint_32_attr_trig_32_qs;
  logic [1:0] clicint_32_attr_trig_32_wd;
  logic clicint_32_attr_trig_32_we;
  logic [1:0] clicint_32_attr_mode_32_qs;
  logic [1:0] clicint_32_attr_mode_32_wd;
  logic clicint_32_attr_mode_32_we;
  logic [7:0] clicint_32_ctl_32_qs;
  logic [7:0] clicint_32_ctl_32_wd;
  logic clicint_32_ctl_32_we;
  logic clicint_33_ip_33_qs;
  logic clicint_33_ip_33_wd;
  logic clicint_33_ip_33_we;
  logic clicint_33_ie_33_qs;
  logic clicint_33_ie_33_wd;
  logic clicint_33_ie_33_we;
  logic clicint_33_attr_shv_33_qs;
  logic clicint_33_attr_shv_33_wd;
  logic clicint_33_attr_shv_33_we;
  logic [1:0] clicint_33_attr_trig_33_qs;
  logic [1:0] clicint_33_attr_trig_33_wd;
  logic clicint_33_attr_trig_33_we;
  logic [1:0] clicint_33_attr_mode_33_qs;
  logic [1:0] clicint_33_attr_mode_33_wd;
  logic clicint_33_attr_mode_33_we;
  logic [7:0] clicint_33_ctl_33_qs;
  logic [7:0] clicint_33_ctl_33_wd;
  logic clicint_33_ctl_33_we;
  logic clicint_34_ip_34_qs;
  logic clicint_34_ip_34_wd;
  logic clicint_34_ip_34_we;
  logic clicint_34_ie_34_qs;
  logic clicint_34_ie_34_wd;
  logic clicint_34_ie_34_we;
  logic clicint_34_attr_shv_34_qs;
  logic clicint_34_attr_shv_34_wd;
  logic clicint_34_attr_shv_34_we;
  logic [1:0] clicint_34_attr_trig_34_qs;
  logic [1:0] clicint_34_attr_trig_34_wd;
  logic clicint_34_attr_trig_34_we;
  logic [1:0] clicint_34_attr_mode_34_qs;
  logic [1:0] clicint_34_attr_mode_34_wd;
  logic clicint_34_attr_mode_34_we;
  logic [7:0] clicint_34_ctl_34_qs;
  logic [7:0] clicint_34_ctl_34_wd;
  logic clicint_34_ctl_34_we;
  logic clicint_35_ip_35_qs;
  logic clicint_35_ip_35_wd;
  logic clicint_35_ip_35_we;
  logic clicint_35_ie_35_qs;
  logic clicint_35_ie_35_wd;
  logic clicint_35_ie_35_we;
  logic clicint_35_attr_shv_35_qs;
  logic clicint_35_attr_shv_35_wd;
  logic clicint_35_attr_shv_35_we;
  logic [1:0] clicint_35_attr_trig_35_qs;
  logic [1:0] clicint_35_attr_trig_35_wd;
  logic clicint_35_attr_trig_35_we;
  logic [1:0] clicint_35_attr_mode_35_qs;
  logic [1:0] clicint_35_attr_mode_35_wd;
  logic clicint_35_attr_mode_35_we;
  logic [7:0] clicint_35_ctl_35_qs;
  logic [7:0] clicint_35_ctl_35_wd;
  logic clicint_35_ctl_35_we;
  logic clicint_36_ip_36_qs;
  logic clicint_36_ip_36_wd;
  logic clicint_36_ip_36_we;
  logic clicint_36_ie_36_qs;
  logic clicint_36_ie_36_wd;
  logic clicint_36_ie_36_we;
  logic clicint_36_attr_shv_36_qs;
  logic clicint_36_attr_shv_36_wd;
  logic clicint_36_attr_shv_36_we;
  logic [1:0] clicint_36_attr_trig_36_qs;
  logic [1:0] clicint_36_attr_trig_36_wd;
  logic clicint_36_attr_trig_36_we;
  logic [1:0] clicint_36_attr_mode_36_qs;
  logic [1:0] clicint_36_attr_mode_36_wd;
  logic clicint_36_attr_mode_36_we;
  logic [7:0] clicint_36_ctl_36_qs;
  logic [7:0] clicint_36_ctl_36_wd;
  logic clicint_36_ctl_36_we;
  logic clicint_37_ip_37_qs;
  logic clicint_37_ip_37_wd;
  logic clicint_37_ip_37_we;
  logic clicint_37_ie_37_qs;
  logic clicint_37_ie_37_wd;
  logic clicint_37_ie_37_we;
  logic clicint_37_attr_shv_37_qs;
  logic clicint_37_attr_shv_37_wd;
  logic clicint_37_attr_shv_37_we;
  logic [1:0] clicint_37_attr_trig_37_qs;
  logic [1:0] clicint_37_attr_trig_37_wd;
  logic clicint_37_attr_trig_37_we;
  logic [1:0] clicint_37_attr_mode_37_qs;
  logic [1:0] clicint_37_attr_mode_37_wd;
  logic clicint_37_attr_mode_37_we;
  logic [7:0] clicint_37_ctl_37_qs;
  logic [7:0] clicint_37_ctl_37_wd;
  logic clicint_37_ctl_37_we;
  logic clicint_38_ip_38_qs;
  logic clicint_38_ip_38_wd;
  logic clicint_38_ip_38_we;
  logic clicint_38_ie_38_qs;
  logic clicint_38_ie_38_wd;
  logic clicint_38_ie_38_we;
  logic clicint_38_attr_shv_38_qs;
  logic clicint_38_attr_shv_38_wd;
  logic clicint_38_attr_shv_38_we;
  logic [1:0] clicint_38_attr_trig_38_qs;
  logic [1:0] clicint_38_attr_trig_38_wd;
  logic clicint_38_attr_trig_38_we;
  logic [1:0] clicint_38_attr_mode_38_qs;
  logic [1:0] clicint_38_attr_mode_38_wd;
  logic clicint_38_attr_mode_38_we;
  logic [7:0] clicint_38_ctl_38_qs;
  logic [7:0] clicint_38_ctl_38_wd;
  logic clicint_38_ctl_38_we;
  logic clicint_39_ip_39_qs;
  logic clicint_39_ip_39_wd;
  logic clicint_39_ip_39_we;
  logic clicint_39_ie_39_qs;
  logic clicint_39_ie_39_wd;
  logic clicint_39_ie_39_we;
  logic clicint_39_attr_shv_39_qs;
  logic clicint_39_attr_shv_39_wd;
  logic clicint_39_attr_shv_39_we;
  logic [1:0] clicint_39_attr_trig_39_qs;
  logic [1:0] clicint_39_attr_trig_39_wd;
  logic clicint_39_attr_trig_39_we;
  logic [1:0] clicint_39_attr_mode_39_qs;
  logic [1:0] clicint_39_attr_mode_39_wd;
  logic clicint_39_attr_mode_39_we;
  logic [7:0] clicint_39_ctl_39_qs;
  logic [7:0] clicint_39_ctl_39_wd;
  logic clicint_39_ctl_39_we;
  logic clicint_40_ip_40_qs;
  logic clicint_40_ip_40_wd;
  logic clicint_40_ip_40_we;
  logic clicint_40_ie_40_qs;
  logic clicint_40_ie_40_wd;
  logic clicint_40_ie_40_we;
  logic clicint_40_attr_shv_40_qs;
  logic clicint_40_attr_shv_40_wd;
  logic clicint_40_attr_shv_40_we;
  logic [1:0] clicint_40_attr_trig_40_qs;
  logic [1:0] clicint_40_attr_trig_40_wd;
  logic clicint_40_attr_trig_40_we;
  logic [1:0] clicint_40_attr_mode_40_qs;
  logic [1:0] clicint_40_attr_mode_40_wd;
  logic clicint_40_attr_mode_40_we;
  logic [7:0] clicint_40_ctl_40_qs;
  logic [7:0] clicint_40_ctl_40_wd;
  logic clicint_40_ctl_40_we;
  logic clicint_41_ip_41_qs;
  logic clicint_41_ip_41_wd;
  logic clicint_41_ip_41_we;
  logic clicint_41_ie_41_qs;
  logic clicint_41_ie_41_wd;
  logic clicint_41_ie_41_we;
  logic clicint_41_attr_shv_41_qs;
  logic clicint_41_attr_shv_41_wd;
  logic clicint_41_attr_shv_41_we;
  logic [1:0] clicint_41_attr_trig_41_qs;
  logic [1:0] clicint_41_attr_trig_41_wd;
  logic clicint_41_attr_trig_41_we;
  logic [1:0] clicint_41_attr_mode_41_qs;
  logic [1:0] clicint_41_attr_mode_41_wd;
  logic clicint_41_attr_mode_41_we;
  logic [7:0] clicint_41_ctl_41_qs;
  logic [7:0] clicint_41_ctl_41_wd;
  logic clicint_41_ctl_41_we;
  logic clicint_42_ip_42_qs;
  logic clicint_42_ip_42_wd;
  logic clicint_42_ip_42_we;
  logic clicint_42_ie_42_qs;
  logic clicint_42_ie_42_wd;
  logic clicint_42_ie_42_we;
  logic clicint_42_attr_shv_42_qs;
  logic clicint_42_attr_shv_42_wd;
  logic clicint_42_attr_shv_42_we;
  logic [1:0] clicint_42_attr_trig_42_qs;
  logic [1:0] clicint_42_attr_trig_42_wd;
  logic clicint_42_attr_trig_42_we;
  logic [1:0] clicint_42_attr_mode_42_qs;
  logic [1:0] clicint_42_attr_mode_42_wd;
  logic clicint_42_attr_mode_42_we;
  logic [7:0] clicint_42_ctl_42_qs;
  logic [7:0] clicint_42_ctl_42_wd;
  logic clicint_42_ctl_42_we;
  logic clicint_43_ip_43_qs;
  logic clicint_43_ip_43_wd;
  logic clicint_43_ip_43_we;
  logic clicint_43_ie_43_qs;
  logic clicint_43_ie_43_wd;
  logic clicint_43_ie_43_we;
  logic clicint_43_attr_shv_43_qs;
  logic clicint_43_attr_shv_43_wd;
  logic clicint_43_attr_shv_43_we;
  logic [1:0] clicint_43_attr_trig_43_qs;
  logic [1:0] clicint_43_attr_trig_43_wd;
  logic clicint_43_attr_trig_43_we;
  logic [1:0] clicint_43_attr_mode_43_qs;
  logic [1:0] clicint_43_attr_mode_43_wd;
  logic clicint_43_attr_mode_43_we;
  logic [7:0] clicint_43_ctl_43_qs;
  logic [7:0] clicint_43_ctl_43_wd;
  logic clicint_43_ctl_43_we;
  logic clicint_44_ip_44_qs;
  logic clicint_44_ip_44_wd;
  logic clicint_44_ip_44_we;
  logic clicint_44_ie_44_qs;
  logic clicint_44_ie_44_wd;
  logic clicint_44_ie_44_we;
  logic clicint_44_attr_shv_44_qs;
  logic clicint_44_attr_shv_44_wd;
  logic clicint_44_attr_shv_44_we;
  logic [1:0] clicint_44_attr_trig_44_qs;
  logic [1:0] clicint_44_attr_trig_44_wd;
  logic clicint_44_attr_trig_44_we;
  logic [1:0] clicint_44_attr_mode_44_qs;
  logic [1:0] clicint_44_attr_mode_44_wd;
  logic clicint_44_attr_mode_44_we;
  logic [7:0] clicint_44_ctl_44_qs;
  logic [7:0] clicint_44_ctl_44_wd;
  logic clicint_44_ctl_44_we;
  logic clicint_45_ip_45_qs;
  logic clicint_45_ip_45_wd;
  logic clicint_45_ip_45_we;
  logic clicint_45_ie_45_qs;
  logic clicint_45_ie_45_wd;
  logic clicint_45_ie_45_we;
  logic clicint_45_attr_shv_45_qs;
  logic clicint_45_attr_shv_45_wd;
  logic clicint_45_attr_shv_45_we;
  logic [1:0] clicint_45_attr_trig_45_qs;
  logic [1:0] clicint_45_attr_trig_45_wd;
  logic clicint_45_attr_trig_45_we;
  logic [1:0] clicint_45_attr_mode_45_qs;
  logic [1:0] clicint_45_attr_mode_45_wd;
  logic clicint_45_attr_mode_45_we;
  logic [7:0] clicint_45_ctl_45_qs;
  logic [7:0] clicint_45_ctl_45_wd;
  logic clicint_45_ctl_45_we;
  logic clicint_46_ip_46_qs;
  logic clicint_46_ip_46_wd;
  logic clicint_46_ip_46_we;
  logic clicint_46_ie_46_qs;
  logic clicint_46_ie_46_wd;
  logic clicint_46_ie_46_we;
  logic clicint_46_attr_shv_46_qs;
  logic clicint_46_attr_shv_46_wd;
  logic clicint_46_attr_shv_46_we;
  logic [1:0] clicint_46_attr_trig_46_qs;
  logic [1:0] clicint_46_attr_trig_46_wd;
  logic clicint_46_attr_trig_46_we;
  logic [1:0] clicint_46_attr_mode_46_qs;
  logic [1:0] clicint_46_attr_mode_46_wd;
  logic clicint_46_attr_mode_46_we;
  logic [7:0] clicint_46_ctl_46_qs;
  logic [7:0] clicint_46_ctl_46_wd;
  logic clicint_46_ctl_46_we;
  logic clicint_47_ip_47_qs;
  logic clicint_47_ip_47_wd;
  logic clicint_47_ip_47_we;
  logic clicint_47_ie_47_qs;
  logic clicint_47_ie_47_wd;
  logic clicint_47_ie_47_we;
  logic clicint_47_attr_shv_47_qs;
  logic clicint_47_attr_shv_47_wd;
  logic clicint_47_attr_shv_47_we;
  logic [1:0] clicint_47_attr_trig_47_qs;
  logic [1:0] clicint_47_attr_trig_47_wd;
  logic clicint_47_attr_trig_47_we;
  logic [1:0] clicint_47_attr_mode_47_qs;
  logic [1:0] clicint_47_attr_mode_47_wd;
  logic clicint_47_attr_mode_47_we;
  logic [7:0] clicint_47_ctl_47_qs;
  logic [7:0] clicint_47_ctl_47_wd;
  logic clicint_47_ctl_47_we;
  logic clicint_48_ip_48_qs;
  logic clicint_48_ip_48_wd;
  logic clicint_48_ip_48_we;
  logic clicint_48_ie_48_qs;
  logic clicint_48_ie_48_wd;
  logic clicint_48_ie_48_we;
  logic clicint_48_attr_shv_48_qs;
  logic clicint_48_attr_shv_48_wd;
  logic clicint_48_attr_shv_48_we;
  logic [1:0] clicint_48_attr_trig_48_qs;
  logic [1:0] clicint_48_attr_trig_48_wd;
  logic clicint_48_attr_trig_48_we;
  logic [1:0] clicint_48_attr_mode_48_qs;
  logic [1:0] clicint_48_attr_mode_48_wd;
  logic clicint_48_attr_mode_48_we;
  logic [7:0] clicint_48_ctl_48_qs;
  logic [7:0] clicint_48_ctl_48_wd;
  logic clicint_48_ctl_48_we;
  logic clicint_49_ip_49_qs;
  logic clicint_49_ip_49_wd;
  logic clicint_49_ip_49_we;
  logic clicint_49_ie_49_qs;
  logic clicint_49_ie_49_wd;
  logic clicint_49_ie_49_we;
  logic clicint_49_attr_shv_49_qs;
  logic clicint_49_attr_shv_49_wd;
  logic clicint_49_attr_shv_49_we;
  logic [1:0] clicint_49_attr_trig_49_qs;
  logic [1:0] clicint_49_attr_trig_49_wd;
  logic clicint_49_attr_trig_49_we;
  logic [1:0] clicint_49_attr_mode_49_qs;
  logic [1:0] clicint_49_attr_mode_49_wd;
  logic clicint_49_attr_mode_49_we;
  logic [7:0] clicint_49_ctl_49_qs;
  logic [7:0] clicint_49_ctl_49_wd;
  logic clicint_49_ctl_49_we;
  logic clicint_50_ip_50_qs;
  logic clicint_50_ip_50_wd;
  logic clicint_50_ip_50_we;
  logic clicint_50_ie_50_qs;
  logic clicint_50_ie_50_wd;
  logic clicint_50_ie_50_we;
  logic clicint_50_attr_shv_50_qs;
  logic clicint_50_attr_shv_50_wd;
  logic clicint_50_attr_shv_50_we;
  logic [1:0] clicint_50_attr_trig_50_qs;
  logic [1:0] clicint_50_attr_trig_50_wd;
  logic clicint_50_attr_trig_50_we;
  logic [1:0] clicint_50_attr_mode_50_qs;
  logic [1:0] clicint_50_attr_mode_50_wd;
  logic clicint_50_attr_mode_50_we;
  logic [7:0] clicint_50_ctl_50_qs;
  logic [7:0] clicint_50_ctl_50_wd;
  logic clicint_50_ctl_50_we;
  logic clicint_51_ip_51_qs;
  logic clicint_51_ip_51_wd;
  logic clicint_51_ip_51_we;
  logic clicint_51_ie_51_qs;
  logic clicint_51_ie_51_wd;
  logic clicint_51_ie_51_we;
  logic clicint_51_attr_shv_51_qs;
  logic clicint_51_attr_shv_51_wd;
  logic clicint_51_attr_shv_51_we;
  logic [1:0] clicint_51_attr_trig_51_qs;
  logic [1:0] clicint_51_attr_trig_51_wd;
  logic clicint_51_attr_trig_51_we;
  logic [1:0] clicint_51_attr_mode_51_qs;
  logic [1:0] clicint_51_attr_mode_51_wd;
  logic clicint_51_attr_mode_51_we;
  logic [7:0] clicint_51_ctl_51_qs;
  logic [7:0] clicint_51_ctl_51_wd;
  logic clicint_51_ctl_51_we;
  logic clicint_52_ip_52_qs;
  logic clicint_52_ip_52_wd;
  logic clicint_52_ip_52_we;
  logic clicint_52_ie_52_qs;
  logic clicint_52_ie_52_wd;
  logic clicint_52_ie_52_we;
  logic clicint_52_attr_shv_52_qs;
  logic clicint_52_attr_shv_52_wd;
  logic clicint_52_attr_shv_52_we;
  logic [1:0] clicint_52_attr_trig_52_qs;
  logic [1:0] clicint_52_attr_trig_52_wd;
  logic clicint_52_attr_trig_52_we;
  logic [1:0] clicint_52_attr_mode_52_qs;
  logic [1:0] clicint_52_attr_mode_52_wd;
  logic clicint_52_attr_mode_52_we;
  logic [7:0] clicint_52_ctl_52_qs;
  logic [7:0] clicint_52_ctl_52_wd;
  logic clicint_52_ctl_52_we;
  logic clicint_53_ip_53_qs;
  logic clicint_53_ip_53_wd;
  logic clicint_53_ip_53_we;
  logic clicint_53_ie_53_qs;
  logic clicint_53_ie_53_wd;
  logic clicint_53_ie_53_we;
  logic clicint_53_attr_shv_53_qs;
  logic clicint_53_attr_shv_53_wd;
  logic clicint_53_attr_shv_53_we;
  logic [1:0] clicint_53_attr_trig_53_qs;
  logic [1:0] clicint_53_attr_trig_53_wd;
  logic clicint_53_attr_trig_53_we;
  logic [1:0] clicint_53_attr_mode_53_qs;
  logic [1:0] clicint_53_attr_mode_53_wd;
  logic clicint_53_attr_mode_53_we;
  logic [7:0] clicint_53_ctl_53_qs;
  logic [7:0] clicint_53_ctl_53_wd;
  logic clicint_53_ctl_53_we;
  logic clicint_54_ip_54_qs;
  logic clicint_54_ip_54_wd;
  logic clicint_54_ip_54_we;
  logic clicint_54_ie_54_qs;
  logic clicint_54_ie_54_wd;
  logic clicint_54_ie_54_we;
  logic clicint_54_attr_shv_54_qs;
  logic clicint_54_attr_shv_54_wd;
  logic clicint_54_attr_shv_54_we;
  logic [1:0] clicint_54_attr_trig_54_qs;
  logic [1:0] clicint_54_attr_trig_54_wd;
  logic clicint_54_attr_trig_54_we;
  logic [1:0] clicint_54_attr_mode_54_qs;
  logic [1:0] clicint_54_attr_mode_54_wd;
  logic clicint_54_attr_mode_54_we;
  logic [7:0] clicint_54_ctl_54_qs;
  logic [7:0] clicint_54_ctl_54_wd;
  logic clicint_54_ctl_54_we;
  logic clicint_55_ip_55_qs;
  logic clicint_55_ip_55_wd;
  logic clicint_55_ip_55_we;
  logic clicint_55_ie_55_qs;
  logic clicint_55_ie_55_wd;
  logic clicint_55_ie_55_we;
  logic clicint_55_attr_shv_55_qs;
  logic clicint_55_attr_shv_55_wd;
  logic clicint_55_attr_shv_55_we;
  logic [1:0] clicint_55_attr_trig_55_qs;
  logic [1:0] clicint_55_attr_trig_55_wd;
  logic clicint_55_attr_trig_55_we;
  logic [1:0] clicint_55_attr_mode_55_qs;
  logic [1:0] clicint_55_attr_mode_55_wd;
  logic clicint_55_attr_mode_55_we;
  logic [7:0] clicint_55_ctl_55_qs;
  logic [7:0] clicint_55_ctl_55_wd;
  logic clicint_55_ctl_55_we;
  logic clicint_56_ip_56_qs;
  logic clicint_56_ip_56_wd;
  logic clicint_56_ip_56_we;
  logic clicint_56_ie_56_qs;
  logic clicint_56_ie_56_wd;
  logic clicint_56_ie_56_we;
  logic clicint_56_attr_shv_56_qs;
  logic clicint_56_attr_shv_56_wd;
  logic clicint_56_attr_shv_56_we;
  logic [1:0] clicint_56_attr_trig_56_qs;
  logic [1:0] clicint_56_attr_trig_56_wd;
  logic clicint_56_attr_trig_56_we;
  logic [1:0] clicint_56_attr_mode_56_qs;
  logic [1:0] clicint_56_attr_mode_56_wd;
  logic clicint_56_attr_mode_56_we;
  logic [7:0] clicint_56_ctl_56_qs;
  logic [7:0] clicint_56_ctl_56_wd;
  logic clicint_56_ctl_56_we;
  logic clicint_57_ip_57_qs;
  logic clicint_57_ip_57_wd;
  logic clicint_57_ip_57_we;
  logic clicint_57_ie_57_qs;
  logic clicint_57_ie_57_wd;
  logic clicint_57_ie_57_we;
  logic clicint_57_attr_shv_57_qs;
  logic clicint_57_attr_shv_57_wd;
  logic clicint_57_attr_shv_57_we;
  logic [1:0] clicint_57_attr_trig_57_qs;
  logic [1:0] clicint_57_attr_trig_57_wd;
  logic clicint_57_attr_trig_57_we;
  logic [1:0] clicint_57_attr_mode_57_qs;
  logic [1:0] clicint_57_attr_mode_57_wd;
  logic clicint_57_attr_mode_57_we;
  logic [7:0] clicint_57_ctl_57_qs;
  logic [7:0] clicint_57_ctl_57_wd;
  logic clicint_57_ctl_57_we;
  logic clicint_58_ip_58_qs;
  logic clicint_58_ip_58_wd;
  logic clicint_58_ip_58_we;
  logic clicint_58_ie_58_qs;
  logic clicint_58_ie_58_wd;
  logic clicint_58_ie_58_we;
  logic clicint_58_attr_shv_58_qs;
  logic clicint_58_attr_shv_58_wd;
  logic clicint_58_attr_shv_58_we;
  logic [1:0] clicint_58_attr_trig_58_qs;
  logic [1:0] clicint_58_attr_trig_58_wd;
  logic clicint_58_attr_trig_58_we;
  logic [1:0] clicint_58_attr_mode_58_qs;
  logic [1:0] clicint_58_attr_mode_58_wd;
  logic clicint_58_attr_mode_58_we;
  logic [7:0] clicint_58_ctl_58_qs;
  logic [7:0] clicint_58_ctl_58_wd;
  logic clicint_58_ctl_58_we;
  logic clicint_59_ip_59_qs;
  logic clicint_59_ip_59_wd;
  logic clicint_59_ip_59_we;
  logic clicint_59_ie_59_qs;
  logic clicint_59_ie_59_wd;
  logic clicint_59_ie_59_we;
  logic clicint_59_attr_shv_59_qs;
  logic clicint_59_attr_shv_59_wd;
  logic clicint_59_attr_shv_59_we;
  logic [1:0] clicint_59_attr_trig_59_qs;
  logic [1:0] clicint_59_attr_trig_59_wd;
  logic clicint_59_attr_trig_59_we;
  logic [1:0] clicint_59_attr_mode_59_qs;
  logic [1:0] clicint_59_attr_mode_59_wd;
  logic clicint_59_attr_mode_59_we;
  logic [7:0] clicint_59_ctl_59_qs;
  logic [7:0] clicint_59_ctl_59_wd;
  logic clicint_59_ctl_59_we;
  logic clicint_60_ip_60_qs;
  logic clicint_60_ip_60_wd;
  logic clicint_60_ip_60_we;
  logic clicint_60_ie_60_qs;
  logic clicint_60_ie_60_wd;
  logic clicint_60_ie_60_we;
  logic clicint_60_attr_shv_60_qs;
  logic clicint_60_attr_shv_60_wd;
  logic clicint_60_attr_shv_60_we;
  logic [1:0] clicint_60_attr_trig_60_qs;
  logic [1:0] clicint_60_attr_trig_60_wd;
  logic clicint_60_attr_trig_60_we;
  logic [1:0] clicint_60_attr_mode_60_qs;
  logic [1:0] clicint_60_attr_mode_60_wd;
  logic clicint_60_attr_mode_60_we;
  logic [7:0] clicint_60_ctl_60_qs;
  logic [7:0] clicint_60_ctl_60_wd;
  logic clicint_60_ctl_60_we;
  logic clicint_61_ip_61_qs;
  logic clicint_61_ip_61_wd;
  logic clicint_61_ip_61_we;
  logic clicint_61_ie_61_qs;
  logic clicint_61_ie_61_wd;
  logic clicint_61_ie_61_we;
  logic clicint_61_attr_shv_61_qs;
  logic clicint_61_attr_shv_61_wd;
  logic clicint_61_attr_shv_61_we;
  logic [1:0] clicint_61_attr_trig_61_qs;
  logic [1:0] clicint_61_attr_trig_61_wd;
  logic clicint_61_attr_trig_61_we;
  logic [1:0] clicint_61_attr_mode_61_qs;
  logic [1:0] clicint_61_attr_mode_61_wd;
  logic clicint_61_attr_mode_61_we;
  logic [7:0] clicint_61_ctl_61_qs;
  logic [7:0] clicint_61_ctl_61_wd;
  logic clicint_61_ctl_61_we;
  logic clicint_62_ip_62_qs;
  logic clicint_62_ip_62_wd;
  logic clicint_62_ip_62_we;
  logic clicint_62_ie_62_qs;
  logic clicint_62_ie_62_wd;
  logic clicint_62_ie_62_we;
  logic clicint_62_attr_shv_62_qs;
  logic clicint_62_attr_shv_62_wd;
  logic clicint_62_attr_shv_62_we;
  logic [1:0] clicint_62_attr_trig_62_qs;
  logic [1:0] clicint_62_attr_trig_62_wd;
  logic clicint_62_attr_trig_62_we;
  logic [1:0] clicint_62_attr_mode_62_qs;
  logic [1:0] clicint_62_attr_mode_62_wd;
  logic clicint_62_attr_mode_62_we;
  logic [7:0] clicint_62_ctl_62_qs;
  logic [7:0] clicint_62_ctl_62_wd;
  logic clicint_62_ctl_62_we;
  logic clicint_63_ip_63_qs;
  logic clicint_63_ip_63_wd;
  logic clicint_63_ip_63_we;
  logic clicint_63_ie_63_qs;
  logic clicint_63_ie_63_wd;
  logic clicint_63_ie_63_we;
  logic clicint_63_attr_shv_63_qs;
  logic clicint_63_attr_shv_63_wd;
  logic clicint_63_attr_shv_63_we;
  logic [1:0] clicint_63_attr_trig_63_qs;
  logic [1:0] clicint_63_attr_trig_63_wd;
  logic clicint_63_attr_trig_63_we;
  logic [1:0] clicint_63_attr_mode_63_qs;
  logic [1:0] clicint_63_attr_mode_63_wd;
  logic clicint_63_attr_mode_63_we;
  logic [7:0] clicint_63_ctl_63_qs;
  logic [7:0] clicint_63_ctl_63_wd;
  logic clicint_63_ctl_63_we;
  logic clicint_64_ip_64_qs;
  logic clicint_64_ip_64_wd;
  logic clicint_64_ip_64_we;
  logic clicint_64_ie_64_qs;
  logic clicint_64_ie_64_wd;
  logic clicint_64_ie_64_we;
  logic clicint_64_attr_shv_64_qs;
  logic clicint_64_attr_shv_64_wd;
  logic clicint_64_attr_shv_64_we;
  logic [1:0] clicint_64_attr_trig_64_qs;
  logic [1:0] clicint_64_attr_trig_64_wd;
  logic clicint_64_attr_trig_64_we;
  logic [1:0] clicint_64_attr_mode_64_qs;
  logic [1:0] clicint_64_attr_mode_64_wd;
  logic clicint_64_attr_mode_64_we;
  logic [7:0] clicint_64_ctl_64_qs;
  logic [7:0] clicint_64_ctl_64_wd;
  logic clicint_64_ctl_64_we;
  logic clicint_65_ip_65_qs;
  logic clicint_65_ip_65_wd;
  logic clicint_65_ip_65_we;
  logic clicint_65_ie_65_qs;
  logic clicint_65_ie_65_wd;
  logic clicint_65_ie_65_we;
  logic clicint_65_attr_shv_65_qs;
  logic clicint_65_attr_shv_65_wd;
  logic clicint_65_attr_shv_65_we;
  logic [1:0] clicint_65_attr_trig_65_qs;
  logic [1:0] clicint_65_attr_trig_65_wd;
  logic clicint_65_attr_trig_65_we;
  logic [1:0] clicint_65_attr_mode_65_qs;
  logic [1:0] clicint_65_attr_mode_65_wd;
  logic clicint_65_attr_mode_65_we;
  logic [7:0] clicint_65_ctl_65_qs;
  logic [7:0] clicint_65_ctl_65_wd;
  logic clicint_65_ctl_65_we;
  logic clicint_66_ip_66_qs;
  logic clicint_66_ip_66_wd;
  logic clicint_66_ip_66_we;
  logic clicint_66_ie_66_qs;
  logic clicint_66_ie_66_wd;
  logic clicint_66_ie_66_we;
  logic clicint_66_attr_shv_66_qs;
  logic clicint_66_attr_shv_66_wd;
  logic clicint_66_attr_shv_66_we;
  logic [1:0] clicint_66_attr_trig_66_qs;
  logic [1:0] clicint_66_attr_trig_66_wd;
  logic clicint_66_attr_trig_66_we;
  logic [1:0] clicint_66_attr_mode_66_qs;
  logic [1:0] clicint_66_attr_mode_66_wd;
  logic clicint_66_attr_mode_66_we;
  logic [7:0] clicint_66_ctl_66_qs;
  logic [7:0] clicint_66_ctl_66_wd;
  logic clicint_66_ctl_66_we;
  logic clicint_67_ip_67_qs;
  logic clicint_67_ip_67_wd;
  logic clicint_67_ip_67_we;
  logic clicint_67_ie_67_qs;
  logic clicint_67_ie_67_wd;
  logic clicint_67_ie_67_we;
  logic clicint_67_attr_shv_67_qs;
  logic clicint_67_attr_shv_67_wd;
  logic clicint_67_attr_shv_67_we;
  logic [1:0] clicint_67_attr_trig_67_qs;
  logic [1:0] clicint_67_attr_trig_67_wd;
  logic clicint_67_attr_trig_67_we;
  logic [1:0] clicint_67_attr_mode_67_qs;
  logic [1:0] clicint_67_attr_mode_67_wd;
  logic clicint_67_attr_mode_67_we;
  logic [7:0] clicint_67_ctl_67_qs;
  logic [7:0] clicint_67_ctl_67_wd;
  logic clicint_67_ctl_67_we;
  logic clicint_68_ip_68_qs;
  logic clicint_68_ip_68_wd;
  logic clicint_68_ip_68_we;
  logic clicint_68_ie_68_qs;
  logic clicint_68_ie_68_wd;
  logic clicint_68_ie_68_we;
  logic clicint_68_attr_shv_68_qs;
  logic clicint_68_attr_shv_68_wd;
  logic clicint_68_attr_shv_68_we;
  logic [1:0] clicint_68_attr_trig_68_qs;
  logic [1:0] clicint_68_attr_trig_68_wd;
  logic clicint_68_attr_trig_68_we;
  logic [1:0] clicint_68_attr_mode_68_qs;
  logic [1:0] clicint_68_attr_mode_68_wd;
  logic clicint_68_attr_mode_68_we;
  logic [7:0] clicint_68_ctl_68_qs;
  logic [7:0] clicint_68_ctl_68_wd;
  logic clicint_68_ctl_68_we;
  logic clicint_69_ip_69_qs;
  logic clicint_69_ip_69_wd;
  logic clicint_69_ip_69_we;
  logic clicint_69_ie_69_qs;
  logic clicint_69_ie_69_wd;
  logic clicint_69_ie_69_we;
  logic clicint_69_attr_shv_69_qs;
  logic clicint_69_attr_shv_69_wd;
  logic clicint_69_attr_shv_69_we;
  logic [1:0] clicint_69_attr_trig_69_qs;
  logic [1:0] clicint_69_attr_trig_69_wd;
  logic clicint_69_attr_trig_69_we;
  logic [1:0] clicint_69_attr_mode_69_qs;
  logic [1:0] clicint_69_attr_mode_69_wd;
  logic clicint_69_attr_mode_69_we;
  logic [7:0] clicint_69_ctl_69_qs;
  logic [7:0] clicint_69_ctl_69_wd;
  logic clicint_69_ctl_69_we;
  logic clicint_70_ip_70_qs;
  logic clicint_70_ip_70_wd;
  logic clicint_70_ip_70_we;
  logic clicint_70_ie_70_qs;
  logic clicint_70_ie_70_wd;
  logic clicint_70_ie_70_we;
  logic clicint_70_attr_shv_70_qs;
  logic clicint_70_attr_shv_70_wd;
  logic clicint_70_attr_shv_70_we;
  logic [1:0] clicint_70_attr_trig_70_qs;
  logic [1:0] clicint_70_attr_trig_70_wd;
  logic clicint_70_attr_trig_70_we;
  logic [1:0] clicint_70_attr_mode_70_qs;
  logic [1:0] clicint_70_attr_mode_70_wd;
  logic clicint_70_attr_mode_70_we;
  logic [7:0] clicint_70_ctl_70_qs;
  logic [7:0] clicint_70_ctl_70_wd;
  logic clicint_70_ctl_70_we;
  logic clicint_71_ip_71_qs;
  logic clicint_71_ip_71_wd;
  logic clicint_71_ip_71_we;
  logic clicint_71_ie_71_qs;
  logic clicint_71_ie_71_wd;
  logic clicint_71_ie_71_we;
  logic clicint_71_attr_shv_71_qs;
  logic clicint_71_attr_shv_71_wd;
  logic clicint_71_attr_shv_71_we;
  logic [1:0] clicint_71_attr_trig_71_qs;
  logic [1:0] clicint_71_attr_trig_71_wd;
  logic clicint_71_attr_trig_71_we;
  logic [1:0] clicint_71_attr_mode_71_qs;
  logic [1:0] clicint_71_attr_mode_71_wd;
  logic clicint_71_attr_mode_71_we;
  logic [7:0] clicint_71_ctl_71_qs;
  logic [7:0] clicint_71_ctl_71_wd;
  logic clicint_71_ctl_71_we;
  logic clicint_72_ip_72_qs;
  logic clicint_72_ip_72_wd;
  logic clicint_72_ip_72_we;
  logic clicint_72_ie_72_qs;
  logic clicint_72_ie_72_wd;
  logic clicint_72_ie_72_we;
  logic clicint_72_attr_shv_72_qs;
  logic clicint_72_attr_shv_72_wd;
  logic clicint_72_attr_shv_72_we;
  logic [1:0] clicint_72_attr_trig_72_qs;
  logic [1:0] clicint_72_attr_trig_72_wd;
  logic clicint_72_attr_trig_72_we;
  logic [1:0] clicint_72_attr_mode_72_qs;
  logic [1:0] clicint_72_attr_mode_72_wd;
  logic clicint_72_attr_mode_72_we;
  logic [7:0] clicint_72_ctl_72_qs;
  logic [7:0] clicint_72_ctl_72_wd;
  logic clicint_72_ctl_72_we;
  logic clicint_73_ip_73_qs;
  logic clicint_73_ip_73_wd;
  logic clicint_73_ip_73_we;
  logic clicint_73_ie_73_qs;
  logic clicint_73_ie_73_wd;
  logic clicint_73_ie_73_we;
  logic clicint_73_attr_shv_73_qs;
  logic clicint_73_attr_shv_73_wd;
  logic clicint_73_attr_shv_73_we;
  logic [1:0] clicint_73_attr_trig_73_qs;
  logic [1:0] clicint_73_attr_trig_73_wd;
  logic clicint_73_attr_trig_73_we;
  logic [1:0] clicint_73_attr_mode_73_qs;
  logic [1:0] clicint_73_attr_mode_73_wd;
  logic clicint_73_attr_mode_73_we;
  logic [7:0] clicint_73_ctl_73_qs;
  logic [7:0] clicint_73_ctl_73_wd;
  logic clicint_73_ctl_73_we;
  logic clicint_74_ip_74_qs;
  logic clicint_74_ip_74_wd;
  logic clicint_74_ip_74_we;
  logic clicint_74_ie_74_qs;
  logic clicint_74_ie_74_wd;
  logic clicint_74_ie_74_we;
  logic clicint_74_attr_shv_74_qs;
  logic clicint_74_attr_shv_74_wd;
  logic clicint_74_attr_shv_74_we;
  logic [1:0] clicint_74_attr_trig_74_qs;
  logic [1:0] clicint_74_attr_trig_74_wd;
  logic clicint_74_attr_trig_74_we;
  logic [1:0] clicint_74_attr_mode_74_qs;
  logic [1:0] clicint_74_attr_mode_74_wd;
  logic clicint_74_attr_mode_74_we;
  logic [7:0] clicint_74_ctl_74_qs;
  logic [7:0] clicint_74_ctl_74_wd;
  logic clicint_74_ctl_74_we;
  logic clicint_75_ip_75_qs;
  logic clicint_75_ip_75_wd;
  logic clicint_75_ip_75_we;
  logic clicint_75_ie_75_qs;
  logic clicint_75_ie_75_wd;
  logic clicint_75_ie_75_we;
  logic clicint_75_attr_shv_75_qs;
  logic clicint_75_attr_shv_75_wd;
  logic clicint_75_attr_shv_75_we;
  logic [1:0] clicint_75_attr_trig_75_qs;
  logic [1:0] clicint_75_attr_trig_75_wd;
  logic clicint_75_attr_trig_75_we;
  logic [1:0] clicint_75_attr_mode_75_qs;
  logic [1:0] clicint_75_attr_mode_75_wd;
  logic clicint_75_attr_mode_75_we;
  logic [7:0] clicint_75_ctl_75_qs;
  logic [7:0] clicint_75_ctl_75_wd;
  logic clicint_75_ctl_75_we;
  logic clicint_76_ip_76_qs;
  logic clicint_76_ip_76_wd;
  logic clicint_76_ip_76_we;
  logic clicint_76_ie_76_qs;
  logic clicint_76_ie_76_wd;
  logic clicint_76_ie_76_we;
  logic clicint_76_attr_shv_76_qs;
  logic clicint_76_attr_shv_76_wd;
  logic clicint_76_attr_shv_76_we;
  logic [1:0] clicint_76_attr_trig_76_qs;
  logic [1:0] clicint_76_attr_trig_76_wd;
  logic clicint_76_attr_trig_76_we;
  logic [1:0] clicint_76_attr_mode_76_qs;
  logic [1:0] clicint_76_attr_mode_76_wd;
  logic clicint_76_attr_mode_76_we;
  logic [7:0] clicint_76_ctl_76_qs;
  logic [7:0] clicint_76_ctl_76_wd;
  logic clicint_76_ctl_76_we;
  logic clicint_77_ip_77_qs;
  logic clicint_77_ip_77_wd;
  logic clicint_77_ip_77_we;
  logic clicint_77_ie_77_qs;
  logic clicint_77_ie_77_wd;
  logic clicint_77_ie_77_we;
  logic clicint_77_attr_shv_77_qs;
  logic clicint_77_attr_shv_77_wd;
  logic clicint_77_attr_shv_77_we;
  logic [1:0] clicint_77_attr_trig_77_qs;
  logic [1:0] clicint_77_attr_trig_77_wd;
  logic clicint_77_attr_trig_77_we;
  logic [1:0] clicint_77_attr_mode_77_qs;
  logic [1:0] clicint_77_attr_mode_77_wd;
  logic clicint_77_attr_mode_77_we;
  logic [7:0] clicint_77_ctl_77_qs;
  logic [7:0] clicint_77_ctl_77_wd;
  logic clicint_77_ctl_77_we;
  logic clicint_78_ip_78_qs;
  logic clicint_78_ip_78_wd;
  logic clicint_78_ip_78_we;
  logic clicint_78_ie_78_qs;
  logic clicint_78_ie_78_wd;
  logic clicint_78_ie_78_we;
  logic clicint_78_attr_shv_78_qs;
  logic clicint_78_attr_shv_78_wd;
  logic clicint_78_attr_shv_78_we;
  logic [1:0] clicint_78_attr_trig_78_qs;
  logic [1:0] clicint_78_attr_trig_78_wd;
  logic clicint_78_attr_trig_78_we;
  logic [1:0] clicint_78_attr_mode_78_qs;
  logic [1:0] clicint_78_attr_mode_78_wd;
  logic clicint_78_attr_mode_78_we;
  logic [7:0] clicint_78_ctl_78_qs;
  logic [7:0] clicint_78_ctl_78_wd;
  logic clicint_78_ctl_78_we;
  logic clicint_79_ip_79_qs;
  logic clicint_79_ip_79_wd;
  logic clicint_79_ip_79_we;
  logic clicint_79_ie_79_qs;
  logic clicint_79_ie_79_wd;
  logic clicint_79_ie_79_we;
  logic clicint_79_attr_shv_79_qs;
  logic clicint_79_attr_shv_79_wd;
  logic clicint_79_attr_shv_79_we;
  logic [1:0] clicint_79_attr_trig_79_qs;
  logic [1:0] clicint_79_attr_trig_79_wd;
  logic clicint_79_attr_trig_79_we;
  logic [1:0] clicint_79_attr_mode_79_qs;
  logic [1:0] clicint_79_attr_mode_79_wd;
  logic clicint_79_attr_mode_79_we;
  logic [7:0] clicint_79_ctl_79_qs;
  logic [7:0] clicint_79_ctl_79_wd;
  logic clicint_79_ctl_79_we;
  logic clicint_80_ip_80_qs;
  logic clicint_80_ip_80_wd;
  logic clicint_80_ip_80_we;
  logic clicint_80_ie_80_qs;
  logic clicint_80_ie_80_wd;
  logic clicint_80_ie_80_we;
  logic clicint_80_attr_shv_80_qs;
  logic clicint_80_attr_shv_80_wd;
  logic clicint_80_attr_shv_80_we;
  logic [1:0] clicint_80_attr_trig_80_qs;
  logic [1:0] clicint_80_attr_trig_80_wd;
  logic clicint_80_attr_trig_80_we;
  logic [1:0] clicint_80_attr_mode_80_qs;
  logic [1:0] clicint_80_attr_mode_80_wd;
  logic clicint_80_attr_mode_80_we;
  logic [7:0] clicint_80_ctl_80_qs;
  logic [7:0] clicint_80_ctl_80_wd;
  logic clicint_80_ctl_80_we;
  logic clicint_81_ip_81_qs;
  logic clicint_81_ip_81_wd;
  logic clicint_81_ip_81_we;
  logic clicint_81_ie_81_qs;
  logic clicint_81_ie_81_wd;
  logic clicint_81_ie_81_we;
  logic clicint_81_attr_shv_81_qs;
  logic clicint_81_attr_shv_81_wd;
  logic clicint_81_attr_shv_81_we;
  logic [1:0] clicint_81_attr_trig_81_qs;
  logic [1:0] clicint_81_attr_trig_81_wd;
  logic clicint_81_attr_trig_81_we;
  logic [1:0] clicint_81_attr_mode_81_qs;
  logic [1:0] clicint_81_attr_mode_81_wd;
  logic clicint_81_attr_mode_81_we;
  logic [7:0] clicint_81_ctl_81_qs;
  logic [7:0] clicint_81_ctl_81_wd;
  logic clicint_81_ctl_81_we;
  logic clicint_82_ip_82_qs;
  logic clicint_82_ip_82_wd;
  logic clicint_82_ip_82_we;
  logic clicint_82_ie_82_qs;
  logic clicint_82_ie_82_wd;
  logic clicint_82_ie_82_we;
  logic clicint_82_attr_shv_82_qs;
  logic clicint_82_attr_shv_82_wd;
  logic clicint_82_attr_shv_82_we;
  logic [1:0] clicint_82_attr_trig_82_qs;
  logic [1:0] clicint_82_attr_trig_82_wd;
  logic clicint_82_attr_trig_82_we;
  logic [1:0] clicint_82_attr_mode_82_qs;
  logic [1:0] clicint_82_attr_mode_82_wd;
  logic clicint_82_attr_mode_82_we;
  logic [7:0] clicint_82_ctl_82_qs;
  logic [7:0] clicint_82_ctl_82_wd;
  logic clicint_82_ctl_82_we;
  logic clicint_83_ip_83_qs;
  logic clicint_83_ip_83_wd;
  logic clicint_83_ip_83_we;
  logic clicint_83_ie_83_qs;
  logic clicint_83_ie_83_wd;
  logic clicint_83_ie_83_we;
  logic clicint_83_attr_shv_83_qs;
  logic clicint_83_attr_shv_83_wd;
  logic clicint_83_attr_shv_83_we;
  logic [1:0] clicint_83_attr_trig_83_qs;
  logic [1:0] clicint_83_attr_trig_83_wd;
  logic clicint_83_attr_trig_83_we;
  logic [1:0] clicint_83_attr_mode_83_qs;
  logic [1:0] clicint_83_attr_mode_83_wd;
  logic clicint_83_attr_mode_83_we;
  logic [7:0] clicint_83_ctl_83_qs;
  logic [7:0] clicint_83_ctl_83_wd;
  logic clicint_83_ctl_83_we;
  logic clicint_84_ip_84_qs;
  logic clicint_84_ip_84_wd;
  logic clicint_84_ip_84_we;
  logic clicint_84_ie_84_qs;
  logic clicint_84_ie_84_wd;
  logic clicint_84_ie_84_we;
  logic clicint_84_attr_shv_84_qs;
  logic clicint_84_attr_shv_84_wd;
  logic clicint_84_attr_shv_84_we;
  logic [1:0] clicint_84_attr_trig_84_qs;
  logic [1:0] clicint_84_attr_trig_84_wd;
  logic clicint_84_attr_trig_84_we;
  logic [1:0] clicint_84_attr_mode_84_qs;
  logic [1:0] clicint_84_attr_mode_84_wd;
  logic clicint_84_attr_mode_84_we;
  logic [7:0] clicint_84_ctl_84_qs;
  logic [7:0] clicint_84_ctl_84_wd;
  logic clicint_84_ctl_84_we;
  logic clicint_85_ip_85_qs;
  logic clicint_85_ip_85_wd;
  logic clicint_85_ip_85_we;
  logic clicint_85_ie_85_qs;
  logic clicint_85_ie_85_wd;
  logic clicint_85_ie_85_we;
  logic clicint_85_attr_shv_85_qs;
  logic clicint_85_attr_shv_85_wd;
  logic clicint_85_attr_shv_85_we;
  logic [1:0] clicint_85_attr_trig_85_qs;
  logic [1:0] clicint_85_attr_trig_85_wd;
  logic clicint_85_attr_trig_85_we;
  logic [1:0] clicint_85_attr_mode_85_qs;
  logic [1:0] clicint_85_attr_mode_85_wd;
  logic clicint_85_attr_mode_85_we;
  logic [7:0] clicint_85_ctl_85_qs;
  logic [7:0] clicint_85_ctl_85_wd;
  logic clicint_85_ctl_85_we;
  logic clicint_86_ip_86_qs;
  logic clicint_86_ip_86_wd;
  logic clicint_86_ip_86_we;
  logic clicint_86_ie_86_qs;
  logic clicint_86_ie_86_wd;
  logic clicint_86_ie_86_we;
  logic clicint_86_attr_shv_86_qs;
  logic clicint_86_attr_shv_86_wd;
  logic clicint_86_attr_shv_86_we;
  logic [1:0] clicint_86_attr_trig_86_qs;
  logic [1:0] clicint_86_attr_trig_86_wd;
  logic clicint_86_attr_trig_86_we;
  logic [1:0] clicint_86_attr_mode_86_qs;
  logic [1:0] clicint_86_attr_mode_86_wd;
  logic clicint_86_attr_mode_86_we;
  logic [7:0] clicint_86_ctl_86_qs;
  logic [7:0] clicint_86_ctl_86_wd;
  logic clicint_86_ctl_86_we;
  logic clicint_87_ip_87_qs;
  logic clicint_87_ip_87_wd;
  logic clicint_87_ip_87_we;
  logic clicint_87_ie_87_qs;
  logic clicint_87_ie_87_wd;
  logic clicint_87_ie_87_we;
  logic clicint_87_attr_shv_87_qs;
  logic clicint_87_attr_shv_87_wd;
  logic clicint_87_attr_shv_87_we;
  logic [1:0] clicint_87_attr_trig_87_qs;
  logic [1:0] clicint_87_attr_trig_87_wd;
  logic clicint_87_attr_trig_87_we;
  logic [1:0] clicint_87_attr_mode_87_qs;
  logic [1:0] clicint_87_attr_mode_87_wd;
  logic clicint_87_attr_mode_87_we;
  logic [7:0] clicint_87_ctl_87_qs;
  logic [7:0] clicint_87_ctl_87_wd;
  logic clicint_87_ctl_87_we;
  logic clicint_88_ip_88_qs;
  logic clicint_88_ip_88_wd;
  logic clicint_88_ip_88_we;
  logic clicint_88_ie_88_qs;
  logic clicint_88_ie_88_wd;
  logic clicint_88_ie_88_we;
  logic clicint_88_attr_shv_88_qs;
  logic clicint_88_attr_shv_88_wd;
  logic clicint_88_attr_shv_88_we;
  logic [1:0] clicint_88_attr_trig_88_qs;
  logic [1:0] clicint_88_attr_trig_88_wd;
  logic clicint_88_attr_trig_88_we;
  logic [1:0] clicint_88_attr_mode_88_qs;
  logic [1:0] clicint_88_attr_mode_88_wd;
  logic clicint_88_attr_mode_88_we;
  logic [7:0] clicint_88_ctl_88_qs;
  logic [7:0] clicint_88_ctl_88_wd;
  logic clicint_88_ctl_88_we;
  logic clicint_89_ip_89_qs;
  logic clicint_89_ip_89_wd;
  logic clicint_89_ip_89_we;
  logic clicint_89_ie_89_qs;
  logic clicint_89_ie_89_wd;
  logic clicint_89_ie_89_we;
  logic clicint_89_attr_shv_89_qs;
  logic clicint_89_attr_shv_89_wd;
  logic clicint_89_attr_shv_89_we;
  logic [1:0] clicint_89_attr_trig_89_qs;
  logic [1:0] clicint_89_attr_trig_89_wd;
  logic clicint_89_attr_trig_89_we;
  logic [1:0] clicint_89_attr_mode_89_qs;
  logic [1:0] clicint_89_attr_mode_89_wd;
  logic clicint_89_attr_mode_89_we;
  logic [7:0] clicint_89_ctl_89_qs;
  logic [7:0] clicint_89_ctl_89_wd;
  logic clicint_89_ctl_89_we;
  logic clicint_90_ip_90_qs;
  logic clicint_90_ip_90_wd;
  logic clicint_90_ip_90_we;
  logic clicint_90_ie_90_qs;
  logic clicint_90_ie_90_wd;
  logic clicint_90_ie_90_we;
  logic clicint_90_attr_shv_90_qs;
  logic clicint_90_attr_shv_90_wd;
  logic clicint_90_attr_shv_90_we;
  logic [1:0] clicint_90_attr_trig_90_qs;
  logic [1:0] clicint_90_attr_trig_90_wd;
  logic clicint_90_attr_trig_90_we;
  logic [1:0] clicint_90_attr_mode_90_qs;
  logic [1:0] clicint_90_attr_mode_90_wd;
  logic clicint_90_attr_mode_90_we;
  logic [7:0] clicint_90_ctl_90_qs;
  logic [7:0] clicint_90_ctl_90_wd;
  logic clicint_90_ctl_90_we;
  logic clicint_91_ip_91_qs;
  logic clicint_91_ip_91_wd;
  logic clicint_91_ip_91_we;
  logic clicint_91_ie_91_qs;
  logic clicint_91_ie_91_wd;
  logic clicint_91_ie_91_we;
  logic clicint_91_attr_shv_91_qs;
  logic clicint_91_attr_shv_91_wd;
  logic clicint_91_attr_shv_91_we;
  logic [1:0] clicint_91_attr_trig_91_qs;
  logic [1:0] clicint_91_attr_trig_91_wd;
  logic clicint_91_attr_trig_91_we;
  logic [1:0] clicint_91_attr_mode_91_qs;
  logic [1:0] clicint_91_attr_mode_91_wd;
  logic clicint_91_attr_mode_91_we;
  logic [7:0] clicint_91_ctl_91_qs;
  logic [7:0] clicint_91_ctl_91_wd;
  logic clicint_91_ctl_91_we;
  logic clicint_92_ip_92_qs;
  logic clicint_92_ip_92_wd;
  logic clicint_92_ip_92_we;
  logic clicint_92_ie_92_qs;
  logic clicint_92_ie_92_wd;
  logic clicint_92_ie_92_we;
  logic clicint_92_attr_shv_92_qs;
  logic clicint_92_attr_shv_92_wd;
  logic clicint_92_attr_shv_92_we;
  logic [1:0] clicint_92_attr_trig_92_qs;
  logic [1:0] clicint_92_attr_trig_92_wd;
  logic clicint_92_attr_trig_92_we;
  logic [1:0] clicint_92_attr_mode_92_qs;
  logic [1:0] clicint_92_attr_mode_92_wd;
  logic clicint_92_attr_mode_92_we;
  logic [7:0] clicint_92_ctl_92_qs;
  logic [7:0] clicint_92_ctl_92_wd;
  logic clicint_92_ctl_92_we;
  logic clicint_93_ip_93_qs;
  logic clicint_93_ip_93_wd;
  logic clicint_93_ip_93_we;
  logic clicint_93_ie_93_qs;
  logic clicint_93_ie_93_wd;
  logic clicint_93_ie_93_we;
  logic clicint_93_attr_shv_93_qs;
  logic clicint_93_attr_shv_93_wd;
  logic clicint_93_attr_shv_93_we;
  logic [1:0] clicint_93_attr_trig_93_qs;
  logic [1:0] clicint_93_attr_trig_93_wd;
  logic clicint_93_attr_trig_93_we;
  logic [1:0] clicint_93_attr_mode_93_qs;
  logic [1:0] clicint_93_attr_mode_93_wd;
  logic clicint_93_attr_mode_93_we;
  logic [7:0] clicint_93_ctl_93_qs;
  logic [7:0] clicint_93_ctl_93_wd;
  logic clicint_93_ctl_93_we;
  logic clicint_94_ip_94_qs;
  logic clicint_94_ip_94_wd;
  logic clicint_94_ip_94_we;
  logic clicint_94_ie_94_qs;
  logic clicint_94_ie_94_wd;
  logic clicint_94_ie_94_we;
  logic clicint_94_attr_shv_94_qs;
  logic clicint_94_attr_shv_94_wd;
  logic clicint_94_attr_shv_94_we;
  logic [1:0] clicint_94_attr_trig_94_qs;
  logic [1:0] clicint_94_attr_trig_94_wd;
  logic clicint_94_attr_trig_94_we;
  logic [1:0] clicint_94_attr_mode_94_qs;
  logic [1:0] clicint_94_attr_mode_94_wd;
  logic clicint_94_attr_mode_94_we;
  logic [7:0] clicint_94_ctl_94_qs;
  logic [7:0] clicint_94_ctl_94_wd;
  logic clicint_94_ctl_94_we;
  logic clicint_95_ip_95_qs;
  logic clicint_95_ip_95_wd;
  logic clicint_95_ip_95_we;
  logic clicint_95_ie_95_qs;
  logic clicint_95_ie_95_wd;
  logic clicint_95_ie_95_we;
  logic clicint_95_attr_shv_95_qs;
  logic clicint_95_attr_shv_95_wd;
  logic clicint_95_attr_shv_95_we;
  logic [1:0] clicint_95_attr_trig_95_qs;
  logic [1:0] clicint_95_attr_trig_95_wd;
  logic clicint_95_attr_trig_95_we;
  logic [1:0] clicint_95_attr_mode_95_qs;
  logic [1:0] clicint_95_attr_mode_95_wd;
  logic clicint_95_attr_mode_95_we;
  logic [7:0] clicint_95_ctl_95_qs;
  logic [7:0] clicint_95_ctl_95_wd;
  logic clicint_95_ctl_95_we;
  logic clicint_96_ip_96_qs;
  logic clicint_96_ip_96_wd;
  logic clicint_96_ip_96_we;
  logic clicint_96_ie_96_qs;
  logic clicint_96_ie_96_wd;
  logic clicint_96_ie_96_we;
  logic clicint_96_attr_shv_96_qs;
  logic clicint_96_attr_shv_96_wd;
  logic clicint_96_attr_shv_96_we;
  logic [1:0] clicint_96_attr_trig_96_qs;
  logic [1:0] clicint_96_attr_trig_96_wd;
  logic clicint_96_attr_trig_96_we;
  logic [1:0] clicint_96_attr_mode_96_qs;
  logic [1:0] clicint_96_attr_mode_96_wd;
  logic clicint_96_attr_mode_96_we;
  logic [7:0] clicint_96_ctl_96_qs;
  logic [7:0] clicint_96_ctl_96_wd;
  logic clicint_96_ctl_96_we;
  logic clicint_97_ip_97_qs;
  logic clicint_97_ip_97_wd;
  logic clicint_97_ip_97_we;
  logic clicint_97_ie_97_qs;
  logic clicint_97_ie_97_wd;
  logic clicint_97_ie_97_we;
  logic clicint_97_attr_shv_97_qs;
  logic clicint_97_attr_shv_97_wd;
  logic clicint_97_attr_shv_97_we;
  logic [1:0] clicint_97_attr_trig_97_qs;
  logic [1:0] clicint_97_attr_trig_97_wd;
  logic clicint_97_attr_trig_97_we;
  logic [1:0] clicint_97_attr_mode_97_qs;
  logic [1:0] clicint_97_attr_mode_97_wd;
  logic clicint_97_attr_mode_97_we;
  logic [7:0] clicint_97_ctl_97_qs;
  logic [7:0] clicint_97_ctl_97_wd;
  logic clicint_97_ctl_97_we;
  logic clicint_98_ip_98_qs;
  logic clicint_98_ip_98_wd;
  logic clicint_98_ip_98_we;
  logic clicint_98_ie_98_qs;
  logic clicint_98_ie_98_wd;
  logic clicint_98_ie_98_we;
  logic clicint_98_attr_shv_98_qs;
  logic clicint_98_attr_shv_98_wd;
  logic clicint_98_attr_shv_98_we;
  logic [1:0] clicint_98_attr_trig_98_qs;
  logic [1:0] clicint_98_attr_trig_98_wd;
  logic clicint_98_attr_trig_98_we;
  logic [1:0] clicint_98_attr_mode_98_qs;
  logic [1:0] clicint_98_attr_mode_98_wd;
  logic clicint_98_attr_mode_98_we;
  logic [7:0] clicint_98_ctl_98_qs;
  logic [7:0] clicint_98_ctl_98_wd;
  logic clicint_98_ctl_98_we;
  logic clicint_99_ip_99_qs;
  logic clicint_99_ip_99_wd;
  logic clicint_99_ip_99_we;
  logic clicint_99_ie_99_qs;
  logic clicint_99_ie_99_wd;
  logic clicint_99_ie_99_we;
  logic clicint_99_attr_shv_99_qs;
  logic clicint_99_attr_shv_99_wd;
  logic clicint_99_attr_shv_99_we;
  logic [1:0] clicint_99_attr_trig_99_qs;
  logic [1:0] clicint_99_attr_trig_99_wd;
  logic clicint_99_attr_trig_99_we;
  logic [1:0] clicint_99_attr_mode_99_qs;
  logic [1:0] clicint_99_attr_mode_99_wd;
  logic clicint_99_attr_mode_99_we;
  logic [7:0] clicint_99_ctl_99_qs;
  logic [7:0] clicint_99_ctl_99_wd;
  logic clicint_99_ctl_99_we;
  logic clicint_100_ip_100_qs;
  logic clicint_100_ip_100_wd;
  logic clicint_100_ip_100_we;
  logic clicint_100_ie_100_qs;
  logic clicint_100_ie_100_wd;
  logic clicint_100_ie_100_we;
  logic clicint_100_attr_shv_100_qs;
  logic clicint_100_attr_shv_100_wd;
  logic clicint_100_attr_shv_100_we;
  logic [1:0] clicint_100_attr_trig_100_qs;
  logic [1:0] clicint_100_attr_trig_100_wd;
  logic clicint_100_attr_trig_100_we;
  logic [1:0] clicint_100_attr_mode_100_qs;
  logic [1:0] clicint_100_attr_mode_100_wd;
  logic clicint_100_attr_mode_100_we;
  logic [7:0] clicint_100_ctl_100_qs;
  logic [7:0] clicint_100_ctl_100_wd;
  logic clicint_100_ctl_100_we;
  logic clicint_101_ip_101_qs;
  logic clicint_101_ip_101_wd;
  logic clicint_101_ip_101_we;
  logic clicint_101_ie_101_qs;
  logic clicint_101_ie_101_wd;
  logic clicint_101_ie_101_we;
  logic clicint_101_attr_shv_101_qs;
  logic clicint_101_attr_shv_101_wd;
  logic clicint_101_attr_shv_101_we;
  logic [1:0] clicint_101_attr_trig_101_qs;
  logic [1:0] clicint_101_attr_trig_101_wd;
  logic clicint_101_attr_trig_101_we;
  logic [1:0] clicint_101_attr_mode_101_qs;
  logic [1:0] clicint_101_attr_mode_101_wd;
  logic clicint_101_attr_mode_101_we;
  logic [7:0] clicint_101_ctl_101_qs;
  logic [7:0] clicint_101_ctl_101_wd;
  logic clicint_101_ctl_101_we;
  logic clicint_102_ip_102_qs;
  logic clicint_102_ip_102_wd;
  logic clicint_102_ip_102_we;
  logic clicint_102_ie_102_qs;
  logic clicint_102_ie_102_wd;
  logic clicint_102_ie_102_we;
  logic clicint_102_attr_shv_102_qs;
  logic clicint_102_attr_shv_102_wd;
  logic clicint_102_attr_shv_102_we;
  logic [1:0] clicint_102_attr_trig_102_qs;
  logic [1:0] clicint_102_attr_trig_102_wd;
  logic clicint_102_attr_trig_102_we;
  logic [1:0] clicint_102_attr_mode_102_qs;
  logic [1:0] clicint_102_attr_mode_102_wd;
  logic clicint_102_attr_mode_102_we;
  logic [7:0] clicint_102_ctl_102_qs;
  logic [7:0] clicint_102_ctl_102_wd;
  logic clicint_102_ctl_102_we;
  logic clicint_103_ip_103_qs;
  logic clicint_103_ip_103_wd;
  logic clicint_103_ip_103_we;
  logic clicint_103_ie_103_qs;
  logic clicint_103_ie_103_wd;
  logic clicint_103_ie_103_we;
  logic clicint_103_attr_shv_103_qs;
  logic clicint_103_attr_shv_103_wd;
  logic clicint_103_attr_shv_103_we;
  logic [1:0] clicint_103_attr_trig_103_qs;
  logic [1:0] clicint_103_attr_trig_103_wd;
  logic clicint_103_attr_trig_103_we;
  logic [1:0] clicint_103_attr_mode_103_qs;
  logic [1:0] clicint_103_attr_mode_103_wd;
  logic clicint_103_attr_mode_103_we;
  logic [7:0] clicint_103_ctl_103_qs;
  logic [7:0] clicint_103_ctl_103_wd;
  logic clicint_103_ctl_103_we;
  logic clicint_104_ip_104_qs;
  logic clicint_104_ip_104_wd;
  logic clicint_104_ip_104_we;
  logic clicint_104_ie_104_qs;
  logic clicint_104_ie_104_wd;
  logic clicint_104_ie_104_we;
  logic clicint_104_attr_shv_104_qs;
  logic clicint_104_attr_shv_104_wd;
  logic clicint_104_attr_shv_104_we;
  logic [1:0] clicint_104_attr_trig_104_qs;
  logic [1:0] clicint_104_attr_trig_104_wd;
  logic clicint_104_attr_trig_104_we;
  logic [1:0] clicint_104_attr_mode_104_qs;
  logic [1:0] clicint_104_attr_mode_104_wd;
  logic clicint_104_attr_mode_104_we;
  logic [7:0] clicint_104_ctl_104_qs;
  logic [7:0] clicint_104_ctl_104_wd;
  logic clicint_104_ctl_104_we;
  logic clicint_105_ip_105_qs;
  logic clicint_105_ip_105_wd;
  logic clicint_105_ip_105_we;
  logic clicint_105_ie_105_qs;
  logic clicint_105_ie_105_wd;
  logic clicint_105_ie_105_we;
  logic clicint_105_attr_shv_105_qs;
  logic clicint_105_attr_shv_105_wd;
  logic clicint_105_attr_shv_105_we;
  logic [1:0] clicint_105_attr_trig_105_qs;
  logic [1:0] clicint_105_attr_trig_105_wd;
  logic clicint_105_attr_trig_105_we;
  logic [1:0] clicint_105_attr_mode_105_qs;
  logic [1:0] clicint_105_attr_mode_105_wd;
  logic clicint_105_attr_mode_105_we;
  logic [7:0] clicint_105_ctl_105_qs;
  logic [7:0] clicint_105_ctl_105_wd;
  logic clicint_105_ctl_105_we;
  logic clicint_106_ip_106_qs;
  logic clicint_106_ip_106_wd;
  logic clicint_106_ip_106_we;
  logic clicint_106_ie_106_qs;
  logic clicint_106_ie_106_wd;
  logic clicint_106_ie_106_we;
  logic clicint_106_attr_shv_106_qs;
  logic clicint_106_attr_shv_106_wd;
  logic clicint_106_attr_shv_106_we;
  logic [1:0] clicint_106_attr_trig_106_qs;
  logic [1:0] clicint_106_attr_trig_106_wd;
  logic clicint_106_attr_trig_106_we;
  logic [1:0] clicint_106_attr_mode_106_qs;
  logic [1:0] clicint_106_attr_mode_106_wd;
  logic clicint_106_attr_mode_106_we;
  logic [7:0] clicint_106_ctl_106_qs;
  logic [7:0] clicint_106_ctl_106_wd;
  logic clicint_106_ctl_106_we;
  logic clicint_107_ip_107_qs;
  logic clicint_107_ip_107_wd;
  logic clicint_107_ip_107_we;
  logic clicint_107_ie_107_qs;
  logic clicint_107_ie_107_wd;
  logic clicint_107_ie_107_we;
  logic clicint_107_attr_shv_107_qs;
  logic clicint_107_attr_shv_107_wd;
  logic clicint_107_attr_shv_107_we;
  logic [1:0] clicint_107_attr_trig_107_qs;
  logic [1:0] clicint_107_attr_trig_107_wd;
  logic clicint_107_attr_trig_107_we;
  logic [1:0] clicint_107_attr_mode_107_qs;
  logic [1:0] clicint_107_attr_mode_107_wd;
  logic clicint_107_attr_mode_107_we;
  logic [7:0] clicint_107_ctl_107_qs;
  logic [7:0] clicint_107_ctl_107_wd;
  logic clicint_107_ctl_107_we;
  logic clicint_108_ip_108_qs;
  logic clicint_108_ip_108_wd;
  logic clicint_108_ip_108_we;
  logic clicint_108_ie_108_qs;
  logic clicint_108_ie_108_wd;
  logic clicint_108_ie_108_we;
  logic clicint_108_attr_shv_108_qs;
  logic clicint_108_attr_shv_108_wd;
  logic clicint_108_attr_shv_108_we;
  logic [1:0] clicint_108_attr_trig_108_qs;
  logic [1:0] clicint_108_attr_trig_108_wd;
  logic clicint_108_attr_trig_108_we;
  logic [1:0] clicint_108_attr_mode_108_qs;
  logic [1:0] clicint_108_attr_mode_108_wd;
  logic clicint_108_attr_mode_108_we;
  logic [7:0] clicint_108_ctl_108_qs;
  logic [7:0] clicint_108_ctl_108_wd;
  logic clicint_108_ctl_108_we;
  logic clicint_109_ip_109_qs;
  logic clicint_109_ip_109_wd;
  logic clicint_109_ip_109_we;
  logic clicint_109_ie_109_qs;
  logic clicint_109_ie_109_wd;
  logic clicint_109_ie_109_we;
  logic clicint_109_attr_shv_109_qs;
  logic clicint_109_attr_shv_109_wd;
  logic clicint_109_attr_shv_109_we;
  logic [1:0] clicint_109_attr_trig_109_qs;
  logic [1:0] clicint_109_attr_trig_109_wd;
  logic clicint_109_attr_trig_109_we;
  logic [1:0] clicint_109_attr_mode_109_qs;
  logic [1:0] clicint_109_attr_mode_109_wd;
  logic clicint_109_attr_mode_109_we;
  logic [7:0] clicint_109_ctl_109_qs;
  logic [7:0] clicint_109_ctl_109_wd;
  logic clicint_109_ctl_109_we;
  logic clicint_110_ip_110_qs;
  logic clicint_110_ip_110_wd;
  logic clicint_110_ip_110_we;
  logic clicint_110_ie_110_qs;
  logic clicint_110_ie_110_wd;
  logic clicint_110_ie_110_we;
  logic clicint_110_attr_shv_110_qs;
  logic clicint_110_attr_shv_110_wd;
  logic clicint_110_attr_shv_110_we;
  logic [1:0] clicint_110_attr_trig_110_qs;
  logic [1:0] clicint_110_attr_trig_110_wd;
  logic clicint_110_attr_trig_110_we;
  logic [1:0] clicint_110_attr_mode_110_qs;
  logic [1:0] clicint_110_attr_mode_110_wd;
  logic clicint_110_attr_mode_110_we;
  logic [7:0] clicint_110_ctl_110_qs;
  logic [7:0] clicint_110_ctl_110_wd;
  logic clicint_110_ctl_110_we;
  logic clicint_111_ip_111_qs;
  logic clicint_111_ip_111_wd;
  logic clicint_111_ip_111_we;
  logic clicint_111_ie_111_qs;
  logic clicint_111_ie_111_wd;
  logic clicint_111_ie_111_we;
  logic clicint_111_attr_shv_111_qs;
  logic clicint_111_attr_shv_111_wd;
  logic clicint_111_attr_shv_111_we;
  logic [1:0] clicint_111_attr_trig_111_qs;
  logic [1:0] clicint_111_attr_trig_111_wd;
  logic clicint_111_attr_trig_111_we;
  logic [1:0] clicint_111_attr_mode_111_qs;
  logic [1:0] clicint_111_attr_mode_111_wd;
  logic clicint_111_attr_mode_111_we;
  logic [7:0] clicint_111_ctl_111_qs;
  logic [7:0] clicint_111_ctl_111_wd;
  logic clicint_111_ctl_111_we;
  logic clicint_112_ip_112_qs;
  logic clicint_112_ip_112_wd;
  logic clicint_112_ip_112_we;
  logic clicint_112_ie_112_qs;
  logic clicint_112_ie_112_wd;
  logic clicint_112_ie_112_we;
  logic clicint_112_attr_shv_112_qs;
  logic clicint_112_attr_shv_112_wd;
  logic clicint_112_attr_shv_112_we;
  logic [1:0] clicint_112_attr_trig_112_qs;
  logic [1:0] clicint_112_attr_trig_112_wd;
  logic clicint_112_attr_trig_112_we;
  logic [1:0] clicint_112_attr_mode_112_qs;
  logic [1:0] clicint_112_attr_mode_112_wd;
  logic clicint_112_attr_mode_112_we;
  logic [7:0] clicint_112_ctl_112_qs;
  logic [7:0] clicint_112_ctl_112_wd;
  logic clicint_112_ctl_112_we;
  logic clicint_113_ip_113_qs;
  logic clicint_113_ip_113_wd;
  logic clicint_113_ip_113_we;
  logic clicint_113_ie_113_qs;
  logic clicint_113_ie_113_wd;
  logic clicint_113_ie_113_we;
  logic clicint_113_attr_shv_113_qs;
  logic clicint_113_attr_shv_113_wd;
  logic clicint_113_attr_shv_113_we;
  logic [1:0] clicint_113_attr_trig_113_qs;
  logic [1:0] clicint_113_attr_trig_113_wd;
  logic clicint_113_attr_trig_113_we;
  logic [1:0] clicint_113_attr_mode_113_qs;
  logic [1:0] clicint_113_attr_mode_113_wd;
  logic clicint_113_attr_mode_113_we;
  logic [7:0] clicint_113_ctl_113_qs;
  logic [7:0] clicint_113_ctl_113_wd;
  logic clicint_113_ctl_113_we;
  logic clicint_114_ip_114_qs;
  logic clicint_114_ip_114_wd;
  logic clicint_114_ip_114_we;
  logic clicint_114_ie_114_qs;
  logic clicint_114_ie_114_wd;
  logic clicint_114_ie_114_we;
  logic clicint_114_attr_shv_114_qs;
  logic clicint_114_attr_shv_114_wd;
  logic clicint_114_attr_shv_114_we;
  logic [1:0] clicint_114_attr_trig_114_qs;
  logic [1:0] clicint_114_attr_trig_114_wd;
  logic clicint_114_attr_trig_114_we;
  logic [1:0] clicint_114_attr_mode_114_qs;
  logic [1:0] clicint_114_attr_mode_114_wd;
  logic clicint_114_attr_mode_114_we;
  logic [7:0] clicint_114_ctl_114_qs;
  logic [7:0] clicint_114_ctl_114_wd;
  logic clicint_114_ctl_114_we;
  logic clicint_115_ip_115_qs;
  logic clicint_115_ip_115_wd;
  logic clicint_115_ip_115_we;
  logic clicint_115_ie_115_qs;
  logic clicint_115_ie_115_wd;
  logic clicint_115_ie_115_we;
  logic clicint_115_attr_shv_115_qs;
  logic clicint_115_attr_shv_115_wd;
  logic clicint_115_attr_shv_115_we;
  logic [1:0] clicint_115_attr_trig_115_qs;
  logic [1:0] clicint_115_attr_trig_115_wd;
  logic clicint_115_attr_trig_115_we;
  logic [1:0] clicint_115_attr_mode_115_qs;
  logic [1:0] clicint_115_attr_mode_115_wd;
  logic clicint_115_attr_mode_115_we;
  logic [7:0] clicint_115_ctl_115_qs;
  logic [7:0] clicint_115_ctl_115_wd;
  logic clicint_115_ctl_115_we;
  logic clicint_116_ip_116_qs;
  logic clicint_116_ip_116_wd;
  logic clicint_116_ip_116_we;
  logic clicint_116_ie_116_qs;
  logic clicint_116_ie_116_wd;
  logic clicint_116_ie_116_we;
  logic clicint_116_attr_shv_116_qs;
  logic clicint_116_attr_shv_116_wd;
  logic clicint_116_attr_shv_116_we;
  logic [1:0] clicint_116_attr_trig_116_qs;
  logic [1:0] clicint_116_attr_trig_116_wd;
  logic clicint_116_attr_trig_116_we;
  logic [1:0] clicint_116_attr_mode_116_qs;
  logic [1:0] clicint_116_attr_mode_116_wd;
  logic clicint_116_attr_mode_116_we;
  logic [7:0] clicint_116_ctl_116_qs;
  logic [7:0] clicint_116_ctl_116_wd;
  logic clicint_116_ctl_116_we;
  logic clicint_117_ip_117_qs;
  logic clicint_117_ip_117_wd;
  logic clicint_117_ip_117_we;
  logic clicint_117_ie_117_qs;
  logic clicint_117_ie_117_wd;
  logic clicint_117_ie_117_we;
  logic clicint_117_attr_shv_117_qs;
  logic clicint_117_attr_shv_117_wd;
  logic clicint_117_attr_shv_117_we;
  logic [1:0] clicint_117_attr_trig_117_qs;
  logic [1:0] clicint_117_attr_trig_117_wd;
  logic clicint_117_attr_trig_117_we;
  logic [1:0] clicint_117_attr_mode_117_qs;
  logic [1:0] clicint_117_attr_mode_117_wd;
  logic clicint_117_attr_mode_117_we;
  logic [7:0] clicint_117_ctl_117_qs;
  logic [7:0] clicint_117_ctl_117_wd;
  logic clicint_117_ctl_117_we;
  logic clicint_118_ip_118_qs;
  logic clicint_118_ip_118_wd;
  logic clicint_118_ip_118_we;
  logic clicint_118_ie_118_qs;
  logic clicint_118_ie_118_wd;
  logic clicint_118_ie_118_we;
  logic clicint_118_attr_shv_118_qs;
  logic clicint_118_attr_shv_118_wd;
  logic clicint_118_attr_shv_118_we;
  logic [1:0] clicint_118_attr_trig_118_qs;
  logic [1:0] clicint_118_attr_trig_118_wd;
  logic clicint_118_attr_trig_118_we;
  logic [1:0] clicint_118_attr_mode_118_qs;
  logic [1:0] clicint_118_attr_mode_118_wd;
  logic clicint_118_attr_mode_118_we;
  logic [7:0] clicint_118_ctl_118_qs;
  logic [7:0] clicint_118_ctl_118_wd;
  logic clicint_118_ctl_118_we;
  logic clicint_119_ip_119_qs;
  logic clicint_119_ip_119_wd;
  logic clicint_119_ip_119_we;
  logic clicint_119_ie_119_qs;
  logic clicint_119_ie_119_wd;
  logic clicint_119_ie_119_we;
  logic clicint_119_attr_shv_119_qs;
  logic clicint_119_attr_shv_119_wd;
  logic clicint_119_attr_shv_119_we;
  logic [1:0] clicint_119_attr_trig_119_qs;
  logic [1:0] clicint_119_attr_trig_119_wd;
  logic clicint_119_attr_trig_119_we;
  logic [1:0] clicint_119_attr_mode_119_qs;
  logic [1:0] clicint_119_attr_mode_119_wd;
  logic clicint_119_attr_mode_119_we;
  logic [7:0] clicint_119_ctl_119_qs;
  logic [7:0] clicint_119_ctl_119_wd;
  logic clicint_119_ctl_119_we;
  logic clicint_120_ip_120_qs;
  logic clicint_120_ip_120_wd;
  logic clicint_120_ip_120_we;
  logic clicint_120_ie_120_qs;
  logic clicint_120_ie_120_wd;
  logic clicint_120_ie_120_we;
  logic clicint_120_attr_shv_120_qs;
  logic clicint_120_attr_shv_120_wd;
  logic clicint_120_attr_shv_120_we;
  logic [1:0] clicint_120_attr_trig_120_qs;
  logic [1:0] clicint_120_attr_trig_120_wd;
  logic clicint_120_attr_trig_120_we;
  logic [1:0] clicint_120_attr_mode_120_qs;
  logic [1:0] clicint_120_attr_mode_120_wd;
  logic clicint_120_attr_mode_120_we;
  logic [7:0] clicint_120_ctl_120_qs;
  logic [7:0] clicint_120_ctl_120_wd;
  logic clicint_120_ctl_120_we;
  logic clicint_121_ip_121_qs;
  logic clicint_121_ip_121_wd;
  logic clicint_121_ip_121_we;
  logic clicint_121_ie_121_qs;
  logic clicint_121_ie_121_wd;
  logic clicint_121_ie_121_we;
  logic clicint_121_attr_shv_121_qs;
  logic clicint_121_attr_shv_121_wd;
  logic clicint_121_attr_shv_121_we;
  logic [1:0] clicint_121_attr_trig_121_qs;
  logic [1:0] clicint_121_attr_trig_121_wd;
  logic clicint_121_attr_trig_121_we;
  logic [1:0] clicint_121_attr_mode_121_qs;
  logic [1:0] clicint_121_attr_mode_121_wd;
  logic clicint_121_attr_mode_121_we;
  logic [7:0] clicint_121_ctl_121_qs;
  logic [7:0] clicint_121_ctl_121_wd;
  logic clicint_121_ctl_121_we;
  logic clicint_122_ip_122_qs;
  logic clicint_122_ip_122_wd;
  logic clicint_122_ip_122_we;
  logic clicint_122_ie_122_qs;
  logic clicint_122_ie_122_wd;
  logic clicint_122_ie_122_we;
  logic clicint_122_attr_shv_122_qs;
  logic clicint_122_attr_shv_122_wd;
  logic clicint_122_attr_shv_122_we;
  logic [1:0] clicint_122_attr_trig_122_qs;
  logic [1:0] clicint_122_attr_trig_122_wd;
  logic clicint_122_attr_trig_122_we;
  logic [1:0] clicint_122_attr_mode_122_qs;
  logic [1:0] clicint_122_attr_mode_122_wd;
  logic clicint_122_attr_mode_122_we;
  logic [7:0] clicint_122_ctl_122_qs;
  logic [7:0] clicint_122_ctl_122_wd;
  logic clicint_122_ctl_122_we;
  logic clicint_123_ip_123_qs;
  logic clicint_123_ip_123_wd;
  logic clicint_123_ip_123_we;
  logic clicint_123_ie_123_qs;
  logic clicint_123_ie_123_wd;
  logic clicint_123_ie_123_we;
  logic clicint_123_attr_shv_123_qs;
  logic clicint_123_attr_shv_123_wd;
  logic clicint_123_attr_shv_123_we;
  logic [1:0] clicint_123_attr_trig_123_qs;
  logic [1:0] clicint_123_attr_trig_123_wd;
  logic clicint_123_attr_trig_123_we;
  logic [1:0] clicint_123_attr_mode_123_qs;
  logic [1:0] clicint_123_attr_mode_123_wd;
  logic clicint_123_attr_mode_123_we;
  logic [7:0] clicint_123_ctl_123_qs;
  logic [7:0] clicint_123_ctl_123_wd;
  logic clicint_123_ctl_123_we;
  logic clicint_124_ip_124_qs;
  logic clicint_124_ip_124_wd;
  logic clicint_124_ip_124_we;
  logic clicint_124_ie_124_qs;
  logic clicint_124_ie_124_wd;
  logic clicint_124_ie_124_we;
  logic clicint_124_attr_shv_124_qs;
  logic clicint_124_attr_shv_124_wd;
  logic clicint_124_attr_shv_124_we;
  logic [1:0] clicint_124_attr_trig_124_qs;
  logic [1:0] clicint_124_attr_trig_124_wd;
  logic clicint_124_attr_trig_124_we;
  logic [1:0] clicint_124_attr_mode_124_qs;
  logic [1:0] clicint_124_attr_mode_124_wd;
  logic clicint_124_attr_mode_124_we;
  logic [7:0] clicint_124_ctl_124_qs;
  logic [7:0] clicint_124_ctl_124_wd;
  logic clicint_124_ctl_124_we;
  logic clicint_125_ip_125_qs;
  logic clicint_125_ip_125_wd;
  logic clicint_125_ip_125_we;
  logic clicint_125_ie_125_qs;
  logic clicint_125_ie_125_wd;
  logic clicint_125_ie_125_we;
  logic clicint_125_attr_shv_125_qs;
  logic clicint_125_attr_shv_125_wd;
  logic clicint_125_attr_shv_125_we;
  logic [1:0] clicint_125_attr_trig_125_qs;
  logic [1:0] clicint_125_attr_trig_125_wd;
  logic clicint_125_attr_trig_125_we;
  logic [1:0] clicint_125_attr_mode_125_qs;
  logic [1:0] clicint_125_attr_mode_125_wd;
  logic clicint_125_attr_mode_125_we;
  logic [7:0] clicint_125_ctl_125_qs;
  logic [7:0] clicint_125_ctl_125_wd;
  logic clicint_125_ctl_125_we;
  logic clicint_126_ip_126_qs;
  logic clicint_126_ip_126_wd;
  logic clicint_126_ip_126_we;
  logic clicint_126_ie_126_qs;
  logic clicint_126_ie_126_wd;
  logic clicint_126_ie_126_we;
  logic clicint_126_attr_shv_126_qs;
  logic clicint_126_attr_shv_126_wd;
  logic clicint_126_attr_shv_126_we;
  logic [1:0] clicint_126_attr_trig_126_qs;
  logic [1:0] clicint_126_attr_trig_126_wd;
  logic clicint_126_attr_trig_126_we;
  logic [1:0] clicint_126_attr_mode_126_qs;
  logic [1:0] clicint_126_attr_mode_126_wd;
  logic clicint_126_attr_mode_126_we;
  logic [7:0] clicint_126_ctl_126_qs;
  logic [7:0] clicint_126_ctl_126_wd;
  logic clicint_126_ctl_126_we;
  logic clicint_127_ip_127_qs;
  logic clicint_127_ip_127_wd;
  logic clicint_127_ip_127_we;
  logic clicint_127_ie_127_qs;
  logic clicint_127_ie_127_wd;
  logic clicint_127_ie_127_we;
  logic clicint_127_attr_shv_127_qs;
  logic clicint_127_attr_shv_127_wd;
  logic clicint_127_attr_shv_127_we;
  logic [1:0] clicint_127_attr_trig_127_qs;
  logic [1:0] clicint_127_attr_trig_127_wd;
  logic clicint_127_attr_trig_127_we;
  logic [1:0] clicint_127_attr_mode_127_qs;
  logic [1:0] clicint_127_attr_mode_127_wd;
  logic clicint_127_attr_mode_127_we;
  logic [7:0] clicint_127_ctl_127_qs;
  logic [7:0] clicint_127_ctl_127_wd;
  logic clicint_127_ctl_127_we;
  logic clicint_128_ip_128_qs;
  logic clicint_128_ip_128_wd;
  logic clicint_128_ip_128_we;
  logic clicint_128_ie_128_qs;
  logic clicint_128_ie_128_wd;
  logic clicint_128_ie_128_we;
  logic clicint_128_attr_shv_128_qs;
  logic clicint_128_attr_shv_128_wd;
  logic clicint_128_attr_shv_128_we;
  logic [1:0] clicint_128_attr_trig_128_qs;
  logic [1:0] clicint_128_attr_trig_128_wd;
  logic clicint_128_attr_trig_128_we;
  logic [1:0] clicint_128_attr_mode_128_qs;
  logic [1:0] clicint_128_attr_mode_128_wd;
  logic clicint_128_attr_mode_128_we;
  logic [7:0] clicint_128_ctl_128_qs;
  logic [7:0] clicint_128_ctl_128_wd;
  logic clicint_128_ctl_128_we;
  logic clicint_129_ip_129_qs;
  logic clicint_129_ip_129_wd;
  logic clicint_129_ip_129_we;
  logic clicint_129_ie_129_qs;
  logic clicint_129_ie_129_wd;
  logic clicint_129_ie_129_we;
  logic clicint_129_attr_shv_129_qs;
  logic clicint_129_attr_shv_129_wd;
  logic clicint_129_attr_shv_129_we;
  logic [1:0] clicint_129_attr_trig_129_qs;
  logic [1:0] clicint_129_attr_trig_129_wd;
  logic clicint_129_attr_trig_129_we;
  logic [1:0] clicint_129_attr_mode_129_qs;
  logic [1:0] clicint_129_attr_mode_129_wd;
  logic clicint_129_attr_mode_129_we;
  logic [7:0] clicint_129_ctl_129_qs;
  logic [7:0] clicint_129_ctl_129_wd;
  logic clicint_129_ctl_129_we;
  logic clicint_130_ip_130_qs;
  logic clicint_130_ip_130_wd;
  logic clicint_130_ip_130_we;
  logic clicint_130_ie_130_qs;
  logic clicint_130_ie_130_wd;
  logic clicint_130_ie_130_we;
  logic clicint_130_attr_shv_130_qs;
  logic clicint_130_attr_shv_130_wd;
  logic clicint_130_attr_shv_130_we;
  logic [1:0] clicint_130_attr_trig_130_qs;
  logic [1:0] clicint_130_attr_trig_130_wd;
  logic clicint_130_attr_trig_130_we;
  logic [1:0] clicint_130_attr_mode_130_qs;
  logic [1:0] clicint_130_attr_mode_130_wd;
  logic clicint_130_attr_mode_130_we;
  logic [7:0] clicint_130_ctl_130_qs;
  logic [7:0] clicint_130_ctl_130_wd;
  logic clicint_130_ctl_130_we;
  logic clicint_131_ip_131_qs;
  logic clicint_131_ip_131_wd;
  logic clicint_131_ip_131_we;
  logic clicint_131_ie_131_qs;
  logic clicint_131_ie_131_wd;
  logic clicint_131_ie_131_we;
  logic clicint_131_attr_shv_131_qs;
  logic clicint_131_attr_shv_131_wd;
  logic clicint_131_attr_shv_131_we;
  logic [1:0] clicint_131_attr_trig_131_qs;
  logic [1:0] clicint_131_attr_trig_131_wd;
  logic clicint_131_attr_trig_131_we;
  logic [1:0] clicint_131_attr_mode_131_qs;
  logic [1:0] clicint_131_attr_mode_131_wd;
  logic clicint_131_attr_mode_131_we;
  logic [7:0] clicint_131_ctl_131_qs;
  logic [7:0] clicint_131_ctl_131_wd;
  logic clicint_131_ctl_131_we;
  logic clicint_132_ip_132_qs;
  logic clicint_132_ip_132_wd;
  logic clicint_132_ip_132_we;
  logic clicint_132_ie_132_qs;
  logic clicint_132_ie_132_wd;
  logic clicint_132_ie_132_we;
  logic clicint_132_attr_shv_132_qs;
  logic clicint_132_attr_shv_132_wd;
  logic clicint_132_attr_shv_132_we;
  logic [1:0] clicint_132_attr_trig_132_qs;
  logic [1:0] clicint_132_attr_trig_132_wd;
  logic clicint_132_attr_trig_132_we;
  logic [1:0] clicint_132_attr_mode_132_qs;
  logic [1:0] clicint_132_attr_mode_132_wd;
  logic clicint_132_attr_mode_132_we;
  logic [7:0] clicint_132_ctl_132_qs;
  logic [7:0] clicint_132_ctl_132_wd;
  logic clicint_132_ctl_132_we;
  logic clicint_133_ip_133_qs;
  logic clicint_133_ip_133_wd;
  logic clicint_133_ip_133_we;
  logic clicint_133_ie_133_qs;
  logic clicint_133_ie_133_wd;
  logic clicint_133_ie_133_we;
  logic clicint_133_attr_shv_133_qs;
  logic clicint_133_attr_shv_133_wd;
  logic clicint_133_attr_shv_133_we;
  logic [1:0] clicint_133_attr_trig_133_qs;
  logic [1:0] clicint_133_attr_trig_133_wd;
  logic clicint_133_attr_trig_133_we;
  logic [1:0] clicint_133_attr_mode_133_qs;
  logic [1:0] clicint_133_attr_mode_133_wd;
  logic clicint_133_attr_mode_133_we;
  logic [7:0] clicint_133_ctl_133_qs;
  logic [7:0] clicint_133_ctl_133_wd;
  logic clicint_133_ctl_133_we;
  logic clicint_134_ip_134_qs;
  logic clicint_134_ip_134_wd;
  logic clicint_134_ip_134_we;
  logic clicint_134_ie_134_qs;
  logic clicint_134_ie_134_wd;
  logic clicint_134_ie_134_we;
  logic clicint_134_attr_shv_134_qs;
  logic clicint_134_attr_shv_134_wd;
  logic clicint_134_attr_shv_134_we;
  logic [1:0] clicint_134_attr_trig_134_qs;
  logic [1:0] clicint_134_attr_trig_134_wd;
  logic clicint_134_attr_trig_134_we;
  logic [1:0] clicint_134_attr_mode_134_qs;
  logic [1:0] clicint_134_attr_mode_134_wd;
  logic clicint_134_attr_mode_134_we;
  logic [7:0] clicint_134_ctl_134_qs;
  logic [7:0] clicint_134_ctl_134_wd;
  logic clicint_134_ctl_134_we;
  logic clicint_135_ip_135_qs;
  logic clicint_135_ip_135_wd;
  logic clicint_135_ip_135_we;
  logic clicint_135_ie_135_qs;
  logic clicint_135_ie_135_wd;
  logic clicint_135_ie_135_we;
  logic clicint_135_attr_shv_135_qs;
  logic clicint_135_attr_shv_135_wd;
  logic clicint_135_attr_shv_135_we;
  logic [1:0] clicint_135_attr_trig_135_qs;
  logic [1:0] clicint_135_attr_trig_135_wd;
  logic clicint_135_attr_trig_135_we;
  logic [1:0] clicint_135_attr_mode_135_qs;
  logic [1:0] clicint_135_attr_mode_135_wd;
  logic clicint_135_attr_mode_135_we;
  logic [7:0] clicint_135_ctl_135_qs;
  logic [7:0] clicint_135_ctl_135_wd;
  logic clicint_135_ctl_135_we;
  logic clicint_136_ip_136_qs;
  logic clicint_136_ip_136_wd;
  logic clicint_136_ip_136_we;
  logic clicint_136_ie_136_qs;
  logic clicint_136_ie_136_wd;
  logic clicint_136_ie_136_we;
  logic clicint_136_attr_shv_136_qs;
  logic clicint_136_attr_shv_136_wd;
  logic clicint_136_attr_shv_136_we;
  logic [1:0] clicint_136_attr_trig_136_qs;
  logic [1:0] clicint_136_attr_trig_136_wd;
  logic clicint_136_attr_trig_136_we;
  logic [1:0] clicint_136_attr_mode_136_qs;
  logic [1:0] clicint_136_attr_mode_136_wd;
  logic clicint_136_attr_mode_136_we;
  logic [7:0] clicint_136_ctl_136_qs;
  logic [7:0] clicint_136_ctl_136_wd;
  logic clicint_136_ctl_136_we;
  logic clicint_137_ip_137_qs;
  logic clicint_137_ip_137_wd;
  logic clicint_137_ip_137_we;
  logic clicint_137_ie_137_qs;
  logic clicint_137_ie_137_wd;
  logic clicint_137_ie_137_we;
  logic clicint_137_attr_shv_137_qs;
  logic clicint_137_attr_shv_137_wd;
  logic clicint_137_attr_shv_137_we;
  logic [1:0] clicint_137_attr_trig_137_qs;
  logic [1:0] clicint_137_attr_trig_137_wd;
  logic clicint_137_attr_trig_137_we;
  logic [1:0] clicint_137_attr_mode_137_qs;
  logic [1:0] clicint_137_attr_mode_137_wd;
  logic clicint_137_attr_mode_137_we;
  logic [7:0] clicint_137_ctl_137_qs;
  logic [7:0] clicint_137_ctl_137_wd;
  logic clicint_137_ctl_137_we;
  logic clicint_138_ip_138_qs;
  logic clicint_138_ip_138_wd;
  logic clicint_138_ip_138_we;
  logic clicint_138_ie_138_qs;
  logic clicint_138_ie_138_wd;
  logic clicint_138_ie_138_we;
  logic clicint_138_attr_shv_138_qs;
  logic clicint_138_attr_shv_138_wd;
  logic clicint_138_attr_shv_138_we;
  logic [1:0] clicint_138_attr_trig_138_qs;
  logic [1:0] clicint_138_attr_trig_138_wd;
  logic clicint_138_attr_trig_138_we;
  logic [1:0] clicint_138_attr_mode_138_qs;
  logic [1:0] clicint_138_attr_mode_138_wd;
  logic clicint_138_attr_mode_138_we;
  logic [7:0] clicint_138_ctl_138_qs;
  logic [7:0] clicint_138_ctl_138_wd;
  logic clicint_138_ctl_138_we;
  logic clicint_139_ip_139_qs;
  logic clicint_139_ip_139_wd;
  logic clicint_139_ip_139_we;
  logic clicint_139_ie_139_qs;
  logic clicint_139_ie_139_wd;
  logic clicint_139_ie_139_we;
  logic clicint_139_attr_shv_139_qs;
  logic clicint_139_attr_shv_139_wd;
  logic clicint_139_attr_shv_139_we;
  logic [1:0] clicint_139_attr_trig_139_qs;
  logic [1:0] clicint_139_attr_trig_139_wd;
  logic clicint_139_attr_trig_139_we;
  logic [1:0] clicint_139_attr_mode_139_qs;
  logic [1:0] clicint_139_attr_mode_139_wd;
  logic clicint_139_attr_mode_139_we;
  logic [7:0] clicint_139_ctl_139_qs;
  logic [7:0] clicint_139_ctl_139_wd;
  logic clicint_139_ctl_139_we;
  logic clicint_140_ip_140_qs;
  logic clicint_140_ip_140_wd;
  logic clicint_140_ip_140_we;
  logic clicint_140_ie_140_qs;
  logic clicint_140_ie_140_wd;
  logic clicint_140_ie_140_we;
  logic clicint_140_attr_shv_140_qs;
  logic clicint_140_attr_shv_140_wd;
  logic clicint_140_attr_shv_140_we;
  logic [1:0] clicint_140_attr_trig_140_qs;
  logic [1:0] clicint_140_attr_trig_140_wd;
  logic clicint_140_attr_trig_140_we;
  logic [1:0] clicint_140_attr_mode_140_qs;
  logic [1:0] clicint_140_attr_mode_140_wd;
  logic clicint_140_attr_mode_140_we;
  logic [7:0] clicint_140_ctl_140_qs;
  logic [7:0] clicint_140_ctl_140_wd;
  logic clicint_140_ctl_140_we;
  logic clicint_141_ip_141_qs;
  logic clicint_141_ip_141_wd;
  logic clicint_141_ip_141_we;
  logic clicint_141_ie_141_qs;
  logic clicint_141_ie_141_wd;
  logic clicint_141_ie_141_we;
  logic clicint_141_attr_shv_141_qs;
  logic clicint_141_attr_shv_141_wd;
  logic clicint_141_attr_shv_141_we;
  logic [1:0] clicint_141_attr_trig_141_qs;
  logic [1:0] clicint_141_attr_trig_141_wd;
  logic clicint_141_attr_trig_141_we;
  logic [1:0] clicint_141_attr_mode_141_qs;
  logic [1:0] clicint_141_attr_mode_141_wd;
  logic clicint_141_attr_mode_141_we;
  logic [7:0] clicint_141_ctl_141_qs;
  logic [7:0] clicint_141_ctl_141_wd;
  logic clicint_141_ctl_141_we;
  logic clicint_142_ip_142_qs;
  logic clicint_142_ip_142_wd;
  logic clicint_142_ip_142_we;
  logic clicint_142_ie_142_qs;
  logic clicint_142_ie_142_wd;
  logic clicint_142_ie_142_we;
  logic clicint_142_attr_shv_142_qs;
  logic clicint_142_attr_shv_142_wd;
  logic clicint_142_attr_shv_142_we;
  logic [1:0] clicint_142_attr_trig_142_qs;
  logic [1:0] clicint_142_attr_trig_142_wd;
  logic clicint_142_attr_trig_142_we;
  logic [1:0] clicint_142_attr_mode_142_qs;
  logic [1:0] clicint_142_attr_mode_142_wd;
  logic clicint_142_attr_mode_142_we;
  logic [7:0] clicint_142_ctl_142_qs;
  logic [7:0] clicint_142_ctl_142_wd;
  logic clicint_142_ctl_142_we;
  logic clicint_143_ip_143_qs;
  logic clicint_143_ip_143_wd;
  logic clicint_143_ip_143_we;
  logic clicint_143_ie_143_qs;
  logic clicint_143_ie_143_wd;
  logic clicint_143_ie_143_we;
  logic clicint_143_attr_shv_143_qs;
  logic clicint_143_attr_shv_143_wd;
  logic clicint_143_attr_shv_143_we;
  logic [1:0] clicint_143_attr_trig_143_qs;
  logic [1:0] clicint_143_attr_trig_143_wd;
  logic clicint_143_attr_trig_143_we;
  logic [1:0] clicint_143_attr_mode_143_qs;
  logic [1:0] clicint_143_attr_mode_143_wd;
  logic clicint_143_attr_mode_143_we;
  logic [7:0] clicint_143_ctl_143_qs;
  logic [7:0] clicint_143_ctl_143_wd;
  logic clicint_143_ctl_143_we;
  logic clicint_144_ip_144_qs;
  logic clicint_144_ip_144_wd;
  logic clicint_144_ip_144_we;
  logic clicint_144_ie_144_qs;
  logic clicint_144_ie_144_wd;
  logic clicint_144_ie_144_we;
  logic clicint_144_attr_shv_144_qs;
  logic clicint_144_attr_shv_144_wd;
  logic clicint_144_attr_shv_144_we;
  logic [1:0] clicint_144_attr_trig_144_qs;
  logic [1:0] clicint_144_attr_trig_144_wd;
  logic clicint_144_attr_trig_144_we;
  logic [1:0] clicint_144_attr_mode_144_qs;
  logic [1:0] clicint_144_attr_mode_144_wd;
  logic clicint_144_attr_mode_144_we;
  logic [7:0] clicint_144_ctl_144_qs;
  logic [7:0] clicint_144_ctl_144_wd;
  logic clicint_144_ctl_144_we;
  logic clicint_145_ip_145_qs;
  logic clicint_145_ip_145_wd;
  logic clicint_145_ip_145_we;
  logic clicint_145_ie_145_qs;
  logic clicint_145_ie_145_wd;
  logic clicint_145_ie_145_we;
  logic clicint_145_attr_shv_145_qs;
  logic clicint_145_attr_shv_145_wd;
  logic clicint_145_attr_shv_145_we;
  logic [1:0] clicint_145_attr_trig_145_qs;
  logic [1:0] clicint_145_attr_trig_145_wd;
  logic clicint_145_attr_trig_145_we;
  logic [1:0] clicint_145_attr_mode_145_qs;
  logic [1:0] clicint_145_attr_mode_145_wd;
  logic clicint_145_attr_mode_145_we;
  logic [7:0] clicint_145_ctl_145_qs;
  logic [7:0] clicint_145_ctl_145_wd;
  logic clicint_145_ctl_145_we;
  logic clicint_146_ip_146_qs;
  logic clicint_146_ip_146_wd;
  logic clicint_146_ip_146_we;
  logic clicint_146_ie_146_qs;
  logic clicint_146_ie_146_wd;
  logic clicint_146_ie_146_we;
  logic clicint_146_attr_shv_146_qs;
  logic clicint_146_attr_shv_146_wd;
  logic clicint_146_attr_shv_146_we;
  logic [1:0] clicint_146_attr_trig_146_qs;
  logic [1:0] clicint_146_attr_trig_146_wd;
  logic clicint_146_attr_trig_146_we;
  logic [1:0] clicint_146_attr_mode_146_qs;
  logic [1:0] clicint_146_attr_mode_146_wd;
  logic clicint_146_attr_mode_146_we;
  logic [7:0] clicint_146_ctl_146_qs;
  logic [7:0] clicint_146_ctl_146_wd;
  logic clicint_146_ctl_146_we;
  logic clicint_147_ip_147_qs;
  logic clicint_147_ip_147_wd;
  logic clicint_147_ip_147_we;
  logic clicint_147_ie_147_qs;
  logic clicint_147_ie_147_wd;
  logic clicint_147_ie_147_we;
  logic clicint_147_attr_shv_147_qs;
  logic clicint_147_attr_shv_147_wd;
  logic clicint_147_attr_shv_147_we;
  logic [1:0] clicint_147_attr_trig_147_qs;
  logic [1:0] clicint_147_attr_trig_147_wd;
  logic clicint_147_attr_trig_147_we;
  logic [1:0] clicint_147_attr_mode_147_qs;
  logic [1:0] clicint_147_attr_mode_147_wd;
  logic clicint_147_attr_mode_147_we;
  logic [7:0] clicint_147_ctl_147_qs;
  logic [7:0] clicint_147_ctl_147_wd;
  logic clicint_147_ctl_147_we;
  logic clicint_148_ip_148_qs;
  logic clicint_148_ip_148_wd;
  logic clicint_148_ip_148_we;
  logic clicint_148_ie_148_qs;
  logic clicint_148_ie_148_wd;
  logic clicint_148_ie_148_we;
  logic clicint_148_attr_shv_148_qs;
  logic clicint_148_attr_shv_148_wd;
  logic clicint_148_attr_shv_148_we;
  logic [1:0] clicint_148_attr_trig_148_qs;
  logic [1:0] clicint_148_attr_trig_148_wd;
  logic clicint_148_attr_trig_148_we;
  logic [1:0] clicint_148_attr_mode_148_qs;
  logic [1:0] clicint_148_attr_mode_148_wd;
  logic clicint_148_attr_mode_148_we;
  logic [7:0] clicint_148_ctl_148_qs;
  logic [7:0] clicint_148_ctl_148_wd;
  logic clicint_148_ctl_148_we;
  logic clicint_149_ip_149_qs;
  logic clicint_149_ip_149_wd;
  logic clicint_149_ip_149_we;
  logic clicint_149_ie_149_qs;
  logic clicint_149_ie_149_wd;
  logic clicint_149_ie_149_we;
  logic clicint_149_attr_shv_149_qs;
  logic clicint_149_attr_shv_149_wd;
  logic clicint_149_attr_shv_149_we;
  logic [1:0] clicint_149_attr_trig_149_qs;
  logic [1:0] clicint_149_attr_trig_149_wd;
  logic clicint_149_attr_trig_149_we;
  logic [1:0] clicint_149_attr_mode_149_qs;
  logic [1:0] clicint_149_attr_mode_149_wd;
  logic clicint_149_attr_mode_149_we;
  logic [7:0] clicint_149_ctl_149_qs;
  logic [7:0] clicint_149_ctl_149_wd;
  logic clicint_149_ctl_149_we;
  logic clicint_150_ip_150_qs;
  logic clicint_150_ip_150_wd;
  logic clicint_150_ip_150_we;
  logic clicint_150_ie_150_qs;
  logic clicint_150_ie_150_wd;
  logic clicint_150_ie_150_we;
  logic clicint_150_attr_shv_150_qs;
  logic clicint_150_attr_shv_150_wd;
  logic clicint_150_attr_shv_150_we;
  logic [1:0] clicint_150_attr_trig_150_qs;
  logic [1:0] clicint_150_attr_trig_150_wd;
  logic clicint_150_attr_trig_150_we;
  logic [1:0] clicint_150_attr_mode_150_qs;
  logic [1:0] clicint_150_attr_mode_150_wd;
  logic clicint_150_attr_mode_150_we;
  logic [7:0] clicint_150_ctl_150_qs;
  logic [7:0] clicint_150_ctl_150_wd;
  logic clicint_150_ctl_150_we;
  logic clicint_151_ip_151_qs;
  logic clicint_151_ip_151_wd;
  logic clicint_151_ip_151_we;
  logic clicint_151_ie_151_qs;
  logic clicint_151_ie_151_wd;
  logic clicint_151_ie_151_we;
  logic clicint_151_attr_shv_151_qs;
  logic clicint_151_attr_shv_151_wd;
  logic clicint_151_attr_shv_151_we;
  logic [1:0] clicint_151_attr_trig_151_qs;
  logic [1:0] clicint_151_attr_trig_151_wd;
  logic clicint_151_attr_trig_151_we;
  logic [1:0] clicint_151_attr_mode_151_qs;
  logic [1:0] clicint_151_attr_mode_151_wd;
  logic clicint_151_attr_mode_151_we;
  logic [7:0] clicint_151_ctl_151_qs;
  logic [7:0] clicint_151_ctl_151_wd;
  logic clicint_151_ctl_151_we;
  logic clicint_152_ip_152_qs;
  logic clicint_152_ip_152_wd;
  logic clicint_152_ip_152_we;
  logic clicint_152_ie_152_qs;
  logic clicint_152_ie_152_wd;
  logic clicint_152_ie_152_we;
  logic clicint_152_attr_shv_152_qs;
  logic clicint_152_attr_shv_152_wd;
  logic clicint_152_attr_shv_152_we;
  logic [1:0] clicint_152_attr_trig_152_qs;
  logic [1:0] clicint_152_attr_trig_152_wd;
  logic clicint_152_attr_trig_152_we;
  logic [1:0] clicint_152_attr_mode_152_qs;
  logic [1:0] clicint_152_attr_mode_152_wd;
  logic clicint_152_attr_mode_152_we;
  logic [7:0] clicint_152_ctl_152_qs;
  logic [7:0] clicint_152_ctl_152_wd;
  logic clicint_152_ctl_152_we;
  logic clicint_153_ip_153_qs;
  logic clicint_153_ip_153_wd;
  logic clicint_153_ip_153_we;
  logic clicint_153_ie_153_qs;
  logic clicint_153_ie_153_wd;
  logic clicint_153_ie_153_we;
  logic clicint_153_attr_shv_153_qs;
  logic clicint_153_attr_shv_153_wd;
  logic clicint_153_attr_shv_153_we;
  logic [1:0] clicint_153_attr_trig_153_qs;
  logic [1:0] clicint_153_attr_trig_153_wd;
  logic clicint_153_attr_trig_153_we;
  logic [1:0] clicint_153_attr_mode_153_qs;
  logic [1:0] clicint_153_attr_mode_153_wd;
  logic clicint_153_attr_mode_153_we;
  logic [7:0] clicint_153_ctl_153_qs;
  logic [7:0] clicint_153_ctl_153_wd;
  logic clicint_153_ctl_153_we;
  logic clicint_154_ip_154_qs;
  logic clicint_154_ip_154_wd;
  logic clicint_154_ip_154_we;
  logic clicint_154_ie_154_qs;
  logic clicint_154_ie_154_wd;
  logic clicint_154_ie_154_we;
  logic clicint_154_attr_shv_154_qs;
  logic clicint_154_attr_shv_154_wd;
  logic clicint_154_attr_shv_154_we;
  logic [1:0] clicint_154_attr_trig_154_qs;
  logic [1:0] clicint_154_attr_trig_154_wd;
  logic clicint_154_attr_trig_154_we;
  logic [1:0] clicint_154_attr_mode_154_qs;
  logic [1:0] clicint_154_attr_mode_154_wd;
  logic clicint_154_attr_mode_154_we;
  logic [7:0] clicint_154_ctl_154_qs;
  logic [7:0] clicint_154_ctl_154_wd;
  logic clicint_154_ctl_154_we;
  logic clicint_155_ip_155_qs;
  logic clicint_155_ip_155_wd;
  logic clicint_155_ip_155_we;
  logic clicint_155_ie_155_qs;
  logic clicint_155_ie_155_wd;
  logic clicint_155_ie_155_we;
  logic clicint_155_attr_shv_155_qs;
  logic clicint_155_attr_shv_155_wd;
  logic clicint_155_attr_shv_155_we;
  logic [1:0] clicint_155_attr_trig_155_qs;
  logic [1:0] clicint_155_attr_trig_155_wd;
  logic clicint_155_attr_trig_155_we;
  logic [1:0] clicint_155_attr_mode_155_qs;
  logic [1:0] clicint_155_attr_mode_155_wd;
  logic clicint_155_attr_mode_155_we;
  logic [7:0] clicint_155_ctl_155_qs;
  logic [7:0] clicint_155_ctl_155_wd;
  logic clicint_155_ctl_155_we;
  logic clicint_156_ip_156_qs;
  logic clicint_156_ip_156_wd;
  logic clicint_156_ip_156_we;
  logic clicint_156_ie_156_qs;
  logic clicint_156_ie_156_wd;
  logic clicint_156_ie_156_we;
  logic clicint_156_attr_shv_156_qs;
  logic clicint_156_attr_shv_156_wd;
  logic clicint_156_attr_shv_156_we;
  logic [1:0] clicint_156_attr_trig_156_qs;
  logic [1:0] clicint_156_attr_trig_156_wd;
  logic clicint_156_attr_trig_156_we;
  logic [1:0] clicint_156_attr_mode_156_qs;
  logic [1:0] clicint_156_attr_mode_156_wd;
  logic clicint_156_attr_mode_156_we;
  logic [7:0] clicint_156_ctl_156_qs;
  logic [7:0] clicint_156_ctl_156_wd;
  logic clicint_156_ctl_156_we;
  logic clicint_157_ip_157_qs;
  logic clicint_157_ip_157_wd;
  logic clicint_157_ip_157_we;
  logic clicint_157_ie_157_qs;
  logic clicint_157_ie_157_wd;
  logic clicint_157_ie_157_we;
  logic clicint_157_attr_shv_157_qs;
  logic clicint_157_attr_shv_157_wd;
  logic clicint_157_attr_shv_157_we;
  logic [1:0] clicint_157_attr_trig_157_qs;
  logic [1:0] clicint_157_attr_trig_157_wd;
  logic clicint_157_attr_trig_157_we;
  logic [1:0] clicint_157_attr_mode_157_qs;
  logic [1:0] clicint_157_attr_mode_157_wd;
  logic clicint_157_attr_mode_157_we;
  logic [7:0] clicint_157_ctl_157_qs;
  logic [7:0] clicint_157_ctl_157_wd;
  logic clicint_157_ctl_157_we;
  logic clicint_158_ip_158_qs;
  logic clicint_158_ip_158_wd;
  logic clicint_158_ip_158_we;
  logic clicint_158_ie_158_qs;
  logic clicint_158_ie_158_wd;
  logic clicint_158_ie_158_we;
  logic clicint_158_attr_shv_158_qs;
  logic clicint_158_attr_shv_158_wd;
  logic clicint_158_attr_shv_158_we;
  logic [1:0] clicint_158_attr_trig_158_qs;
  logic [1:0] clicint_158_attr_trig_158_wd;
  logic clicint_158_attr_trig_158_we;
  logic [1:0] clicint_158_attr_mode_158_qs;
  logic [1:0] clicint_158_attr_mode_158_wd;
  logic clicint_158_attr_mode_158_we;
  logic [7:0] clicint_158_ctl_158_qs;
  logic [7:0] clicint_158_ctl_158_wd;
  logic clicint_158_ctl_158_we;
  logic clicint_159_ip_159_qs;
  logic clicint_159_ip_159_wd;
  logic clicint_159_ip_159_we;
  logic clicint_159_ie_159_qs;
  logic clicint_159_ie_159_wd;
  logic clicint_159_ie_159_we;
  logic clicint_159_attr_shv_159_qs;
  logic clicint_159_attr_shv_159_wd;
  logic clicint_159_attr_shv_159_we;
  logic [1:0] clicint_159_attr_trig_159_qs;
  logic [1:0] clicint_159_attr_trig_159_wd;
  logic clicint_159_attr_trig_159_we;
  logic [1:0] clicint_159_attr_mode_159_qs;
  logic [1:0] clicint_159_attr_mode_159_wd;
  logic clicint_159_attr_mode_159_we;
  logic [7:0] clicint_159_ctl_159_qs;
  logic [7:0] clicint_159_ctl_159_wd;
  logic clicint_159_ctl_159_we;
  logic clicint_160_ip_160_qs;
  logic clicint_160_ip_160_wd;
  logic clicint_160_ip_160_we;
  logic clicint_160_ie_160_qs;
  logic clicint_160_ie_160_wd;
  logic clicint_160_ie_160_we;
  logic clicint_160_attr_shv_160_qs;
  logic clicint_160_attr_shv_160_wd;
  logic clicint_160_attr_shv_160_we;
  logic [1:0] clicint_160_attr_trig_160_qs;
  logic [1:0] clicint_160_attr_trig_160_wd;
  logic clicint_160_attr_trig_160_we;
  logic [1:0] clicint_160_attr_mode_160_qs;
  logic [1:0] clicint_160_attr_mode_160_wd;
  logic clicint_160_attr_mode_160_we;
  logic [7:0] clicint_160_ctl_160_qs;
  logic [7:0] clicint_160_ctl_160_wd;
  logic clicint_160_ctl_160_we;
  logic clicint_161_ip_161_qs;
  logic clicint_161_ip_161_wd;
  logic clicint_161_ip_161_we;
  logic clicint_161_ie_161_qs;
  logic clicint_161_ie_161_wd;
  logic clicint_161_ie_161_we;
  logic clicint_161_attr_shv_161_qs;
  logic clicint_161_attr_shv_161_wd;
  logic clicint_161_attr_shv_161_we;
  logic [1:0] clicint_161_attr_trig_161_qs;
  logic [1:0] clicint_161_attr_trig_161_wd;
  logic clicint_161_attr_trig_161_we;
  logic [1:0] clicint_161_attr_mode_161_qs;
  logic [1:0] clicint_161_attr_mode_161_wd;
  logic clicint_161_attr_mode_161_we;
  logic [7:0] clicint_161_ctl_161_qs;
  logic [7:0] clicint_161_ctl_161_wd;
  logic clicint_161_ctl_161_we;
  logic clicint_162_ip_162_qs;
  logic clicint_162_ip_162_wd;
  logic clicint_162_ip_162_we;
  logic clicint_162_ie_162_qs;
  logic clicint_162_ie_162_wd;
  logic clicint_162_ie_162_we;
  logic clicint_162_attr_shv_162_qs;
  logic clicint_162_attr_shv_162_wd;
  logic clicint_162_attr_shv_162_we;
  logic [1:0] clicint_162_attr_trig_162_qs;
  logic [1:0] clicint_162_attr_trig_162_wd;
  logic clicint_162_attr_trig_162_we;
  logic [1:0] clicint_162_attr_mode_162_qs;
  logic [1:0] clicint_162_attr_mode_162_wd;
  logic clicint_162_attr_mode_162_we;
  logic [7:0] clicint_162_ctl_162_qs;
  logic [7:0] clicint_162_ctl_162_wd;
  logic clicint_162_ctl_162_we;
  logic clicint_163_ip_163_qs;
  logic clicint_163_ip_163_wd;
  logic clicint_163_ip_163_we;
  logic clicint_163_ie_163_qs;
  logic clicint_163_ie_163_wd;
  logic clicint_163_ie_163_we;
  logic clicint_163_attr_shv_163_qs;
  logic clicint_163_attr_shv_163_wd;
  logic clicint_163_attr_shv_163_we;
  logic [1:0] clicint_163_attr_trig_163_qs;
  logic [1:0] clicint_163_attr_trig_163_wd;
  logic clicint_163_attr_trig_163_we;
  logic [1:0] clicint_163_attr_mode_163_qs;
  logic [1:0] clicint_163_attr_mode_163_wd;
  logic clicint_163_attr_mode_163_we;
  logic [7:0] clicint_163_ctl_163_qs;
  logic [7:0] clicint_163_ctl_163_wd;
  logic clicint_163_ctl_163_we;
  logic clicint_164_ip_164_qs;
  logic clicint_164_ip_164_wd;
  logic clicint_164_ip_164_we;
  logic clicint_164_ie_164_qs;
  logic clicint_164_ie_164_wd;
  logic clicint_164_ie_164_we;
  logic clicint_164_attr_shv_164_qs;
  logic clicint_164_attr_shv_164_wd;
  logic clicint_164_attr_shv_164_we;
  logic [1:0] clicint_164_attr_trig_164_qs;
  logic [1:0] clicint_164_attr_trig_164_wd;
  logic clicint_164_attr_trig_164_we;
  logic [1:0] clicint_164_attr_mode_164_qs;
  logic [1:0] clicint_164_attr_mode_164_wd;
  logic clicint_164_attr_mode_164_we;
  logic [7:0] clicint_164_ctl_164_qs;
  logic [7:0] clicint_164_ctl_164_wd;
  logic clicint_164_ctl_164_we;
  logic clicint_165_ip_165_qs;
  logic clicint_165_ip_165_wd;
  logic clicint_165_ip_165_we;
  logic clicint_165_ie_165_qs;
  logic clicint_165_ie_165_wd;
  logic clicint_165_ie_165_we;
  logic clicint_165_attr_shv_165_qs;
  logic clicint_165_attr_shv_165_wd;
  logic clicint_165_attr_shv_165_we;
  logic [1:0] clicint_165_attr_trig_165_qs;
  logic [1:0] clicint_165_attr_trig_165_wd;
  logic clicint_165_attr_trig_165_we;
  logic [1:0] clicint_165_attr_mode_165_qs;
  logic [1:0] clicint_165_attr_mode_165_wd;
  logic clicint_165_attr_mode_165_we;
  logic [7:0] clicint_165_ctl_165_qs;
  logic [7:0] clicint_165_ctl_165_wd;
  logic clicint_165_ctl_165_we;
  logic clicint_166_ip_166_qs;
  logic clicint_166_ip_166_wd;
  logic clicint_166_ip_166_we;
  logic clicint_166_ie_166_qs;
  logic clicint_166_ie_166_wd;
  logic clicint_166_ie_166_we;
  logic clicint_166_attr_shv_166_qs;
  logic clicint_166_attr_shv_166_wd;
  logic clicint_166_attr_shv_166_we;
  logic [1:0] clicint_166_attr_trig_166_qs;
  logic [1:0] clicint_166_attr_trig_166_wd;
  logic clicint_166_attr_trig_166_we;
  logic [1:0] clicint_166_attr_mode_166_qs;
  logic [1:0] clicint_166_attr_mode_166_wd;
  logic clicint_166_attr_mode_166_we;
  logic [7:0] clicint_166_ctl_166_qs;
  logic [7:0] clicint_166_ctl_166_wd;
  logic clicint_166_ctl_166_we;
  logic clicint_167_ip_167_qs;
  logic clicint_167_ip_167_wd;
  logic clicint_167_ip_167_we;
  logic clicint_167_ie_167_qs;
  logic clicint_167_ie_167_wd;
  logic clicint_167_ie_167_we;
  logic clicint_167_attr_shv_167_qs;
  logic clicint_167_attr_shv_167_wd;
  logic clicint_167_attr_shv_167_we;
  logic [1:0] clicint_167_attr_trig_167_qs;
  logic [1:0] clicint_167_attr_trig_167_wd;
  logic clicint_167_attr_trig_167_we;
  logic [1:0] clicint_167_attr_mode_167_qs;
  logic [1:0] clicint_167_attr_mode_167_wd;
  logic clicint_167_attr_mode_167_we;
  logic [7:0] clicint_167_ctl_167_qs;
  logic [7:0] clicint_167_ctl_167_wd;
  logic clicint_167_ctl_167_we;
  logic clicint_168_ip_168_qs;
  logic clicint_168_ip_168_wd;
  logic clicint_168_ip_168_we;
  logic clicint_168_ie_168_qs;
  logic clicint_168_ie_168_wd;
  logic clicint_168_ie_168_we;
  logic clicint_168_attr_shv_168_qs;
  logic clicint_168_attr_shv_168_wd;
  logic clicint_168_attr_shv_168_we;
  logic [1:0] clicint_168_attr_trig_168_qs;
  logic [1:0] clicint_168_attr_trig_168_wd;
  logic clicint_168_attr_trig_168_we;
  logic [1:0] clicint_168_attr_mode_168_qs;
  logic [1:0] clicint_168_attr_mode_168_wd;
  logic clicint_168_attr_mode_168_we;
  logic [7:0] clicint_168_ctl_168_qs;
  logic [7:0] clicint_168_ctl_168_wd;
  logic clicint_168_ctl_168_we;
  logic clicint_169_ip_169_qs;
  logic clicint_169_ip_169_wd;
  logic clicint_169_ip_169_we;
  logic clicint_169_ie_169_qs;
  logic clicint_169_ie_169_wd;
  logic clicint_169_ie_169_we;
  logic clicint_169_attr_shv_169_qs;
  logic clicint_169_attr_shv_169_wd;
  logic clicint_169_attr_shv_169_we;
  logic [1:0] clicint_169_attr_trig_169_qs;
  logic [1:0] clicint_169_attr_trig_169_wd;
  logic clicint_169_attr_trig_169_we;
  logic [1:0] clicint_169_attr_mode_169_qs;
  logic [1:0] clicint_169_attr_mode_169_wd;
  logic clicint_169_attr_mode_169_we;
  logic [7:0] clicint_169_ctl_169_qs;
  logic [7:0] clicint_169_ctl_169_wd;
  logic clicint_169_ctl_169_we;
  logic clicint_170_ip_170_qs;
  logic clicint_170_ip_170_wd;
  logic clicint_170_ip_170_we;
  logic clicint_170_ie_170_qs;
  logic clicint_170_ie_170_wd;
  logic clicint_170_ie_170_we;
  logic clicint_170_attr_shv_170_qs;
  logic clicint_170_attr_shv_170_wd;
  logic clicint_170_attr_shv_170_we;
  logic [1:0] clicint_170_attr_trig_170_qs;
  logic [1:0] clicint_170_attr_trig_170_wd;
  logic clicint_170_attr_trig_170_we;
  logic [1:0] clicint_170_attr_mode_170_qs;
  logic [1:0] clicint_170_attr_mode_170_wd;
  logic clicint_170_attr_mode_170_we;
  logic [7:0] clicint_170_ctl_170_qs;
  logic [7:0] clicint_170_ctl_170_wd;
  logic clicint_170_ctl_170_we;
  logic clicint_171_ip_171_qs;
  logic clicint_171_ip_171_wd;
  logic clicint_171_ip_171_we;
  logic clicint_171_ie_171_qs;
  logic clicint_171_ie_171_wd;
  logic clicint_171_ie_171_we;
  logic clicint_171_attr_shv_171_qs;
  logic clicint_171_attr_shv_171_wd;
  logic clicint_171_attr_shv_171_we;
  logic [1:0] clicint_171_attr_trig_171_qs;
  logic [1:0] clicint_171_attr_trig_171_wd;
  logic clicint_171_attr_trig_171_we;
  logic [1:0] clicint_171_attr_mode_171_qs;
  logic [1:0] clicint_171_attr_mode_171_wd;
  logic clicint_171_attr_mode_171_we;
  logic [7:0] clicint_171_ctl_171_qs;
  logic [7:0] clicint_171_ctl_171_wd;
  logic clicint_171_ctl_171_we;
  logic clicint_172_ip_172_qs;
  logic clicint_172_ip_172_wd;
  logic clicint_172_ip_172_we;
  logic clicint_172_ie_172_qs;
  logic clicint_172_ie_172_wd;
  logic clicint_172_ie_172_we;
  logic clicint_172_attr_shv_172_qs;
  logic clicint_172_attr_shv_172_wd;
  logic clicint_172_attr_shv_172_we;
  logic [1:0] clicint_172_attr_trig_172_qs;
  logic [1:0] clicint_172_attr_trig_172_wd;
  logic clicint_172_attr_trig_172_we;
  logic [1:0] clicint_172_attr_mode_172_qs;
  logic [1:0] clicint_172_attr_mode_172_wd;
  logic clicint_172_attr_mode_172_we;
  logic [7:0] clicint_172_ctl_172_qs;
  logic [7:0] clicint_172_ctl_172_wd;
  logic clicint_172_ctl_172_we;
  logic clicint_173_ip_173_qs;
  logic clicint_173_ip_173_wd;
  logic clicint_173_ip_173_we;
  logic clicint_173_ie_173_qs;
  logic clicint_173_ie_173_wd;
  logic clicint_173_ie_173_we;
  logic clicint_173_attr_shv_173_qs;
  logic clicint_173_attr_shv_173_wd;
  logic clicint_173_attr_shv_173_we;
  logic [1:0] clicint_173_attr_trig_173_qs;
  logic [1:0] clicint_173_attr_trig_173_wd;
  logic clicint_173_attr_trig_173_we;
  logic [1:0] clicint_173_attr_mode_173_qs;
  logic [1:0] clicint_173_attr_mode_173_wd;
  logic clicint_173_attr_mode_173_we;
  logic [7:0] clicint_173_ctl_173_qs;
  logic [7:0] clicint_173_ctl_173_wd;
  logic clicint_173_ctl_173_we;
  logic clicint_174_ip_174_qs;
  logic clicint_174_ip_174_wd;
  logic clicint_174_ip_174_we;
  logic clicint_174_ie_174_qs;
  logic clicint_174_ie_174_wd;
  logic clicint_174_ie_174_we;
  logic clicint_174_attr_shv_174_qs;
  logic clicint_174_attr_shv_174_wd;
  logic clicint_174_attr_shv_174_we;
  logic [1:0] clicint_174_attr_trig_174_qs;
  logic [1:0] clicint_174_attr_trig_174_wd;
  logic clicint_174_attr_trig_174_we;
  logic [1:0] clicint_174_attr_mode_174_qs;
  logic [1:0] clicint_174_attr_mode_174_wd;
  logic clicint_174_attr_mode_174_we;
  logic [7:0] clicint_174_ctl_174_qs;
  logic [7:0] clicint_174_ctl_174_wd;
  logic clicint_174_ctl_174_we;
  logic clicint_175_ip_175_qs;
  logic clicint_175_ip_175_wd;
  logic clicint_175_ip_175_we;
  logic clicint_175_ie_175_qs;
  logic clicint_175_ie_175_wd;
  logic clicint_175_ie_175_we;
  logic clicint_175_attr_shv_175_qs;
  logic clicint_175_attr_shv_175_wd;
  logic clicint_175_attr_shv_175_we;
  logic [1:0] clicint_175_attr_trig_175_qs;
  logic [1:0] clicint_175_attr_trig_175_wd;
  logic clicint_175_attr_trig_175_we;
  logic [1:0] clicint_175_attr_mode_175_qs;
  logic [1:0] clicint_175_attr_mode_175_wd;
  logic clicint_175_attr_mode_175_we;
  logic [7:0] clicint_175_ctl_175_qs;
  logic [7:0] clicint_175_ctl_175_wd;
  logic clicint_175_ctl_175_we;
  logic clicint_176_ip_176_qs;
  logic clicint_176_ip_176_wd;
  logic clicint_176_ip_176_we;
  logic clicint_176_ie_176_qs;
  logic clicint_176_ie_176_wd;
  logic clicint_176_ie_176_we;
  logic clicint_176_attr_shv_176_qs;
  logic clicint_176_attr_shv_176_wd;
  logic clicint_176_attr_shv_176_we;
  logic [1:0] clicint_176_attr_trig_176_qs;
  logic [1:0] clicint_176_attr_trig_176_wd;
  logic clicint_176_attr_trig_176_we;
  logic [1:0] clicint_176_attr_mode_176_qs;
  logic [1:0] clicint_176_attr_mode_176_wd;
  logic clicint_176_attr_mode_176_we;
  logic [7:0] clicint_176_ctl_176_qs;
  logic [7:0] clicint_176_ctl_176_wd;
  logic clicint_176_ctl_176_we;
  logic clicint_177_ip_177_qs;
  logic clicint_177_ip_177_wd;
  logic clicint_177_ip_177_we;
  logic clicint_177_ie_177_qs;
  logic clicint_177_ie_177_wd;
  logic clicint_177_ie_177_we;
  logic clicint_177_attr_shv_177_qs;
  logic clicint_177_attr_shv_177_wd;
  logic clicint_177_attr_shv_177_we;
  logic [1:0] clicint_177_attr_trig_177_qs;
  logic [1:0] clicint_177_attr_trig_177_wd;
  logic clicint_177_attr_trig_177_we;
  logic [1:0] clicint_177_attr_mode_177_qs;
  logic [1:0] clicint_177_attr_mode_177_wd;
  logic clicint_177_attr_mode_177_we;
  logic [7:0] clicint_177_ctl_177_qs;
  logic [7:0] clicint_177_ctl_177_wd;
  logic clicint_177_ctl_177_we;
  logic clicint_178_ip_178_qs;
  logic clicint_178_ip_178_wd;
  logic clicint_178_ip_178_we;
  logic clicint_178_ie_178_qs;
  logic clicint_178_ie_178_wd;
  logic clicint_178_ie_178_we;
  logic clicint_178_attr_shv_178_qs;
  logic clicint_178_attr_shv_178_wd;
  logic clicint_178_attr_shv_178_we;
  logic [1:0] clicint_178_attr_trig_178_qs;
  logic [1:0] clicint_178_attr_trig_178_wd;
  logic clicint_178_attr_trig_178_we;
  logic [1:0] clicint_178_attr_mode_178_qs;
  logic [1:0] clicint_178_attr_mode_178_wd;
  logic clicint_178_attr_mode_178_we;
  logic [7:0] clicint_178_ctl_178_qs;
  logic [7:0] clicint_178_ctl_178_wd;
  logic clicint_178_ctl_178_we;
  logic clicint_179_ip_179_qs;
  logic clicint_179_ip_179_wd;
  logic clicint_179_ip_179_we;
  logic clicint_179_ie_179_qs;
  logic clicint_179_ie_179_wd;
  logic clicint_179_ie_179_we;
  logic clicint_179_attr_shv_179_qs;
  logic clicint_179_attr_shv_179_wd;
  logic clicint_179_attr_shv_179_we;
  logic [1:0] clicint_179_attr_trig_179_qs;
  logic [1:0] clicint_179_attr_trig_179_wd;
  logic clicint_179_attr_trig_179_we;
  logic [1:0] clicint_179_attr_mode_179_qs;
  logic [1:0] clicint_179_attr_mode_179_wd;
  logic clicint_179_attr_mode_179_we;
  logic [7:0] clicint_179_ctl_179_qs;
  logic [7:0] clicint_179_ctl_179_wd;
  logic clicint_179_ctl_179_we;
  logic clicint_180_ip_180_qs;
  logic clicint_180_ip_180_wd;
  logic clicint_180_ip_180_we;
  logic clicint_180_ie_180_qs;
  logic clicint_180_ie_180_wd;
  logic clicint_180_ie_180_we;
  logic clicint_180_attr_shv_180_qs;
  logic clicint_180_attr_shv_180_wd;
  logic clicint_180_attr_shv_180_we;
  logic [1:0] clicint_180_attr_trig_180_qs;
  logic [1:0] clicint_180_attr_trig_180_wd;
  logic clicint_180_attr_trig_180_we;
  logic [1:0] clicint_180_attr_mode_180_qs;
  logic [1:0] clicint_180_attr_mode_180_wd;
  logic clicint_180_attr_mode_180_we;
  logic [7:0] clicint_180_ctl_180_qs;
  logic [7:0] clicint_180_ctl_180_wd;
  logic clicint_180_ctl_180_we;
  logic clicint_181_ip_181_qs;
  logic clicint_181_ip_181_wd;
  logic clicint_181_ip_181_we;
  logic clicint_181_ie_181_qs;
  logic clicint_181_ie_181_wd;
  logic clicint_181_ie_181_we;
  logic clicint_181_attr_shv_181_qs;
  logic clicint_181_attr_shv_181_wd;
  logic clicint_181_attr_shv_181_we;
  logic [1:0] clicint_181_attr_trig_181_qs;
  logic [1:0] clicint_181_attr_trig_181_wd;
  logic clicint_181_attr_trig_181_we;
  logic [1:0] clicint_181_attr_mode_181_qs;
  logic [1:0] clicint_181_attr_mode_181_wd;
  logic clicint_181_attr_mode_181_we;
  logic [7:0] clicint_181_ctl_181_qs;
  logic [7:0] clicint_181_ctl_181_wd;
  logic clicint_181_ctl_181_we;
  logic clicint_182_ip_182_qs;
  logic clicint_182_ip_182_wd;
  logic clicint_182_ip_182_we;
  logic clicint_182_ie_182_qs;
  logic clicint_182_ie_182_wd;
  logic clicint_182_ie_182_we;
  logic clicint_182_attr_shv_182_qs;
  logic clicint_182_attr_shv_182_wd;
  logic clicint_182_attr_shv_182_we;
  logic [1:0] clicint_182_attr_trig_182_qs;
  logic [1:0] clicint_182_attr_trig_182_wd;
  logic clicint_182_attr_trig_182_we;
  logic [1:0] clicint_182_attr_mode_182_qs;
  logic [1:0] clicint_182_attr_mode_182_wd;
  logic clicint_182_attr_mode_182_we;
  logic [7:0] clicint_182_ctl_182_qs;
  logic [7:0] clicint_182_ctl_182_wd;
  logic clicint_182_ctl_182_we;
  logic clicint_183_ip_183_qs;
  logic clicint_183_ip_183_wd;
  logic clicint_183_ip_183_we;
  logic clicint_183_ie_183_qs;
  logic clicint_183_ie_183_wd;
  logic clicint_183_ie_183_we;
  logic clicint_183_attr_shv_183_qs;
  logic clicint_183_attr_shv_183_wd;
  logic clicint_183_attr_shv_183_we;
  logic [1:0] clicint_183_attr_trig_183_qs;
  logic [1:0] clicint_183_attr_trig_183_wd;
  logic clicint_183_attr_trig_183_we;
  logic [1:0] clicint_183_attr_mode_183_qs;
  logic [1:0] clicint_183_attr_mode_183_wd;
  logic clicint_183_attr_mode_183_we;
  logic [7:0] clicint_183_ctl_183_qs;
  logic [7:0] clicint_183_ctl_183_wd;
  logic clicint_183_ctl_183_we;
  logic clicint_184_ip_184_qs;
  logic clicint_184_ip_184_wd;
  logic clicint_184_ip_184_we;
  logic clicint_184_ie_184_qs;
  logic clicint_184_ie_184_wd;
  logic clicint_184_ie_184_we;
  logic clicint_184_attr_shv_184_qs;
  logic clicint_184_attr_shv_184_wd;
  logic clicint_184_attr_shv_184_we;
  logic [1:0] clicint_184_attr_trig_184_qs;
  logic [1:0] clicint_184_attr_trig_184_wd;
  logic clicint_184_attr_trig_184_we;
  logic [1:0] clicint_184_attr_mode_184_qs;
  logic [1:0] clicint_184_attr_mode_184_wd;
  logic clicint_184_attr_mode_184_we;
  logic [7:0] clicint_184_ctl_184_qs;
  logic [7:0] clicint_184_ctl_184_wd;
  logic clicint_184_ctl_184_we;
  logic clicint_185_ip_185_qs;
  logic clicint_185_ip_185_wd;
  logic clicint_185_ip_185_we;
  logic clicint_185_ie_185_qs;
  logic clicint_185_ie_185_wd;
  logic clicint_185_ie_185_we;
  logic clicint_185_attr_shv_185_qs;
  logic clicint_185_attr_shv_185_wd;
  logic clicint_185_attr_shv_185_we;
  logic [1:0] clicint_185_attr_trig_185_qs;
  logic [1:0] clicint_185_attr_trig_185_wd;
  logic clicint_185_attr_trig_185_we;
  logic [1:0] clicint_185_attr_mode_185_qs;
  logic [1:0] clicint_185_attr_mode_185_wd;
  logic clicint_185_attr_mode_185_we;
  logic [7:0] clicint_185_ctl_185_qs;
  logic [7:0] clicint_185_ctl_185_wd;
  logic clicint_185_ctl_185_we;
  logic clicint_186_ip_186_qs;
  logic clicint_186_ip_186_wd;
  logic clicint_186_ip_186_we;
  logic clicint_186_ie_186_qs;
  logic clicint_186_ie_186_wd;
  logic clicint_186_ie_186_we;
  logic clicint_186_attr_shv_186_qs;
  logic clicint_186_attr_shv_186_wd;
  logic clicint_186_attr_shv_186_we;
  logic [1:0] clicint_186_attr_trig_186_qs;
  logic [1:0] clicint_186_attr_trig_186_wd;
  logic clicint_186_attr_trig_186_we;
  logic [1:0] clicint_186_attr_mode_186_qs;
  logic [1:0] clicint_186_attr_mode_186_wd;
  logic clicint_186_attr_mode_186_we;
  logic [7:0] clicint_186_ctl_186_qs;
  logic [7:0] clicint_186_ctl_186_wd;
  logic clicint_186_ctl_186_we;
  logic clicint_187_ip_187_qs;
  logic clicint_187_ip_187_wd;
  logic clicint_187_ip_187_we;
  logic clicint_187_ie_187_qs;
  logic clicint_187_ie_187_wd;
  logic clicint_187_ie_187_we;
  logic clicint_187_attr_shv_187_qs;
  logic clicint_187_attr_shv_187_wd;
  logic clicint_187_attr_shv_187_we;
  logic [1:0] clicint_187_attr_trig_187_qs;
  logic [1:0] clicint_187_attr_trig_187_wd;
  logic clicint_187_attr_trig_187_we;
  logic [1:0] clicint_187_attr_mode_187_qs;
  logic [1:0] clicint_187_attr_mode_187_wd;
  logic clicint_187_attr_mode_187_we;
  logic [7:0] clicint_187_ctl_187_qs;
  logic [7:0] clicint_187_ctl_187_wd;
  logic clicint_187_ctl_187_we;
  logic clicint_188_ip_188_qs;
  logic clicint_188_ip_188_wd;
  logic clicint_188_ip_188_we;
  logic clicint_188_ie_188_qs;
  logic clicint_188_ie_188_wd;
  logic clicint_188_ie_188_we;
  logic clicint_188_attr_shv_188_qs;
  logic clicint_188_attr_shv_188_wd;
  logic clicint_188_attr_shv_188_we;
  logic [1:0] clicint_188_attr_trig_188_qs;
  logic [1:0] clicint_188_attr_trig_188_wd;
  logic clicint_188_attr_trig_188_we;
  logic [1:0] clicint_188_attr_mode_188_qs;
  logic [1:0] clicint_188_attr_mode_188_wd;
  logic clicint_188_attr_mode_188_we;
  logic [7:0] clicint_188_ctl_188_qs;
  logic [7:0] clicint_188_ctl_188_wd;
  logic clicint_188_ctl_188_we;
  logic clicint_189_ip_189_qs;
  logic clicint_189_ip_189_wd;
  logic clicint_189_ip_189_we;
  logic clicint_189_ie_189_qs;
  logic clicint_189_ie_189_wd;
  logic clicint_189_ie_189_we;
  logic clicint_189_attr_shv_189_qs;
  logic clicint_189_attr_shv_189_wd;
  logic clicint_189_attr_shv_189_we;
  logic [1:0] clicint_189_attr_trig_189_qs;
  logic [1:0] clicint_189_attr_trig_189_wd;
  logic clicint_189_attr_trig_189_we;
  logic [1:0] clicint_189_attr_mode_189_qs;
  logic [1:0] clicint_189_attr_mode_189_wd;
  logic clicint_189_attr_mode_189_we;
  logic [7:0] clicint_189_ctl_189_qs;
  logic [7:0] clicint_189_ctl_189_wd;
  logic clicint_189_ctl_189_we;
  logic clicint_190_ip_190_qs;
  logic clicint_190_ip_190_wd;
  logic clicint_190_ip_190_we;
  logic clicint_190_ie_190_qs;
  logic clicint_190_ie_190_wd;
  logic clicint_190_ie_190_we;
  logic clicint_190_attr_shv_190_qs;
  logic clicint_190_attr_shv_190_wd;
  logic clicint_190_attr_shv_190_we;
  logic [1:0] clicint_190_attr_trig_190_qs;
  logic [1:0] clicint_190_attr_trig_190_wd;
  logic clicint_190_attr_trig_190_we;
  logic [1:0] clicint_190_attr_mode_190_qs;
  logic [1:0] clicint_190_attr_mode_190_wd;
  logic clicint_190_attr_mode_190_we;
  logic [7:0] clicint_190_ctl_190_qs;
  logic [7:0] clicint_190_ctl_190_wd;
  logic clicint_190_ctl_190_we;
  logic clicint_191_ip_191_qs;
  logic clicint_191_ip_191_wd;
  logic clicint_191_ip_191_we;
  logic clicint_191_ie_191_qs;
  logic clicint_191_ie_191_wd;
  logic clicint_191_ie_191_we;
  logic clicint_191_attr_shv_191_qs;
  logic clicint_191_attr_shv_191_wd;
  logic clicint_191_attr_shv_191_we;
  logic [1:0] clicint_191_attr_trig_191_qs;
  logic [1:0] clicint_191_attr_trig_191_wd;
  logic clicint_191_attr_trig_191_we;
  logic [1:0] clicint_191_attr_mode_191_qs;
  logic [1:0] clicint_191_attr_mode_191_wd;
  logic clicint_191_attr_mode_191_we;
  logic [7:0] clicint_191_ctl_191_qs;
  logic [7:0] clicint_191_ctl_191_wd;
  logic clicint_191_ctl_191_we;
  logic clicint_192_ip_192_qs;
  logic clicint_192_ip_192_wd;
  logic clicint_192_ip_192_we;
  logic clicint_192_ie_192_qs;
  logic clicint_192_ie_192_wd;
  logic clicint_192_ie_192_we;
  logic clicint_192_attr_shv_192_qs;
  logic clicint_192_attr_shv_192_wd;
  logic clicint_192_attr_shv_192_we;
  logic [1:0] clicint_192_attr_trig_192_qs;
  logic [1:0] clicint_192_attr_trig_192_wd;
  logic clicint_192_attr_trig_192_we;
  logic [1:0] clicint_192_attr_mode_192_qs;
  logic [1:0] clicint_192_attr_mode_192_wd;
  logic clicint_192_attr_mode_192_we;
  logic [7:0] clicint_192_ctl_192_qs;
  logic [7:0] clicint_192_ctl_192_wd;
  logic clicint_192_ctl_192_we;
  logic clicint_193_ip_193_qs;
  logic clicint_193_ip_193_wd;
  logic clicint_193_ip_193_we;
  logic clicint_193_ie_193_qs;
  logic clicint_193_ie_193_wd;
  logic clicint_193_ie_193_we;
  logic clicint_193_attr_shv_193_qs;
  logic clicint_193_attr_shv_193_wd;
  logic clicint_193_attr_shv_193_we;
  logic [1:0] clicint_193_attr_trig_193_qs;
  logic [1:0] clicint_193_attr_trig_193_wd;
  logic clicint_193_attr_trig_193_we;
  logic [1:0] clicint_193_attr_mode_193_qs;
  logic [1:0] clicint_193_attr_mode_193_wd;
  logic clicint_193_attr_mode_193_we;
  logic [7:0] clicint_193_ctl_193_qs;
  logic [7:0] clicint_193_ctl_193_wd;
  logic clicint_193_ctl_193_we;
  logic clicint_194_ip_194_qs;
  logic clicint_194_ip_194_wd;
  logic clicint_194_ip_194_we;
  logic clicint_194_ie_194_qs;
  logic clicint_194_ie_194_wd;
  logic clicint_194_ie_194_we;
  logic clicint_194_attr_shv_194_qs;
  logic clicint_194_attr_shv_194_wd;
  logic clicint_194_attr_shv_194_we;
  logic [1:0] clicint_194_attr_trig_194_qs;
  logic [1:0] clicint_194_attr_trig_194_wd;
  logic clicint_194_attr_trig_194_we;
  logic [1:0] clicint_194_attr_mode_194_qs;
  logic [1:0] clicint_194_attr_mode_194_wd;
  logic clicint_194_attr_mode_194_we;
  logic [7:0] clicint_194_ctl_194_qs;
  logic [7:0] clicint_194_ctl_194_wd;
  logic clicint_194_ctl_194_we;
  logic clicint_195_ip_195_qs;
  logic clicint_195_ip_195_wd;
  logic clicint_195_ip_195_we;
  logic clicint_195_ie_195_qs;
  logic clicint_195_ie_195_wd;
  logic clicint_195_ie_195_we;
  logic clicint_195_attr_shv_195_qs;
  logic clicint_195_attr_shv_195_wd;
  logic clicint_195_attr_shv_195_we;
  logic [1:0] clicint_195_attr_trig_195_qs;
  logic [1:0] clicint_195_attr_trig_195_wd;
  logic clicint_195_attr_trig_195_we;
  logic [1:0] clicint_195_attr_mode_195_qs;
  logic [1:0] clicint_195_attr_mode_195_wd;
  logic clicint_195_attr_mode_195_we;
  logic [7:0] clicint_195_ctl_195_qs;
  logic [7:0] clicint_195_ctl_195_wd;
  logic clicint_195_ctl_195_we;
  logic clicint_196_ip_196_qs;
  logic clicint_196_ip_196_wd;
  logic clicint_196_ip_196_we;
  logic clicint_196_ie_196_qs;
  logic clicint_196_ie_196_wd;
  logic clicint_196_ie_196_we;
  logic clicint_196_attr_shv_196_qs;
  logic clicint_196_attr_shv_196_wd;
  logic clicint_196_attr_shv_196_we;
  logic [1:0] clicint_196_attr_trig_196_qs;
  logic [1:0] clicint_196_attr_trig_196_wd;
  logic clicint_196_attr_trig_196_we;
  logic [1:0] clicint_196_attr_mode_196_qs;
  logic [1:0] clicint_196_attr_mode_196_wd;
  logic clicint_196_attr_mode_196_we;
  logic [7:0] clicint_196_ctl_196_qs;
  logic [7:0] clicint_196_ctl_196_wd;
  logic clicint_196_ctl_196_we;
  logic clicint_197_ip_197_qs;
  logic clicint_197_ip_197_wd;
  logic clicint_197_ip_197_we;
  logic clicint_197_ie_197_qs;
  logic clicint_197_ie_197_wd;
  logic clicint_197_ie_197_we;
  logic clicint_197_attr_shv_197_qs;
  logic clicint_197_attr_shv_197_wd;
  logic clicint_197_attr_shv_197_we;
  logic [1:0] clicint_197_attr_trig_197_qs;
  logic [1:0] clicint_197_attr_trig_197_wd;
  logic clicint_197_attr_trig_197_we;
  logic [1:0] clicint_197_attr_mode_197_qs;
  logic [1:0] clicint_197_attr_mode_197_wd;
  logic clicint_197_attr_mode_197_we;
  logic [7:0] clicint_197_ctl_197_qs;
  logic [7:0] clicint_197_ctl_197_wd;
  logic clicint_197_ctl_197_we;
  logic clicint_198_ip_198_qs;
  logic clicint_198_ip_198_wd;
  logic clicint_198_ip_198_we;
  logic clicint_198_ie_198_qs;
  logic clicint_198_ie_198_wd;
  logic clicint_198_ie_198_we;
  logic clicint_198_attr_shv_198_qs;
  logic clicint_198_attr_shv_198_wd;
  logic clicint_198_attr_shv_198_we;
  logic [1:0] clicint_198_attr_trig_198_qs;
  logic [1:0] clicint_198_attr_trig_198_wd;
  logic clicint_198_attr_trig_198_we;
  logic [1:0] clicint_198_attr_mode_198_qs;
  logic [1:0] clicint_198_attr_mode_198_wd;
  logic clicint_198_attr_mode_198_we;
  logic [7:0] clicint_198_ctl_198_qs;
  logic [7:0] clicint_198_ctl_198_wd;
  logic clicint_198_ctl_198_we;
  logic clicint_199_ip_199_qs;
  logic clicint_199_ip_199_wd;
  logic clicint_199_ip_199_we;
  logic clicint_199_ie_199_qs;
  logic clicint_199_ie_199_wd;
  logic clicint_199_ie_199_we;
  logic clicint_199_attr_shv_199_qs;
  logic clicint_199_attr_shv_199_wd;
  logic clicint_199_attr_shv_199_we;
  logic [1:0] clicint_199_attr_trig_199_qs;
  logic [1:0] clicint_199_attr_trig_199_wd;
  logic clicint_199_attr_trig_199_we;
  logic [1:0] clicint_199_attr_mode_199_qs;
  logic [1:0] clicint_199_attr_mode_199_wd;
  logic clicint_199_attr_mode_199_we;
  logic [7:0] clicint_199_ctl_199_qs;
  logic [7:0] clicint_199_ctl_199_wd;
  logic clicint_199_ctl_199_we;
  logic clicint_200_ip_200_qs;
  logic clicint_200_ip_200_wd;
  logic clicint_200_ip_200_we;
  logic clicint_200_ie_200_qs;
  logic clicint_200_ie_200_wd;
  logic clicint_200_ie_200_we;
  logic clicint_200_attr_shv_200_qs;
  logic clicint_200_attr_shv_200_wd;
  logic clicint_200_attr_shv_200_we;
  logic [1:0] clicint_200_attr_trig_200_qs;
  logic [1:0] clicint_200_attr_trig_200_wd;
  logic clicint_200_attr_trig_200_we;
  logic [1:0] clicint_200_attr_mode_200_qs;
  logic [1:0] clicint_200_attr_mode_200_wd;
  logic clicint_200_attr_mode_200_we;
  logic [7:0] clicint_200_ctl_200_qs;
  logic [7:0] clicint_200_ctl_200_wd;
  logic clicint_200_ctl_200_we;
  logic clicint_201_ip_201_qs;
  logic clicint_201_ip_201_wd;
  logic clicint_201_ip_201_we;
  logic clicint_201_ie_201_qs;
  logic clicint_201_ie_201_wd;
  logic clicint_201_ie_201_we;
  logic clicint_201_attr_shv_201_qs;
  logic clicint_201_attr_shv_201_wd;
  logic clicint_201_attr_shv_201_we;
  logic [1:0] clicint_201_attr_trig_201_qs;
  logic [1:0] clicint_201_attr_trig_201_wd;
  logic clicint_201_attr_trig_201_we;
  logic [1:0] clicint_201_attr_mode_201_qs;
  logic [1:0] clicint_201_attr_mode_201_wd;
  logic clicint_201_attr_mode_201_we;
  logic [7:0] clicint_201_ctl_201_qs;
  logic [7:0] clicint_201_ctl_201_wd;
  logic clicint_201_ctl_201_we;
  logic clicint_202_ip_202_qs;
  logic clicint_202_ip_202_wd;
  logic clicint_202_ip_202_we;
  logic clicint_202_ie_202_qs;
  logic clicint_202_ie_202_wd;
  logic clicint_202_ie_202_we;
  logic clicint_202_attr_shv_202_qs;
  logic clicint_202_attr_shv_202_wd;
  logic clicint_202_attr_shv_202_we;
  logic [1:0] clicint_202_attr_trig_202_qs;
  logic [1:0] clicint_202_attr_trig_202_wd;
  logic clicint_202_attr_trig_202_we;
  logic [1:0] clicint_202_attr_mode_202_qs;
  logic [1:0] clicint_202_attr_mode_202_wd;
  logic clicint_202_attr_mode_202_we;
  logic [7:0] clicint_202_ctl_202_qs;
  logic [7:0] clicint_202_ctl_202_wd;
  logic clicint_202_ctl_202_we;
  logic clicint_203_ip_203_qs;
  logic clicint_203_ip_203_wd;
  logic clicint_203_ip_203_we;
  logic clicint_203_ie_203_qs;
  logic clicint_203_ie_203_wd;
  logic clicint_203_ie_203_we;
  logic clicint_203_attr_shv_203_qs;
  logic clicint_203_attr_shv_203_wd;
  logic clicint_203_attr_shv_203_we;
  logic [1:0] clicint_203_attr_trig_203_qs;
  logic [1:0] clicint_203_attr_trig_203_wd;
  logic clicint_203_attr_trig_203_we;
  logic [1:0] clicint_203_attr_mode_203_qs;
  logic [1:0] clicint_203_attr_mode_203_wd;
  logic clicint_203_attr_mode_203_we;
  logic [7:0] clicint_203_ctl_203_qs;
  logic [7:0] clicint_203_ctl_203_wd;
  logic clicint_203_ctl_203_we;
  logic clicint_204_ip_204_qs;
  logic clicint_204_ip_204_wd;
  logic clicint_204_ip_204_we;
  logic clicint_204_ie_204_qs;
  logic clicint_204_ie_204_wd;
  logic clicint_204_ie_204_we;
  logic clicint_204_attr_shv_204_qs;
  logic clicint_204_attr_shv_204_wd;
  logic clicint_204_attr_shv_204_we;
  logic [1:0] clicint_204_attr_trig_204_qs;
  logic [1:0] clicint_204_attr_trig_204_wd;
  logic clicint_204_attr_trig_204_we;
  logic [1:0] clicint_204_attr_mode_204_qs;
  logic [1:0] clicint_204_attr_mode_204_wd;
  logic clicint_204_attr_mode_204_we;
  logic [7:0] clicint_204_ctl_204_qs;
  logic [7:0] clicint_204_ctl_204_wd;
  logic clicint_204_ctl_204_we;
  logic clicint_205_ip_205_qs;
  logic clicint_205_ip_205_wd;
  logic clicint_205_ip_205_we;
  logic clicint_205_ie_205_qs;
  logic clicint_205_ie_205_wd;
  logic clicint_205_ie_205_we;
  logic clicint_205_attr_shv_205_qs;
  logic clicint_205_attr_shv_205_wd;
  logic clicint_205_attr_shv_205_we;
  logic [1:0] clicint_205_attr_trig_205_qs;
  logic [1:0] clicint_205_attr_trig_205_wd;
  logic clicint_205_attr_trig_205_we;
  logic [1:0] clicint_205_attr_mode_205_qs;
  logic [1:0] clicint_205_attr_mode_205_wd;
  logic clicint_205_attr_mode_205_we;
  logic [7:0] clicint_205_ctl_205_qs;
  logic [7:0] clicint_205_ctl_205_wd;
  logic clicint_205_ctl_205_we;
  logic clicint_206_ip_206_qs;
  logic clicint_206_ip_206_wd;
  logic clicint_206_ip_206_we;
  logic clicint_206_ie_206_qs;
  logic clicint_206_ie_206_wd;
  logic clicint_206_ie_206_we;
  logic clicint_206_attr_shv_206_qs;
  logic clicint_206_attr_shv_206_wd;
  logic clicint_206_attr_shv_206_we;
  logic [1:0] clicint_206_attr_trig_206_qs;
  logic [1:0] clicint_206_attr_trig_206_wd;
  logic clicint_206_attr_trig_206_we;
  logic [1:0] clicint_206_attr_mode_206_qs;
  logic [1:0] clicint_206_attr_mode_206_wd;
  logic clicint_206_attr_mode_206_we;
  logic [7:0] clicint_206_ctl_206_qs;
  logic [7:0] clicint_206_ctl_206_wd;
  logic clicint_206_ctl_206_we;
  logic clicint_207_ip_207_qs;
  logic clicint_207_ip_207_wd;
  logic clicint_207_ip_207_we;
  logic clicint_207_ie_207_qs;
  logic clicint_207_ie_207_wd;
  logic clicint_207_ie_207_we;
  logic clicint_207_attr_shv_207_qs;
  logic clicint_207_attr_shv_207_wd;
  logic clicint_207_attr_shv_207_we;
  logic [1:0] clicint_207_attr_trig_207_qs;
  logic [1:0] clicint_207_attr_trig_207_wd;
  logic clicint_207_attr_trig_207_we;
  logic [1:0] clicint_207_attr_mode_207_qs;
  logic [1:0] clicint_207_attr_mode_207_wd;
  logic clicint_207_attr_mode_207_we;
  logic [7:0] clicint_207_ctl_207_qs;
  logic [7:0] clicint_207_ctl_207_wd;
  logic clicint_207_ctl_207_we;
  logic clicint_208_ip_208_qs;
  logic clicint_208_ip_208_wd;
  logic clicint_208_ip_208_we;
  logic clicint_208_ie_208_qs;
  logic clicint_208_ie_208_wd;
  logic clicint_208_ie_208_we;
  logic clicint_208_attr_shv_208_qs;
  logic clicint_208_attr_shv_208_wd;
  logic clicint_208_attr_shv_208_we;
  logic [1:0] clicint_208_attr_trig_208_qs;
  logic [1:0] clicint_208_attr_trig_208_wd;
  logic clicint_208_attr_trig_208_we;
  logic [1:0] clicint_208_attr_mode_208_qs;
  logic [1:0] clicint_208_attr_mode_208_wd;
  logic clicint_208_attr_mode_208_we;
  logic [7:0] clicint_208_ctl_208_qs;
  logic [7:0] clicint_208_ctl_208_wd;
  logic clicint_208_ctl_208_we;
  logic clicint_209_ip_209_qs;
  logic clicint_209_ip_209_wd;
  logic clicint_209_ip_209_we;
  logic clicint_209_ie_209_qs;
  logic clicint_209_ie_209_wd;
  logic clicint_209_ie_209_we;
  logic clicint_209_attr_shv_209_qs;
  logic clicint_209_attr_shv_209_wd;
  logic clicint_209_attr_shv_209_we;
  logic [1:0] clicint_209_attr_trig_209_qs;
  logic [1:0] clicint_209_attr_trig_209_wd;
  logic clicint_209_attr_trig_209_we;
  logic [1:0] clicint_209_attr_mode_209_qs;
  logic [1:0] clicint_209_attr_mode_209_wd;
  logic clicint_209_attr_mode_209_we;
  logic [7:0] clicint_209_ctl_209_qs;
  logic [7:0] clicint_209_ctl_209_wd;
  logic clicint_209_ctl_209_we;
  logic clicint_210_ip_210_qs;
  logic clicint_210_ip_210_wd;
  logic clicint_210_ip_210_we;
  logic clicint_210_ie_210_qs;
  logic clicint_210_ie_210_wd;
  logic clicint_210_ie_210_we;
  logic clicint_210_attr_shv_210_qs;
  logic clicint_210_attr_shv_210_wd;
  logic clicint_210_attr_shv_210_we;
  logic [1:0] clicint_210_attr_trig_210_qs;
  logic [1:0] clicint_210_attr_trig_210_wd;
  logic clicint_210_attr_trig_210_we;
  logic [1:0] clicint_210_attr_mode_210_qs;
  logic [1:0] clicint_210_attr_mode_210_wd;
  logic clicint_210_attr_mode_210_we;
  logic [7:0] clicint_210_ctl_210_qs;
  logic [7:0] clicint_210_ctl_210_wd;
  logic clicint_210_ctl_210_we;
  logic clicint_211_ip_211_qs;
  logic clicint_211_ip_211_wd;
  logic clicint_211_ip_211_we;
  logic clicint_211_ie_211_qs;
  logic clicint_211_ie_211_wd;
  logic clicint_211_ie_211_we;
  logic clicint_211_attr_shv_211_qs;
  logic clicint_211_attr_shv_211_wd;
  logic clicint_211_attr_shv_211_we;
  logic [1:0] clicint_211_attr_trig_211_qs;
  logic [1:0] clicint_211_attr_trig_211_wd;
  logic clicint_211_attr_trig_211_we;
  logic [1:0] clicint_211_attr_mode_211_qs;
  logic [1:0] clicint_211_attr_mode_211_wd;
  logic clicint_211_attr_mode_211_we;
  logic [7:0] clicint_211_ctl_211_qs;
  logic [7:0] clicint_211_ctl_211_wd;
  logic clicint_211_ctl_211_we;
  logic clicint_212_ip_212_qs;
  logic clicint_212_ip_212_wd;
  logic clicint_212_ip_212_we;
  logic clicint_212_ie_212_qs;
  logic clicint_212_ie_212_wd;
  logic clicint_212_ie_212_we;
  logic clicint_212_attr_shv_212_qs;
  logic clicint_212_attr_shv_212_wd;
  logic clicint_212_attr_shv_212_we;
  logic [1:0] clicint_212_attr_trig_212_qs;
  logic [1:0] clicint_212_attr_trig_212_wd;
  logic clicint_212_attr_trig_212_we;
  logic [1:0] clicint_212_attr_mode_212_qs;
  logic [1:0] clicint_212_attr_mode_212_wd;
  logic clicint_212_attr_mode_212_we;
  logic [7:0] clicint_212_ctl_212_qs;
  logic [7:0] clicint_212_ctl_212_wd;
  logic clicint_212_ctl_212_we;
  logic clicint_213_ip_213_qs;
  logic clicint_213_ip_213_wd;
  logic clicint_213_ip_213_we;
  logic clicint_213_ie_213_qs;
  logic clicint_213_ie_213_wd;
  logic clicint_213_ie_213_we;
  logic clicint_213_attr_shv_213_qs;
  logic clicint_213_attr_shv_213_wd;
  logic clicint_213_attr_shv_213_we;
  logic [1:0] clicint_213_attr_trig_213_qs;
  logic [1:0] clicint_213_attr_trig_213_wd;
  logic clicint_213_attr_trig_213_we;
  logic [1:0] clicint_213_attr_mode_213_qs;
  logic [1:0] clicint_213_attr_mode_213_wd;
  logic clicint_213_attr_mode_213_we;
  logic [7:0] clicint_213_ctl_213_qs;
  logic [7:0] clicint_213_ctl_213_wd;
  logic clicint_213_ctl_213_we;
  logic clicint_214_ip_214_qs;
  logic clicint_214_ip_214_wd;
  logic clicint_214_ip_214_we;
  logic clicint_214_ie_214_qs;
  logic clicint_214_ie_214_wd;
  logic clicint_214_ie_214_we;
  logic clicint_214_attr_shv_214_qs;
  logic clicint_214_attr_shv_214_wd;
  logic clicint_214_attr_shv_214_we;
  logic [1:0] clicint_214_attr_trig_214_qs;
  logic [1:0] clicint_214_attr_trig_214_wd;
  logic clicint_214_attr_trig_214_we;
  logic [1:0] clicint_214_attr_mode_214_qs;
  logic [1:0] clicint_214_attr_mode_214_wd;
  logic clicint_214_attr_mode_214_we;
  logic [7:0] clicint_214_ctl_214_qs;
  logic [7:0] clicint_214_ctl_214_wd;
  logic clicint_214_ctl_214_we;
  logic clicint_215_ip_215_qs;
  logic clicint_215_ip_215_wd;
  logic clicint_215_ip_215_we;
  logic clicint_215_ie_215_qs;
  logic clicint_215_ie_215_wd;
  logic clicint_215_ie_215_we;
  logic clicint_215_attr_shv_215_qs;
  logic clicint_215_attr_shv_215_wd;
  logic clicint_215_attr_shv_215_we;
  logic [1:0] clicint_215_attr_trig_215_qs;
  logic [1:0] clicint_215_attr_trig_215_wd;
  logic clicint_215_attr_trig_215_we;
  logic [1:0] clicint_215_attr_mode_215_qs;
  logic [1:0] clicint_215_attr_mode_215_wd;
  logic clicint_215_attr_mode_215_we;
  logic [7:0] clicint_215_ctl_215_qs;
  logic [7:0] clicint_215_ctl_215_wd;
  logic clicint_215_ctl_215_we;
  logic clicint_216_ip_216_qs;
  logic clicint_216_ip_216_wd;
  logic clicint_216_ip_216_we;
  logic clicint_216_ie_216_qs;
  logic clicint_216_ie_216_wd;
  logic clicint_216_ie_216_we;
  logic clicint_216_attr_shv_216_qs;
  logic clicint_216_attr_shv_216_wd;
  logic clicint_216_attr_shv_216_we;
  logic [1:0] clicint_216_attr_trig_216_qs;
  logic [1:0] clicint_216_attr_trig_216_wd;
  logic clicint_216_attr_trig_216_we;
  logic [1:0] clicint_216_attr_mode_216_qs;
  logic [1:0] clicint_216_attr_mode_216_wd;
  logic clicint_216_attr_mode_216_we;
  logic [7:0] clicint_216_ctl_216_qs;
  logic [7:0] clicint_216_ctl_216_wd;
  logic clicint_216_ctl_216_we;
  logic clicint_217_ip_217_qs;
  logic clicint_217_ip_217_wd;
  logic clicint_217_ip_217_we;
  logic clicint_217_ie_217_qs;
  logic clicint_217_ie_217_wd;
  logic clicint_217_ie_217_we;
  logic clicint_217_attr_shv_217_qs;
  logic clicint_217_attr_shv_217_wd;
  logic clicint_217_attr_shv_217_we;
  logic [1:0] clicint_217_attr_trig_217_qs;
  logic [1:0] clicint_217_attr_trig_217_wd;
  logic clicint_217_attr_trig_217_we;
  logic [1:0] clicint_217_attr_mode_217_qs;
  logic [1:0] clicint_217_attr_mode_217_wd;
  logic clicint_217_attr_mode_217_we;
  logic [7:0] clicint_217_ctl_217_qs;
  logic [7:0] clicint_217_ctl_217_wd;
  logic clicint_217_ctl_217_we;
  logic clicint_218_ip_218_qs;
  logic clicint_218_ip_218_wd;
  logic clicint_218_ip_218_we;
  logic clicint_218_ie_218_qs;
  logic clicint_218_ie_218_wd;
  logic clicint_218_ie_218_we;
  logic clicint_218_attr_shv_218_qs;
  logic clicint_218_attr_shv_218_wd;
  logic clicint_218_attr_shv_218_we;
  logic [1:0] clicint_218_attr_trig_218_qs;
  logic [1:0] clicint_218_attr_trig_218_wd;
  logic clicint_218_attr_trig_218_we;
  logic [1:0] clicint_218_attr_mode_218_qs;
  logic [1:0] clicint_218_attr_mode_218_wd;
  logic clicint_218_attr_mode_218_we;
  logic [7:0] clicint_218_ctl_218_qs;
  logic [7:0] clicint_218_ctl_218_wd;
  logic clicint_218_ctl_218_we;
  logic clicint_219_ip_219_qs;
  logic clicint_219_ip_219_wd;
  logic clicint_219_ip_219_we;
  logic clicint_219_ie_219_qs;
  logic clicint_219_ie_219_wd;
  logic clicint_219_ie_219_we;
  logic clicint_219_attr_shv_219_qs;
  logic clicint_219_attr_shv_219_wd;
  logic clicint_219_attr_shv_219_we;
  logic [1:0] clicint_219_attr_trig_219_qs;
  logic [1:0] clicint_219_attr_trig_219_wd;
  logic clicint_219_attr_trig_219_we;
  logic [1:0] clicint_219_attr_mode_219_qs;
  logic [1:0] clicint_219_attr_mode_219_wd;
  logic clicint_219_attr_mode_219_we;
  logic [7:0] clicint_219_ctl_219_qs;
  logic [7:0] clicint_219_ctl_219_wd;
  logic clicint_219_ctl_219_we;
  logic clicint_220_ip_220_qs;
  logic clicint_220_ip_220_wd;
  logic clicint_220_ip_220_we;
  logic clicint_220_ie_220_qs;
  logic clicint_220_ie_220_wd;
  logic clicint_220_ie_220_we;
  logic clicint_220_attr_shv_220_qs;
  logic clicint_220_attr_shv_220_wd;
  logic clicint_220_attr_shv_220_we;
  logic [1:0] clicint_220_attr_trig_220_qs;
  logic [1:0] clicint_220_attr_trig_220_wd;
  logic clicint_220_attr_trig_220_we;
  logic [1:0] clicint_220_attr_mode_220_qs;
  logic [1:0] clicint_220_attr_mode_220_wd;
  logic clicint_220_attr_mode_220_we;
  logic [7:0] clicint_220_ctl_220_qs;
  logic [7:0] clicint_220_ctl_220_wd;
  logic clicint_220_ctl_220_we;
  logic clicint_221_ip_221_qs;
  logic clicint_221_ip_221_wd;
  logic clicint_221_ip_221_we;
  logic clicint_221_ie_221_qs;
  logic clicint_221_ie_221_wd;
  logic clicint_221_ie_221_we;
  logic clicint_221_attr_shv_221_qs;
  logic clicint_221_attr_shv_221_wd;
  logic clicint_221_attr_shv_221_we;
  logic [1:0] clicint_221_attr_trig_221_qs;
  logic [1:0] clicint_221_attr_trig_221_wd;
  logic clicint_221_attr_trig_221_we;
  logic [1:0] clicint_221_attr_mode_221_qs;
  logic [1:0] clicint_221_attr_mode_221_wd;
  logic clicint_221_attr_mode_221_we;
  logic [7:0] clicint_221_ctl_221_qs;
  logic [7:0] clicint_221_ctl_221_wd;
  logic clicint_221_ctl_221_we;
  logic clicint_222_ip_222_qs;
  logic clicint_222_ip_222_wd;
  logic clicint_222_ip_222_we;
  logic clicint_222_ie_222_qs;
  logic clicint_222_ie_222_wd;
  logic clicint_222_ie_222_we;
  logic clicint_222_attr_shv_222_qs;
  logic clicint_222_attr_shv_222_wd;
  logic clicint_222_attr_shv_222_we;
  logic [1:0] clicint_222_attr_trig_222_qs;
  logic [1:0] clicint_222_attr_trig_222_wd;
  logic clicint_222_attr_trig_222_we;
  logic [1:0] clicint_222_attr_mode_222_qs;
  logic [1:0] clicint_222_attr_mode_222_wd;
  logic clicint_222_attr_mode_222_we;
  logic [7:0] clicint_222_ctl_222_qs;
  logic [7:0] clicint_222_ctl_222_wd;
  logic clicint_222_ctl_222_we;
  logic clicint_223_ip_223_qs;
  logic clicint_223_ip_223_wd;
  logic clicint_223_ip_223_we;
  logic clicint_223_ie_223_qs;
  logic clicint_223_ie_223_wd;
  logic clicint_223_ie_223_we;
  logic clicint_223_attr_shv_223_qs;
  logic clicint_223_attr_shv_223_wd;
  logic clicint_223_attr_shv_223_we;
  logic [1:0] clicint_223_attr_trig_223_qs;
  logic [1:0] clicint_223_attr_trig_223_wd;
  logic clicint_223_attr_trig_223_we;
  logic [1:0] clicint_223_attr_mode_223_qs;
  logic [1:0] clicint_223_attr_mode_223_wd;
  logic clicint_223_attr_mode_223_we;
  logic [7:0] clicint_223_ctl_223_qs;
  logic [7:0] clicint_223_ctl_223_wd;
  logic clicint_223_ctl_223_we;
  logic clicint_224_ip_224_qs;
  logic clicint_224_ip_224_wd;
  logic clicint_224_ip_224_we;
  logic clicint_224_ie_224_qs;
  logic clicint_224_ie_224_wd;
  logic clicint_224_ie_224_we;
  logic clicint_224_attr_shv_224_qs;
  logic clicint_224_attr_shv_224_wd;
  logic clicint_224_attr_shv_224_we;
  logic [1:0] clicint_224_attr_trig_224_qs;
  logic [1:0] clicint_224_attr_trig_224_wd;
  logic clicint_224_attr_trig_224_we;
  logic [1:0] clicint_224_attr_mode_224_qs;
  logic [1:0] clicint_224_attr_mode_224_wd;
  logic clicint_224_attr_mode_224_we;
  logic [7:0] clicint_224_ctl_224_qs;
  logic [7:0] clicint_224_ctl_224_wd;
  logic clicint_224_ctl_224_we;
  logic clicint_225_ip_225_qs;
  logic clicint_225_ip_225_wd;
  logic clicint_225_ip_225_we;
  logic clicint_225_ie_225_qs;
  logic clicint_225_ie_225_wd;
  logic clicint_225_ie_225_we;
  logic clicint_225_attr_shv_225_qs;
  logic clicint_225_attr_shv_225_wd;
  logic clicint_225_attr_shv_225_we;
  logic [1:0] clicint_225_attr_trig_225_qs;
  logic [1:0] clicint_225_attr_trig_225_wd;
  logic clicint_225_attr_trig_225_we;
  logic [1:0] clicint_225_attr_mode_225_qs;
  logic [1:0] clicint_225_attr_mode_225_wd;
  logic clicint_225_attr_mode_225_we;
  logic [7:0] clicint_225_ctl_225_qs;
  logic [7:0] clicint_225_ctl_225_wd;
  logic clicint_225_ctl_225_we;
  logic clicint_226_ip_226_qs;
  logic clicint_226_ip_226_wd;
  logic clicint_226_ip_226_we;
  logic clicint_226_ie_226_qs;
  logic clicint_226_ie_226_wd;
  logic clicint_226_ie_226_we;
  logic clicint_226_attr_shv_226_qs;
  logic clicint_226_attr_shv_226_wd;
  logic clicint_226_attr_shv_226_we;
  logic [1:0] clicint_226_attr_trig_226_qs;
  logic [1:0] clicint_226_attr_trig_226_wd;
  logic clicint_226_attr_trig_226_we;
  logic [1:0] clicint_226_attr_mode_226_qs;
  logic [1:0] clicint_226_attr_mode_226_wd;
  logic clicint_226_attr_mode_226_we;
  logic [7:0] clicint_226_ctl_226_qs;
  logic [7:0] clicint_226_ctl_226_wd;
  logic clicint_226_ctl_226_we;
  logic clicint_227_ip_227_qs;
  logic clicint_227_ip_227_wd;
  logic clicint_227_ip_227_we;
  logic clicint_227_ie_227_qs;
  logic clicint_227_ie_227_wd;
  logic clicint_227_ie_227_we;
  logic clicint_227_attr_shv_227_qs;
  logic clicint_227_attr_shv_227_wd;
  logic clicint_227_attr_shv_227_we;
  logic [1:0] clicint_227_attr_trig_227_qs;
  logic [1:0] clicint_227_attr_trig_227_wd;
  logic clicint_227_attr_trig_227_we;
  logic [1:0] clicint_227_attr_mode_227_qs;
  logic [1:0] clicint_227_attr_mode_227_wd;
  logic clicint_227_attr_mode_227_we;
  logic [7:0] clicint_227_ctl_227_qs;
  logic [7:0] clicint_227_ctl_227_wd;
  logic clicint_227_ctl_227_we;
  logic clicint_228_ip_228_qs;
  logic clicint_228_ip_228_wd;
  logic clicint_228_ip_228_we;
  logic clicint_228_ie_228_qs;
  logic clicint_228_ie_228_wd;
  logic clicint_228_ie_228_we;
  logic clicint_228_attr_shv_228_qs;
  logic clicint_228_attr_shv_228_wd;
  logic clicint_228_attr_shv_228_we;
  logic [1:0] clicint_228_attr_trig_228_qs;
  logic [1:0] clicint_228_attr_trig_228_wd;
  logic clicint_228_attr_trig_228_we;
  logic [1:0] clicint_228_attr_mode_228_qs;
  logic [1:0] clicint_228_attr_mode_228_wd;
  logic clicint_228_attr_mode_228_we;
  logic [7:0] clicint_228_ctl_228_qs;
  logic [7:0] clicint_228_ctl_228_wd;
  logic clicint_228_ctl_228_we;
  logic clicint_229_ip_229_qs;
  logic clicint_229_ip_229_wd;
  logic clicint_229_ip_229_we;
  logic clicint_229_ie_229_qs;
  logic clicint_229_ie_229_wd;
  logic clicint_229_ie_229_we;
  logic clicint_229_attr_shv_229_qs;
  logic clicint_229_attr_shv_229_wd;
  logic clicint_229_attr_shv_229_we;
  logic [1:0] clicint_229_attr_trig_229_qs;
  logic [1:0] clicint_229_attr_trig_229_wd;
  logic clicint_229_attr_trig_229_we;
  logic [1:0] clicint_229_attr_mode_229_qs;
  logic [1:0] clicint_229_attr_mode_229_wd;
  logic clicint_229_attr_mode_229_we;
  logic [7:0] clicint_229_ctl_229_qs;
  logic [7:0] clicint_229_ctl_229_wd;
  logic clicint_229_ctl_229_we;
  logic clicint_230_ip_230_qs;
  logic clicint_230_ip_230_wd;
  logic clicint_230_ip_230_we;
  logic clicint_230_ie_230_qs;
  logic clicint_230_ie_230_wd;
  logic clicint_230_ie_230_we;
  logic clicint_230_attr_shv_230_qs;
  logic clicint_230_attr_shv_230_wd;
  logic clicint_230_attr_shv_230_we;
  logic [1:0] clicint_230_attr_trig_230_qs;
  logic [1:0] clicint_230_attr_trig_230_wd;
  logic clicint_230_attr_trig_230_we;
  logic [1:0] clicint_230_attr_mode_230_qs;
  logic [1:0] clicint_230_attr_mode_230_wd;
  logic clicint_230_attr_mode_230_we;
  logic [7:0] clicint_230_ctl_230_qs;
  logic [7:0] clicint_230_ctl_230_wd;
  logic clicint_230_ctl_230_we;
  logic clicint_231_ip_231_qs;
  logic clicint_231_ip_231_wd;
  logic clicint_231_ip_231_we;
  logic clicint_231_ie_231_qs;
  logic clicint_231_ie_231_wd;
  logic clicint_231_ie_231_we;
  logic clicint_231_attr_shv_231_qs;
  logic clicint_231_attr_shv_231_wd;
  logic clicint_231_attr_shv_231_we;
  logic [1:0] clicint_231_attr_trig_231_qs;
  logic [1:0] clicint_231_attr_trig_231_wd;
  logic clicint_231_attr_trig_231_we;
  logic [1:0] clicint_231_attr_mode_231_qs;
  logic [1:0] clicint_231_attr_mode_231_wd;
  logic clicint_231_attr_mode_231_we;
  logic [7:0] clicint_231_ctl_231_qs;
  logic [7:0] clicint_231_ctl_231_wd;
  logic clicint_231_ctl_231_we;
  logic clicint_232_ip_232_qs;
  logic clicint_232_ip_232_wd;
  logic clicint_232_ip_232_we;
  logic clicint_232_ie_232_qs;
  logic clicint_232_ie_232_wd;
  logic clicint_232_ie_232_we;
  logic clicint_232_attr_shv_232_qs;
  logic clicint_232_attr_shv_232_wd;
  logic clicint_232_attr_shv_232_we;
  logic [1:0] clicint_232_attr_trig_232_qs;
  logic [1:0] clicint_232_attr_trig_232_wd;
  logic clicint_232_attr_trig_232_we;
  logic [1:0] clicint_232_attr_mode_232_qs;
  logic [1:0] clicint_232_attr_mode_232_wd;
  logic clicint_232_attr_mode_232_we;
  logic [7:0] clicint_232_ctl_232_qs;
  logic [7:0] clicint_232_ctl_232_wd;
  logic clicint_232_ctl_232_we;
  logic clicint_233_ip_233_qs;
  logic clicint_233_ip_233_wd;
  logic clicint_233_ip_233_we;
  logic clicint_233_ie_233_qs;
  logic clicint_233_ie_233_wd;
  logic clicint_233_ie_233_we;
  logic clicint_233_attr_shv_233_qs;
  logic clicint_233_attr_shv_233_wd;
  logic clicint_233_attr_shv_233_we;
  logic [1:0] clicint_233_attr_trig_233_qs;
  logic [1:0] clicint_233_attr_trig_233_wd;
  logic clicint_233_attr_trig_233_we;
  logic [1:0] clicint_233_attr_mode_233_qs;
  logic [1:0] clicint_233_attr_mode_233_wd;
  logic clicint_233_attr_mode_233_we;
  logic [7:0] clicint_233_ctl_233_qs;
  logic [7:0] clicint_233_ctl_233_wd;
  logic clicint_233_ctl_233_we;
  logic clicint_234_ip_234_qs;
  logic clicint_234_ip_234_wd;
  logic clicint_234_ip_234_we;
  logic clicint_234_ie_234_qs;
  logic clicint_234_ie_234_wd;
  logic clicint_234_ie_234_we;
  logic clicint_234_attr_shv_234_qs;
  logic clicint_234_attr_shv_234_wd;
  logic clicint_234_attr_shv_234_we;
  logic [1:0] clicint_234_attr_trig_234_qs;
  logic [1:0] clicint_234_attr_trig_234_wd;
  logic clicint_234_attr_trig_234_we;
  logic [1:0] clicint_234_attr_mode_234_qs;
  logic [1:0] clicint_234_attr_mode_234_wd;
  logic clicint_234_attr_mode_234_we;
  logic [7:0] clicint_234_ctl_234_qs;
  logic [7:0] clicint_234_ctl_234_wd;
  logic clicint_234_ctl_234_we;
  logic clicint_235_ip_235_qs;
  logic clicint_235_ip_235_wd;
  logic clicint_235_ip_235_we;
  logic clicint_235_ie_235_qs;
  logic clicint_235_ie_235_wd;
  logic clicint_235_ie_235_we;
  logic clicint_235_attr_shv_235_qs;
  logic clicint_235_attr_shv_235_wd;
  logic clicint_235_attr_shv_235_we;
  logic [1:0] clicint_235_attr_trig_235_qs;
  logic [1:0] clicint_235_attr_trig_235_wd;
  logic clicint_235_attr_trig_235_we;
  logic [1:0] clicint_235_attr_mode_235_qs;
  logic [1:0] clicint_235_attr_mode_235_wd;
  logic clicint_235_attr_mode_235_we;
  logic [7:0] clicint_235_ctl_235_qs;
  logic [7:0] clicint_235_ctl_235_wd;
  logic clicint_235_ctl_235_we;
  logic clicint_236_ip_236_qs;
  logic clicint_236_ip_236_wd;
  logic clicint_236_ip_236_we;
  logic clicint_236_ie_236_qs;
  logic clicint_236_ie_236_wd;
  logic clicint_236_ie_236_we;
  logic clicint_236_attr_shv_236_qs;
  logic clicint_236_attr_shv_236_wd;
  logic clicint_236_attr_shv_236_we;
  logic [1:0] clicint_236_attr_trig_236_qs;
  logic [1:0] clicint_236_attr_trig_236_wd;
  logic clicint_236_attr_trig_236_we;
  logic [1:0] clicint_236_attr_mode_236_qs;
  logic [1:0] clicint_236_attr_mode_236_wd;
  logic clicint_236_attr_mode_236_we;
  logic [7:0] clicint_236_ctl_236_qs;
  logic [7:0] clicint_236_ctl_236_wd;
  logic clicint_236_ctl_236_we;
  logic clicint_237_ip_237_qs;
  logic clicint_237_ip_237_wd;
  logic clicint_237_ip_237_we;
  logic clicint_237_ie_237_qs;
  logic clicint_237_ie_237_wd;
  logic clicint_237_ie_237_we;
  logic clicint_237_attr_shv_237_qs;
  logic clicint_237_attr_shv_237_wd;
  logic clicint_237_attr_shv_237_we;
  logic [1:0] clicint_237_attr_trig_237_qs;
  logic [1:0] clicint_237_attr_trig_237_wd;
  logic clicint_237_attr_trig_237_we;
  logic [1:0] clicint_237_attr_mode_237_qs;
  logic [1:0] clicint_237_attr_mode_237_wd;
  logic clicint_237_attr_mode_237_we;
  logic [7:0] clicint_237_ctl_237_qs;
  logic [7:0] clicint_237_ctl_237_wd;
  logic clicint_237_ctl_237_we;
  logic clicint_238_ip_238_qs;
  logic clicint_238_ip_238_wd;
  logic clicint_238_ip_238_we;
  logic clicint_238_ie_238_qs;
  logic clicint_238_ie_238_wd;
  logic clicint_238_ie_238_we;
  logic clicint_238_attr_shv_238_qs;
  logic clicint_238_attr_shv_238_wd;
  logic clicint_238_attr_shv_238_we;
  logic [1:0] clicint_238_attr_trig_238_qs;
  logic [1:0] clicint_238_attr_trig_238_wd;
  logic clicint_238_attr_trig_238_we;
  logic [1:0] clicint_238_attr_mode_238_qs;
  logic [1:0] clicint_238_attr_mode_238_wd;
  logic clicint_238_attr_mode_238_we;
  logic [7:0] clicint_238_ctl_238_qs;
  logic [7:0] clicint_238_ctl_238_wd;
  logic clicint_238_ctl_238_we;
  logic clicint_239_ip_239_qs;
  logic clicint_239_ip_239_wd;
  logic clicint_239_ip_239_we;
  logic clicint_239_ie_239_qs;
  logic clicint_239_ie_239_wd;
  logic clicint_239_ie_239_we;
  logic clicint_239_attr_shv_239_qs;
  logic clicint_239_attr_shv_239_wd;
  logic clicint_239_attr_shv_239_we;
  logic [1:0] clicint_239_attr_trig_239_qs;
  logic [1:0] clicint_239_attr_trig_239_wd;
  logic clicint_239_attr_trig_239_we;
  logic [1:0] clicint_239_attr_mode_239_qs;
  logic [1:0] clicint_239_attr_mode_239_wd;
  logic clicint_239_attr_mode_239_we;
  logic [7:0] clicint_239_ctl_239_qs;
  logic [7:0] clicint_239_ctl_239_wd;
  logic clicint_239_ctl_239_we;
  logic clicint_240_ip_240_qs;
  logic clicint_240_ip_240_wd;
  logic clicint_240_ip_240_we;
  logic clicint_240_ie_240_qs;
  logic clicint_240_ie_240_wd;
  logic clicint_240_ie_240_we;
  logic clicint_240_attr_shv_240_qs;
  logic clicint_240_attr_shv_240_wd;
  logic clicint_240_attr_shv_240_we;
  logic [1:0] clicint_240_attr_trig_240_qs;
  logic [1:0] clicint_240_attr_trig_240_wd;
  logic clicint_240_attr_trig_240_we;
  logic [1:0] clicint_240_attr_mode_240_qs;
  logic [1:0] clicint_240_attr_mode_240_wd;
  logic clicint_240_attr_mode_240_we;
  logic [7:0] clicint_240_ctl_240_qs;
  logic [7:0] clicint_240_ctl_240_wd;
  logic clicint_240_ctl_240_we;
  logic clicint_241_ip_241_qs;
  logic clicint_241_ip_241_wd;
  logic clicint_241_ip_241_we;
  logic clicint_241_ie_241_qs;
  logic clicint_241_ie_241_wd;
  logic clicint_241_ie_241_we;
  logic clicint_241_attr_shv_241_qs;
  logic clicint_241_attr_shv_241_wd;
  logic clicint_241_attr_shv_241_we;
  logic [1:0] clicint_241_attr_trig_241_qs;
  logic [1:0] clicint_241_attr_trig_241_wd;
  logic clicint_241_attr_trig_241_we;
  logic [1:0] clicint_241_attr_mode_241_qs;
  logic [1:0] clicint_241_attr_mode_241_wd;
  logic clicint_241_attr_mode_241_we;
  logic [7:0] clicint_241_ctl_241_qs;
  logic [7:0] clicint_241_ctl_241_wd;
  logic clicint_241_ctl_241_we;
  logic clicint_242_ip_242_qs;
  logic clicint_242_ip_242_wd;
  logic clicint_242_ip_242_we;
  logic clicint_242_ie_242_qs;
  logic clicint_242_ie_242_wd;
  logic clicint_242_ie_242_we;
  logic clicint_242_attr_shv_242_qs;
  logic clicint_242_attr_shv_242_wd;
  logic clicint_242_attr_shv_242_we;
  logic [1:0] clicint_242_attr_trig_242_qs;
  logic [1:0] clicint_242_attr_trig_242_wd;
  logic clicint_242_attr_trig_242_we;
  logic [1:0] clicint_242_attr_mode_242_qs;
  logic [1:0] clicint_242_attr_mode_242_wd;
  logic clicint_242_attr_mode_242_we;
  logic [7:0] clicint_242_ctl_242_qs;
  logic [7:0] clicint_242_ctl_242_wd;
  logic clicint_242_ctl_242_we;
  logic clicint_243_ip_243_qs;
  logic clicint_243_ip_243_wd;
  logic clicint_243_ip_243_we;
  logic clicint_243_ie_243_qs;
  logic clicint_243_ie_243_wd;
  logic clicint_243_ie_243_we;
  logic clicint_243_attr_shv_243_qs;
  logic clicint_243_attr_shv_243_wd;
  logic clicint_243_attr_shv_243_we;
  logic [1:0] clicint_243_attr_trig_243_qs;
  logic [1:0] clicint_243_attr_trig_243_wd;
  logic clicint_243_attr_trig_243_we;
  logic [1:0] clicint_243_attr_mode_243_qs;
  logic [1:0] clicint_243_attr_mode_243_wd;
  logic clicint_243_attr_mode_243_we;
  logic [7:0] clicint_243_ctl_243_qs;
  logic [7:0] clicint_243_ctl_243_wd;
  logic clicint_243_ctl_243_we;
  logic clicint_244_ip_244_qs;
  logic clicint_244_ip_244_wd;
  logic clicint_244_ip_244_we;
  logic clicint_244_ie_244_qs;
  logic clicint_244_ie_244_wd;
  logic clicint_244_ie_244_we;
  logic clicint_244_attr_shv_244_qs;
  logic clicint_244_attr_shv_244_wd;
  logic clicint_244_attr_shv_244_we;
  logic [1:0] clicint_244_attr_trig_244_qs;
  logic [1:0] clicint_244_attr_trig_244_wd;
  logic clicint_244_attr_trig_244_we;
  logic [1:0] clicint_244_attr_mode_244_qs;
  logic [1:0] clicint_244_attr_mode_244_wd;
  logic clicint_244_attr_mode_244_we;
  logic [7:0] clicint_244_ctl_244_qs;
  logic [7:0] clicint_244_ctl_244_wd;
  logic clicint_244_ctl_244_we;
  logic clicint_245_ip_245_qs;
  logic clicint_245_ip_245_wd;
  logic clicint_245_ip_245_we;
  logic clicint_245_ie_245_qs;
  logic clicint_245_ie_245_wd;
  logic clicint_245_ie_245_we;
  logic clicint_245_attr_shv_245_qs;
  logic clicint_245_attr_shv_245_wd;
  logic clicint_245_attr_shv_245_we;
  logic [1:0] clicint_245_attr_trig_245_qs;
  logic [1:0] clicint_245_attr_trig_245_wd;
  logic clicint_245_attr_trig_245_we;
  logic [1:0] clicint_245_attr_mode_245_qs;
  logic [1:0] clicint_245_attr_mode_245_wd;
  logic clicint_245_attr_mode_245_we;
  logic [7:0] clicint_245_ctl_245_qs;
  logic [7:0] clicint_245_ctl_245_wd;
  logic clicint_245_ctl_245_we;
  logic clicint_246_ip_246_qs;
  logic clicint_246_ip_246_wd;
  logic clicint_246_ip_246_we;
  logic clicint_246_ie_246_qs;
  logic clicint_246_ie_246_wd;
  logic clicint_246_ie_246_we;
  logic clicint_246_attr_shv_246_qs;
  logic clicint_246_attr_shv_246_wd;
  logic clicint_246_attr_shv_246_we;
  logic [1:0] clicint_246_attr_trig_246_qs;
  logic [1:0] clicint_246_attr_trig_246_wd;
  logic clicint_246_attr_trig_246_we;
  logic [1:0] clicint_246_attr_mode_246_qs;
  logic [1:0] clicint_246_attr_mode_246_wd;
  logic clicint_246_attr_mode_246_we;
  logic [7:0] clicint_246_ctl_246_qs;
  logic [7:0] clicint_246_ctl_246_wd;
  logic clicint_246_ctl_246_we;
  logic clicint_247_ip_247_qs;
  logic clicint_247_ip_247_wd;
  logic clicint_247_ip_247_we;
  logic clicint_247_ie_247_qs;
  logic clicint_247_ie_247_wd;
  logic clicint_247_ie_247_we;
  logic clicint_247_attr_shv_247_qs;
  logic clicint_247_attr_shv_247_wd;
  logic clicint_247_attr_shv_247_we;
  logic [1:0] clicint_247_attr_trig_247_qs;
  logic [1:0] clicint_247_attr_trig_247_wd;
  logic clicint_247_attr_trig_247_we;
  logic [1:0] clicint_247_attr_mode_247_qs;
  logic [1:0] clicint_247_attr_mode_247_wd;
  logic clicint_247_attr_mode_247_we;
  logic [7:0] clicint_247_ctl_247_qs;
  logic [7:0] clicint_247_ctl_247_wd;
  logic clicint_247_ctl_247_we;
  logic clicint_248_ip_248_qs;
  logic clicint_248_ip_248_wd;
  logic clicint_248_ip_248_we;
  logic clicint_248_ie_248_qs;
  logic clicint_248_ie_248_wd;
  logic clicint_248_ie_248_we;
  logic clicint_248_attr_shv_248_qs;
  logic clicint_248_attr_shv_248_wd;
  logic clicint_248_attr_shv_248_we;
  logic [1:0] clicint_248_attr_trig_248_qs;
  logic [1:0] clicint_248_attr_trig_248_wd;
  logic clicint_248_attr_trig_248_we;
  logic [1:0] clicint_248_attr_mode_248_qs;
  logic [1:0] clicint_248_attr_mode_248_wd;
  logic clicint_248_attr_mode_248_we;
  logic [7:0] clicint_248_ctl_248_qs;
  logic [7:0] clicint_248_ctl_248_wd;
  logic clicint_248_ctl_248_we;
  logic clicint_249_ip_249_qs;
  logic clicint_249_ip_249_wd;
  logic clicint_249_ip_249_we;
  logic clicint_249_ie_249_qs;
  logic clicint_249_ie_249_wd;
  logic clicint_249_ie_249_we;
  logic clicint_249_attr_shv_249_qs;
  logic clicint_249_attr_shv_249_wd;
  logic clicint_249_attr_shv_249_we;
  logic [1:0] clicint_249_attr_trig_249_qs;
  logic [1:0] clicint_249_attr_trig_249_wd;
  logic clicint_249_attr_trig_249_we;
  logic [1:0] clicint_249_attr_mode_249_qs;
  logic [1:0] clicint_249_attr_mode_249_wd;
  logic clicint_249_attr_mode_249_we;
  logic [7:0] clicint_249_ctl_249_qs;
  logic [7:0] clicint_249_ctl_249_wd;
  logic clicint_249_ctl_249_we;
  logic clicint_250_ip_250_qs;
  logic clicint_250_ip_250_wd;
  logic clicint_250_ip_250_we;
  logic clicint_250_ie_250_qs;
  logic clicint_250_ie_250_wd;
  logic clicint_250_ie_250_we;
  logic clicint_250_attr_shv_250_qs;
  logic clicint_250_attr_shv_250_wd;
  logic clicint_250_attr_shv_250_we;
  logic [1:0] clicint_250_attr_trig_250_qs;
  logic [1:0] clicint_250_attr_trig_250_wd;
  logic clicint_250_attr_trig_250_we;
  logic [1:0] clicint_250_attr_mode_250_qs;
  logic [1:0] clicint_250_attr_mode_250_wd;
  logic clicint_250_attr_mode_250_we;
  logic [7:0] clicint_250_ctl_250_qs;
  logic [7:0] clicint_250_ctl_250_wd;
  logic clicint_250_ctl_250_we;
  logic clicint_251_ip_251_qs;
  logic clicint_251_ip_251_wd;
  logic clicint_251_ip_251_we;
  logic clicint_251_ie_251_qs;
  logic clicint_251_ie_251_wd;
  logic clicint_251_ie_251_we;
  logic clicint_251_attr_shv_251_qs;
  logic clicint_251_attr_shv_251_wd;
  logic clicint_251_attr_shv_251_we;
  logic [1:0] clicint_251_attr_trig_251_qs;
  logic [1:0] clicint_251_attr_trig_251_wd;
  logic clicint_251_attr_trig_251_we;
  logic [1:0] clicint_251_attr_mode_251_qs;
  logic [1:0] clicint_251_attr_mode_251_wd;
  logic clicint_251_attr_mode_251_we;
  logic [7:0] clicint_251_ctl_251_qs;
  logic [7:0] clicint_251_ctl_251_wd;
  logic clicint_251_ctl_251_we;
  logic clicint_252_ip_252_qs;
  logic clicint_252_ip_252_wd;
  logic clicint_252_ip_252_we;
  logic clicint_252_ie_252_qs;
  logic clicint_252_ie_252_wd;
  logic clicint_252_ie_252_we;
  logic clicint_252_attr_shv_252_qs;
  logic clicint_252_attr_shv_252_wd;
  logic clicint_252_attr_shv_252_we;
  logic [1:0] clicint_252_attr_trig_252_qs;
  logic [1:0] clicint_252_attr_trig_252_wd;
  logic clicint_252_attr_trig_252_we;
  logic [1:0] clicint_252_attr_mode_252_qs;
  logic [1:0] clicint_252_attr_mode_252_wd;
  logic clicint_252_attr_mode_252_we;
  logic [7:0] clicint_252_ctl_252_qs;
  logic [7:0] clicint_252_ctl_252_wd;
  logic clicint_252_ctl_252_we;
  logic clicint_253_ip_253_qs;
  logic clicint_253_ip_253_wd;
  logic clicint_253_ip_253_we;
  logic clicint_253_ie_253_qs;
  logic clicint_253_ie_253_wd;
  logic clicint_253_ie_253_we;
  logic clicint_253_attr_shv_253_qs;
  logic clicint_253_attr_shv_253_wd;
  logic clicint_253_attr_shv_253_we;
  logic [1:0] clicint_253_attr_trig_253_qs;
  logic [1:0] clicint_253_attr_trig_253_wd;
  logic clicint_253_attr_trig_253_we;
  logic [1:0] clicint_253_attr_mode_253_qs;
  logic [1:0] clicint_253_attr_mode_253_wd;
  logic clicint_253_attr_mode_253_we;
  logic [7:0] clicint_253_ctl_253_qs;
  logic [7:0] clicint_253_ctl_253_wd;
  logic clicint_253_ctl_253_we;
  logic clicint_254_ip_254_qs;
  logic clicint_254_ip_254_wd;
  logic clicint_254_ip_254_we;
  logic clicint_254_ie_254_qs;
  logic clicint_254_ie_254_wd;
  logic clicint_254_ie_254_we;
  logic clicint_254_attr_shv_254_qs;
  logic clicint_254_attr_shv_254_wd;
  logic clicint_254_attr_shv_254_we;
  logic [1:0] clicint_254_attr_trig_254_qs;
  logic [1:0] clicint_254_attr_trig_254_wd;
  logic clicint_254_attr_trig_254_we;
  logic [1:0] clicint_254_attr_mode_254_qs;
  logic [1:0] clicint_254_attr_mode_254_wd;
  logic clicint_254_attr_mode_254_we;
  logic [7:0] clicint_254_ctl_254_qs;
  logic [7:0] clicint_254_ctl_254_wd;
  logic clicint_254_ctl_254_we;
  logic clicint_255_ip_255_qs;
  logic clicint_255_ip_255_wd;
  logic clicint_255_ip_255_we;
  logic clicint_255_ie_255_qs;
  logic clicint_255_ie_255_wd;
  logic clicint_255_ie_255_we;
  logic clicint_255_attr_shv_255_qs;
  logic clicint_255_attr_shv_255_wd;
  logic clicint_255_attr_shv_255_we;
  logic [1:0] clicint_255_attr_trig_255_qs;
  logic [1:0] clicint_255_attr_trig_255_wd;
  logic clicint_255_attr_trig_255_we;
  logic [1:0] clicint_255_attr_mode_255_qs;
  logic [1:0] clicint_255_attr_mode_255_wd;
  logic clicint_255_attr_mode_255_we;
  logic [7:0] clicint_255_ctl_255_qs;
  logic [7:0] clicint_255_ctl_255_wd;
  logic clicint_255_ctl_255_we;

  // Register instances
  // R[mcliccfg]: V(False)

  //   F[mnlbits]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_mcliccfg_mnlbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_mnlbits_we),
    .wd     (mcliccfg_mnlbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.mnlbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_mnlbits_qs)
  );


  //   F[nmbits]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_mcliccfg_nmbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_nmbits_we),
    .wd     (mcliccfg_nmbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.nmbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_nmbits_qs)
  );


  //   F[snlbits]: 19:16
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_mcliccfg_snlbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_snlbits_we),
    .wd     (mcliccfg_snlbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.snlbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_snlbits_qs)
  );


  //   F[unlbits]: 27:24
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_mcliccfg_unlbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_unlbits_we),
    .wd     (mcliccfg_unlbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.unlbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_unlbits_qs)
  );


  //   F[reserved]: 31:28
  // constant-only read
  assign mcliccfg_reserved_qs = 4'h0;



  // Subregister 0 of Multireg clicint
  // R[clicint_0]: V(False)

  // F[ip_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_0_ip_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_0_ip_0_we),
    .wd     (clicint_0_ip_0_wd),

    // from internal hardware
    .de     (hw2reg.clicint[0].ip.de),
    .d      (hw2reg.clicint[0].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[0].ip.q ),

    // to register interface (read)
    .qs     (clicint_0_ip_0_qs)
  );


  // F[ie_0]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_0_ie_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_0_ie_0_we),
    .wd     (clicint_0_ie_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[0].ie.q ),

    // to register interface (read)
    .qs     (clicint_0_ie_0_qs)
  );


  // F[attr_shv_0]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_0_attr_shv_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_0_attr_shv_0_we),
    .wd     (clicint_0_attr_shv_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[0].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_0_attr_shv_0_qs)
  );


  // F[attr_trig_0]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_0_attr_trig_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_0_attr_trig_0_we),
    .wd     (clicint_0_attr_trig_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[0].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_0_attr_trig_0_qs)
  );


  // F[attr_mode_0]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_0_attr_mode_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_0_attr_mode_0_we),
    .wd     (clicint_0_attr_mode_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[0].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_0_attr_mode_0_qs)
  );


  // F[ctl_0]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_0_ctl_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_0_ctl_0_we),
    .wd     (clicint_0_ctl_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[0].ctl.q ),

    // to register interface (read)
    .qs     (clicint_0_ctl_0_qs)
  );


  // Subregister 1 of Multireg clicint
  // R[clicint_1]: V(False)

  // F[ip_1]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_1_ip_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_1_ip_1_we),
    .wd     (clicint_1_ip_1_wd),

    // from internal hardware
    .de     (hw2reg.clicint[1].ip.de),
    .d      (hw2reg.clicint[1].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[1].ip.q ),

    // to register interface (read)
    .qs     (clicint_1_ip_1_qs)
  );


  // F[ie_1]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_1_ie_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_1_ie_1_we),
    .wd     (clicint_1_ie_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[1].ie.q ),

    // to register interface (read)
    .qs     (clicint_1_ie_1_qs)
  );


  // F[attr_shv_1]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_1_attr_shv_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_1_attr_shv_1_we),
    .wd     (clicint_1_attr_shv_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[1].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_1_attr_shv_1_qs)
  );


  // F[attr_trig_1]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_1_attr_trig_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_1_attr_trig_1_we),
    .wd     (clicint_1_attr_trig_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[1].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_1_attr_trig_1_qs)
  );


  // F[attr_mode_1]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_1_attr_mode_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_1_attr_mode_1_we),
    .wd     (clicint_1_attr_mode_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[1].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_1_attr_mode_1_qs)
  );


  // F[ctl_1]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_1_ctl_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_1_ctl_1_we),
    .wd     (clicint_1_ctl_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[1].ctl.q ),

    // to register interface (read)
    .qs     (clicint_1_ctl_1_qs)
  );


  // Subregister 2 of Multireg clicint
  // R[clicint_2]: V(False)

  // F[ip_2]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_2_ip_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_2_ip_2_we),
    .wd     (clicint_2_ip_2_wd),

    // from internal hardware
    .de     (hw2reg.clicint[2].ip.de),
    .d      (hw2reg.clicint[2].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[2].ip.q ),

    // to register interface (read)
    .qs     (clicint_2_ip_2_qs)
  );


  // F[ie_2]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_2_ie_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_2_ie_2_we),
    .wd     (clicint_2_ie_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[2].ie.q ),

    // to register interface (read)
    .qs     (clicint_2_ie_2_qs)
  );


  // F[attr_shv_2]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_2_attr_shv_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_2_attr_shv_2_we),
    .wd     (clicint_2_attr_shv_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[2].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_2_attr_shv_2_qs)
  );


  // F[attr_trig_2]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_2_attr_trig_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_2_attr_trig_2_we),
    .wd     (clicint_2_attr_trig_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[2].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_2_attr_trig_2_qs)
  );


  // F[attr_mode_2]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_2_attr_mode_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_2_attr_mode_2_we),
    .wd     (clicint_2_attr_mode_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[2].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_2_attr_mode_2_qs)
  );


  // F[ctl_2]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_2_ctl_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_2_ctl_2_we),
    .wd     (clicint_2_ctl_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[2].ctl.q ),

    // to register interface (read)
    .qs     (clicint_2_ctl_2_qs)
  );


  // Subregister 3 of Multireg clicint
  // R[clicint_3]: V(False)

  // F[ip_3]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_3_ip_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_3_ip_3_we),
    .wd     (clicint_3_ip_3_wd),

    // from internal hardware
    .de     (hw2reg.clicint[3].ip.de),
    .d      (hw2reg.clicint[3].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[3].ip.q ),

    // to register interface (read)
    .qs     (clicint_3_ip_3_qs)
  );


  // F[ie_3]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_3_ie_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_3_ie_3_we),
    .wd     (clicint_3_ie_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[3].ie.q ),

    // to register interface (read)
    .qs     (clicint_3_ie_3_qs)
  );


  // F[attr_shv_3]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_3_attr_shv_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_3_attr_shv_3_we),
    .wd     (clicint_3_attr_shv_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[3].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_3_attr_shv_3_qs)
  );


  // F[attr_trig_3]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_3_attr_trig_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_3_attr_trig_3_we),
    .wd     (clicint_3_attr_trig_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[3].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_3_attr_trig_3_qs)
  );


  // F[attr_mode_3]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_3_attr_mode_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_3_attr_mode_3_we),
    .wd     (clicint_3_attr_mode_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[3].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_3_attr_mode_3_qs)
  );


  // F[ctl_3]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_3_ctl_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_3_ctl_3_we),
    .wd     (clicint_3_ctl_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[3].ctl.q ),

    // to register interface (read)
    .qs     (clicint_3_ctl_3_qs)
  );


  // Subregister 4 of Multireg clicint
  // R[clicint_4]: V(False)

  // F[ip_4]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_4_ip_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_4_ip_4_we),
    .wd     (clicint_4_ip_4_wd),

    // from internal hardware
    .de     (hw2reg.clicint[4].ip.de),
    .d      (hw2reg.clicint[4].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[4].ip.q ),

    // to register interface (read)
    .qs     (clicint_4_ip_4_qs)
  );


  // F[ie_4]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_4_ie_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_4_ie_4_we),
    .wd     (clicint_4_ie_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[4].ie.q ),

    // to register interface (read)
    .qs     (clicint_4_ie_4_qs)
  );


  // F[attr_shv_4]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_4_attr_shv_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_4_attr_shv_4_we),
    .wd     (clicint_4_attr_shv_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[4].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_4_attr_shv_4_qs)
  );


  // F[attr_trig_4]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_4_attr_trig_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_4_attr_trig_4_we),
    .wd     (clicint_4_attr_trig_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[4].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_4_attr_trig_4_qs)
  );


  // F[attr_mode_4]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_4_attr_mode_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_4_attr_mode_4_we),
    .wd     (clicint_4_attr_mode_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[4].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_4_attr_mode_4_qs)
  );


  // F[ctl_4]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_4_ctl_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_4_ctl_4_we),
    .wd     (clicint_4_ctl_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[4].ctl.q ),

    // to register interface (read)
    .qs     (clicint_4_ctl_4_qs)
  );


  // Subregister 5 of Multireg clicint
  // R[clicint_5]: V(False)

  // F[ip_5]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_5_ip_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_5_ip_5_we),
    .wd     (clicint_5_ip_5_wd),

    // from internal hardware
    .de     (hw2reg.clicint[5].ip.de),
    .d      (hw2reg.clicint[5].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[5].ip.q ),

    // to register interface (read)
    .qs     (clicint_5_ip_5_qs)
  );


  // F[ie_5]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_5_ie_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_5_ie_5_we),
    .wd     (clicint_5_ie_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[5].ie.q ),

    // to register interface (read)
    .qs     (clicint_5_ie_5_qs)
  );


  // F[attr_shv_5]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_5_attr_shv_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_5_attr_shv_5_we),
    .wd     (clicint_5_attr_shv_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[5].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_5_attr_shv_5_qs)
  );


  // F[attr_trig_5]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_5_attr_trig_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_5_attr_trig_5_we),
    .wd     (clicint_5_attr_trig_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[5].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_5_attr_trig_5_qs)
  );


  // F[attr_mode_5]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_5_attr_mode_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_5_attr_mode_5_we),
    .wd     (clicint_5_attr_mode_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[5].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_5_attr_mode_5_qs)
  );


  // F[ctl_5]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_5_ctl_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_5_ctl_5_we),
    .wd     (clicint_5_ctl_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[5].ctl.q ),

    // to register interface (read)
    .qs     (clicint_5_ctl_5_qs)
  );


  // Subregister 6 of Multireg clicint
  // R[clicint_6]: V(False)

  // F[ip_6]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_6_ip_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_6_ip_6_we),
    .wd     (clicint_6_ip_6_wd),

    // from internal hardware
    .de     (hw2reg.clicint[6].ip.de),
    .d      (hw2reg.clicint[6].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[6].ip.q ),

    // to register interface (read)
    .qs     (clicint_6_ip_6_qs)
  );


  // F[ie_6]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_6_ie_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_6_ie_6_we),
    .wd     (clicint_6_ie_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[6].ie.q ),

    // to register interface (read)
    .qs     (clicint_6_ie_6_qs)
  );


  // F[attr_shv_6]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_6_attr_shv_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_6_attr_shv_6_we),
    .wd     (clicint_6_attr_shv_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[6].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_6_attr_shv_6_qs)
  );


  // F[attr_trig_6]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_6_attr_trig_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_6_attr_trig_6_we),
    .wd     (clicint_6_attr_trig_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[6].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_6_attr_trig_6_qs)
  );


  // F[attr_mode_6]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_6_attr_mode_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_6_attr_mode_6_we),
    .wd     (clicint_6_attr_mode_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[6].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_6_attr_mode_6_qs)
  );


  // F[ctl_6]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_6_ctl_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_6_ctl_6_we),
    .wd     (clicint_6_ctl_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[6].ctl.q ),

    // to register interface (read)
    .qs     (clicint_6_ctl_6_qs)
  );


  // Subregister 7 of Multireg clicint
  // R[clicint_7]: V(False)

  // F[ip_7]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_7_ip_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_7_ip_7_we),
    .wd     (clicint_7_ip_7_wd),

    // from internal hardware
    .de     (hw2reg.clicint[7].ip.de),
    .d      (hw2reg.clicint[7].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[7].ip.q ),

    // to register interface (read)
    .qs     (clicint_7_ip_7_qs)
  );


  // F[ie_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_7_ie_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_7_ie_7_we),
    .wd     (clicint_7_ie_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[7].ie.q ),

    // to register interface (read)
    .qs     (clicint_7_ie_7_qs)
  );


  // F[attr_shv_7]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_7_attr_shv_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_7_attr_shv_7_we),
    .wd     (clicint_7_attr_shv_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[7].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_7_attr_shv_7_qs)
  );


  // F[attr_trig_7]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_7_attr_trig_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_7_attr_trig_7_we),
    .wd     (clicint_7_attr_trig_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[7].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_7_attr_trig_7_qs)
  );


  // F[attr_mode_7]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_7_attr_mode_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_7_attr_mode_7_we),
    .wd     (clicint_7_attr_mode_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[7].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_7_attr_mode_7_qs)
  );


  // F[ctl_7]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_7_ctl_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_7_ctl_7_we),
    .wd     (clicint_7_ctl_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[7].ctl.q ),

    // to register interface (read)
    .qs     (clicint_7_ctl_7_qs)
  );


  // Subregister 8 of Multireg clicint
  // R[clicint_8]: V(False)

  // F[ip_8]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_8_ip_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_8_ip_8_we),
    .wd     (clicint_8_ip_8_wd),

    // from internal hardware
    .de     (hw2reg.clicint[8].ip.de),
    .d      (hw2reg.clicint[8].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[8].ip.q ),

    // to register interface (read)
    .qs     (clicint_8_ip_8_qs)
  );


  // F[ie_8]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_8_ie_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_8_ie_8_we),
    .wd     (clicint_8_ie_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[8].ie.q ),

    // to register interface (read)
    .qs     (clicint_8_ie_8_qs)
  );


  // F[attr_shv_8]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_8_attr_shv_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_8_attr_shv_8_we),
    .wd     (clicint_8_attr_shv_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[8].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_8_attr_shv_8_qs)
  );


  // F[attr_trig_8]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_8_attr_trig_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_8_attr_trig_8_we),
    .wd     (clicint_8_attr_trig_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[8].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_8_attr_trig_8_qs)
  );


  // F[attr_mode_8]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_8_attr_mode_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_8_attr_mode_8_we),
    .wd     (clicint_8_attr_mode_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[8].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_8_attr_mode_8_qs)
  );


  // F[ctl_8]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_8_ctl_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_8_ctl_8_we),
    .wd     (clicint_8_ctl_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[8].ctl.q ),

    // to register interface (read)
    .qs     (clicint_8_ctl_8_qs)
  );


  // Subregister 9 of Multireg clicint
  // R[clicint_9]: V(False)

  // F[ip_9]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_9_ip_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_9_ip_9_we),
    .wd     (clicint_9_ip_9_wd),

    // from internal hardware
    .de     (hw2reg.clicint[9].ip.de),
    .d      (hw2reg.clicint[9].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[9].ip.q ),

    // to register interface (read)
    .qs     (clicint_9_ip_9_qs)
  );


  // F[ie_9]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_9_ie_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_9_ie_9_we),
    .wd     (clicint_9_ie_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[9].ie.q ),

    // to register interface (read)
    .qs     (clicint_9_ie_9_qs)
  );


  // F[attr_shv_9]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_9_attr_shv_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_9_attr_shv_9_we),
    .wd     (clicint_9_attr_shv_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[9].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_9_attr_shv_9_qs)
  );


  // F[attr_trig_9]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_9_attr_trig_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_9_attr_trig_9_we),
    .wd     (clicint_9_attr_trig_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[9].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_9_attr_trig_9_qs)
  );


  // F[attr_mode_9]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_9_attr_mode_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_9_attr_mode_9_we),
    .wd     (clicint_9_attr_mode_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[9].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_9_attr_mode_9_qs)
  );


  // F[ctl_9]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_9_ctl_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_9_ctl_9_we),
    .wd     (clicint_9_ctl_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[9].ctl.q ),

    // to register interface (read)
    .qs     (clicint_9_ctl_9_qs)
  );


  // Subregister 10 of Multireg clicint
  // R[clicint_10]: V(False)

  // F[ip_10]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_10_ip_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_10_ip_10_we),
    .wd     (clicint_10_ip_10_wd),

    // from internal hardware
    .de     (hw2reg.clicint[10].ip.de),
    .d      (hw2reg.clicint[10].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[10].ip.q ),

    // to register interface (read)
    .qs     (clicint_10_ip_10_qs)
  );


  // F[ie_10]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_10_ie_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_10_ie_10_we),
    .wd     (clicint_10_ie_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[10].ie.q ),

    // to register interface (read)
    .qs     (clicint_10_ie_10_qs)
  );


  // F[attr_shv_10]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_10_attr_shv_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_10_attr_shv_10_we),
    .wd     (clicint_10_attr_shv_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[10].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_10_attr_shv_10_qs)
  );


  // F[attr_trig_10]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_10_attr_trig_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_10_attr_trig_10_we),
    .wd     (clicint_10_attr_trig_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[10].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_10_attr_trig_10_qs)
  );


  // F[attr_mode_10]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_10_attr_mode_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_10_attr_mode_10_we),
    .wd     (clicint_10_attr_mode_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[10].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_10_attr_mode_10_qs)
  );


  // F[ctl_10]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_10_ctl_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_10_ctl_10_we),
    .wd     (clicint_10_ctl_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[10].ctl.q ),

    // to register interface (read)
    .qs     (clicint_10_ctl_10_qs)
  );


  // Subregister 11 of Multireg clicint
  // R[clicint_11]: V(False)

  // F[ip_11]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_11_ip_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_11_ip_11_we),
    .wd     (clicint_11_ip_11_wd),

    // from internal hardware
    .de     (hw2reg.clicint[11].ip.de),
    .d      (hw2reg.clicint[11].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[11].ip.q ),

    // to register interface (read)
    .qs     (clicint_11_ip_11_qs)
  );


  // F[ie_11]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_11_ie_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_11_ie_11_we),
    .wd     (clicint_11_ie_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[11].ie.q ),

    // to register interface (read)
    .qs     (clicint_11_ie_11_qs)
  );


  // F[attr_shv_11]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_11_attr_shv_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_11_attr_shv_11_we),
    .wd     (clicint_11_attr_shv_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[11].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_11_attr_shv_11_qs)
  );


  // F[attr_trig_11]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_11_attr_trig_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_11_attr_trig_11_we),
    .wd     (clicint_11_attr_trig_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[11].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_11_attr_trig_11_qs)
  );


  // F[attr_mode_11]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_11_attr_mode_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_11_attr_mode_11_we),
    .wd     (clicint_11_attr_mode_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[11].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_11_attr_mode_11_qs)
  );


  // F[ctl_11]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_11_ctl_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_11_ctl_11_we),
    .wd     (clicint_11_ctl_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[11].ctl.q ),

    // to register interface (read)
    .qs     (clicint_11_ctl_11_qs)
  );


  // Subregister 12 of Multireg clicint
  // R[clicint_12]: V(False)

  // F[ip_12]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_12_ip_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_12_ip_12_we),
    .wd     (clicint_12_ip_12_wd),

    // from internal hardware
    .de     (hw2reg.clicint[12].ip.de),
    .d      (hw2reg.clicint[12].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[12].ip.q ),

    // to register interface (read)
    .qs     (clicint_12_ip_12_qs)
  );


  // F[ie_12]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_12_ie_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_12_ie_12_we),
    .wd     (clicint_12_ie_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[12].ie.q ),

    // to register interface (read)
    .qs     (clicint_12_ie_12_qs)
  );


  // F[attr_shv_12]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_12_attr_shv_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_12_attr_shv_12_we),
    .wd     (clicint_12_attr_shv_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[12].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_12_attr_shv_12_qs)
  );


  // F[attr_trig_12]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_12_attr_trig_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_12_attr_trig_12_we),
    .wd     (clicint_12_attr_trig_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[12].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_12_attr_trig_12_qs)
  );


  // F[attr_mode_12]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_12_attr_mode_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_12_attr_mode_12_we),
    .wd     (clicint_12_attr_mode_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[12].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_12_attr_mode_12_qs)
  );


  // F[ctl_12]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_12_ctl_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_12_ctl_12_we),
    .wd     (clicint_12_ctl_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[12].ctl.q ),

    // to register interface (read)
    .qs     (clicint_12_ctl_12_qs)
  );


  // Subregister 13 of Multireg clicint
  // R[clicint_13]: V(False)

  // F[ip_13]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_13_ip_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_13_ip_13_we),
    .wd     (clicint_13_ip_13_wd),

    // from internal hardware
    .de     (hw2reg.clicint[13].ip.de),
    .d      (hw2reg.clicint[13].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[13].ip.q ),

    // to register interface (read)
    .qs     (clicint_13_ip_13_qs)
  );


  // F[ie_13]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_13_ie_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_13_ie_13_we),
    .wd     (clicint_13_ie_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[13].ie.q ),

    // to register interface (read)
    .qs     (clicint_13_ie_13_qs)
  );


  // F[attr_shv_13]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_13_attr_shv_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_13_attr_shv_13_we),
    .wd     (clicint_13_attr_shv_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[13].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_13_attr_shv_13_qs)
  );


  // F[attr_trig_13]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_13_attr_trig_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_13_attr_trig_13_we),
    .wd     (clicint_13_attr_trig_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[13].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_13_attr_trig_13_qs)
  );


  // F[attr_mode_13]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_13_attr_mode_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_13_attr_mode_13_we),
    .wd     (clicint_13_attr_mode_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[13].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_13_attr_mode_13_qs)
  );


  // F[ctl_13]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_13_ctl_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_13_ctl_13_we),
    .wd     (clicint_13_ctl_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[13].ctl.q ),

    // to register interface (read)
    .qs     (clicint_13_ctl_13_qs)
  );


  // Subregister 14 of Multireg clicint
  // R[clicint_14]: V(False)

  // F[ip_14]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_14_ip_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_14_ip_14_we),
    .wd     (clicint_14_ip_14_wd),

    // from internal hardware
    .de     (hw2reg.clicint[14].ip.de),
    .d      (hw2reg.clicint[14].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[14].ip.q ),

    // to register interface (read)
    .qs     (clicint_14_ip_14_qs)
  );


  // F[ie_14]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_14_ie_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_14_ie_14_we),
    .wd     (clicint_14_ie_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[14].ie.q ),

    // to register interface (read)
    .qs     (clicint_14_ie_14_qs)
  );


  // F[attr_shv_14]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_14_attr_shv_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_14_attr_shv_14_we),
    .wd     (clicint_14_attr_shv_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[14].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_14_attr_shv_14_qs)
  );


  // F[attr_trig_14]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_14_attr_trig_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_14_attr_trig_14_we),
    .wd     (clicint_14_attr_trig_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[14].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_14_attr_trig_14_qs)
  );


  // F[attr_mode_14]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_14_attr_mode_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_14_attr_mode_14_we),
    .wd     (clicint_14_attr_mode_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[14].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_14_attr_mode_14_qs)
  );


  // F[ctl_14]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_14_ctl_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_14_ctl_14_we),
    .wd     (clicint_14_ctl_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[14].ctl.q ),

    // to register interface (read)
    .qs     (clicint_14_ctl_14_qs)
  );


  // Subregister 15 of Multireg clicint
  // R[clicint_15]: V(False)

  // F[ip_15]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_15_ip_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_15_ip_15_we),
    .wd     (clicint_15_ip_15_wd),

    // from internal hardware
    .de     (hw2reg.clicint[15].ip.de),
    .d      (hw2reg.clicint[15].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[15].ip.q ),

    // to register interface (read)
    .qs     (clicint_15_ip_15_qs)
  );


  // F[ie_15]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_15_ie_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_15_ie_15_we),
    .wd     (clicint_15_ie_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[15].ie.q ),

    // to register interface (read)
    .qs     (clicint_15_ie_15_qs)
  );


  // F[attr_shv_15]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_15_attr_shv_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_15_attr_shv_15_we),
    .wd     (clicint_15_attr_shv_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[15].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_15_attr_shv_15_qs)
  );


  // F[attr_trig_15]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_15_attr_trig_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_15_attr_trig_15_we),
    .wd     (clicint_15_attr_trig_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[15].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_15_attr_trig_15_qs)
  );


  // F[attr_mode_15]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_15_attr_mode_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_15_attr_mode_15_we),
    .wd     (clicint_15_attr_mode_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[15].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_15_attr_mode_15_qs)
  );


  // F[ctl_15]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_15_ctl_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_15_ctl_15_we),
    .wd     (clicint_15_ctl_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[15].ctl.q ),

    // to register interface (read)
    .qs     (clicint_15_ctl_15_qs)
  );


  // Subregister 16 of Multireg clicint
  // R[clicint_16]: V(False)

  // F[ip_16]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_16_ip_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_16_ip_16_we),
    .wd     (clicint_16_ip_16_wd),

    // from internal hardware
    .de     (hw2reg.clicint[16].ip.de),
    .d      (hw2reg.clicint[16].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[16].ip.q ),

    // to register interface (read)
    .qs     (clicint_16_ip_16_qs)
  );


  // F[ie_16]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_16_ie_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_16_ie_16_we),
    .wd     (clicint_16_ie_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[16].ie.q ),

    // to register interface (read)
    .qs     (clicint_16_ie_16_qs)
  );


  // F[attr_shv_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_16_attr_shv_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_16_attr_shv_16_we),
    .wd     (clicint_16_attr_shv_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[16].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_16_attr_shv_16_qs)
  );


  // F[attr_trig_16]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_16_attr_trig_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_16_attr_trig_16_we),
    .wd     (clicint_16_attr_trig_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[16].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_16_attr_trig_16_qs)
  );


  // F[attr_mode_16]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_16_attr_mode_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_16_attr_mode_16_we),
    .wd     (clicint_16_attr_mode_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[16].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_16_attr_mode_16_qs)
  );


  // F[ctl_16]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_16_ctl_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_16_ctl_16_we),
    .wd     (clicint_16_ctl_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[16].ctl.q ),

    // to register interface (read)
    .qs     (clicint_16_ctl_16_qs)
  );


  // Subregister 17 of Multireg clicint
  // R[clicint_17]: V(False)

  // F[ip_17]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_17_ip_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_17_ip_17_we),
    .wd     (clicint_17_ip_17_wd),

    // from internal hardware
    .de     (hw2reg.clicint[17].ip.de),
    .d      (hw2reg.clicint[17].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[17].ip.q ),

    // to register interface (read)
    .qs     (clicint_17_ip_17_qs)
  );


  // F[ie_17]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_17_ie_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_17_ie_17_we),
    .wd     (clicint_17_ie_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[17].ie.q ),

    // to register interface (read)
    .qs     (clicint_17_ie_17_qs)
  );


  // F[attr_shv_17]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_17_attr_shv_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_17_attr_shv_17_we),
    .wd     (clicint_17_attr_shv_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[17].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_17_attr_shv_17_qs)
  );


  // F[attr_trig_17]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_17_attr_trig_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_17_attr_trig_17_we),
    .wd     (clicint_17_attr_trig_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[17].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_17_attr_trig_17_qs)
  );


  // F[attr_mode_17]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_17_attr_mode_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_17_attr_mode_17_we),
    .wd     (clicint_17_attr_mode_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[17].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_17_attr_mode_17_qs)
  );


  // F[ctl_17]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_17_ctl_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_17_ctl_17_we),
    .wd     (clicint_17_ctl_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[17].ctl.q ),

    // to register interface (read)
    .qs     (clicint_17_ctl_17_qs)
  );


  // Subregister 18 of Multireg clicint
  // R[clicint_18]: V(False)

  // F[ip_18]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_18_ip_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_18_ip_18_we),
    .wd     (clicint_18_ip_18_wd),

    // from internal hardware
    .de     (hw2reg.clicint[18].ip.de),
    .d      (hw2reg.clicint[18].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[18].ip.q ),

    // to register interface (read)
    .qs     (clicint_18_ip_18_qs)
  );


  // F[ie_18]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_18_ie_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_18_ie_18_we),
    .wd     (clicint_18_ie_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[18].ie.q ),

    // to register interface (read)
    .qs     (clicint_18_ie_18_qs)
  );


  // F[attr_shv_18]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_18_attr_shv_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_18_attr_shv_18_we),
    .wd     (clicint_18_attr_shv_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[18].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_18_attr_shv_18_qs)
  );


  // F[attr_trig_18]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_18_attr_trig_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_18_attr_trig_18_we),
    .wd     (clicint_18_attr_trig_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[18].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_18_attr_trig_18_qs)
  );


  // F[attr_mode_18]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_18_attr_mode_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_18_attr_mode_18_we),
    .wd     (clicint_18_attr_mode_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[18].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_18_attr_mode_18_qs)
  );


  // F[ctl_18]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_18_ctl_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_18_ctl_18_we),
    .wd     (clicint_18_ctl_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[18].ctl.q ),

    // to register interface (read)
    .qs     (clicint_18_ctl_18_qs)
  );


  // Subregister 19 of Multireg clicint
  // R[clicint_19]: V(False)

  // F[ip_19]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_19_ip_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_19_ip_19_we),
    .wd     (clicint_19_ip_19_wd),

    // from internal hardware
    .de     (hw2reg.clicint[19].ip.de),
    .d      (hw2reg.clicint[19].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[19].ip.q ),

    // to register interface (read)
    .qs     (clicint_19_ip_19_qs)
  );


  // F[ie_19]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_19_ie_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_19_ie_19_we),
    .wd     (clicint_19_ie_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[19].ie.q ),

    // to register interface (read)
    .qs     (clicint_19_ie_19_qs)
  );


  // F[attr_shv_19]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_19_attr_shv_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_19_attr_shv_19_we),
    .wd     (clicint_19_attr_shv_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[19].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_19_attr_shv_19_qs)
  );


  // F[attr_trig_19]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_19_attr_trig_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_19_attr_trig_19_we),
    .wd     (clicint_19_attr_trig_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[19].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_19_attr_trig_19_qs)
  );


  // F[attr_mode_19]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_19_attr_mode_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_19_attr_mode_19_we),
    .wd     (clicint_19_attr_mode_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[19].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_19_attr_mode_19_qs)
  );


  // F[ctl_19]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_19_ctl_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_19_ctl_19_we),
    .wd     (clicint_19_ctl_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[19].ctl.q ),

    // to register interface (read)
    .qs     (clicint_19_ctl_19_qs)
  );


  // Subregister 20 of Multireg clicint
  // R[clicint_20]: V(False)

  // F[ip_20]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_20_ip_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_20_ip_20_we),
    .wd     (clicint_20_ip_20_wd),

    // from internal hardware
    .de     (hw2reg.clicint[20].ip.de),
    .d      (hw2reg.clicint[20].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[20].ip.q ),

    // to register interface (read)
    .qs     (clicint_20_ip_20_qs)
  );


  // F[ie_20]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_20_ie_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_20_ie_20_we),
    .wd     (clicint_20_ie_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[20].ie.q ),

    // to register interface (read)
    .qs     (clicint_20_ie_20_qs)
  );


  // F[attr_shv_20]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_20_attr_shv_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_20_attr_shv_20_we),
    .wd     (clicint_20_attr_shv_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[20].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_20_attr_shv_20_qs)
  );


  // F[attr_trig_20]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_20_attr_trig_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_20_attr_trig_20_we),
    .wd     (clicint_20_attr_trig_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[20].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_20_attr_trig_20_qs)
  );


  // F[attr_mode_20]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_20_attr_mode_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_20_attr_mode_20_we),
    .wd     (clicint_20_attr_mode_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[20].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_20_attr_mode_20_qs)
  );


  // F[ctl_20]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_20_ctl_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_20_ctl_20_we),
    .wd     (clicint_20_ctl_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[20].ctl.q ),

    // to register interface (read)
    .qs     (clicint_20_ctl_20_qs)
  );


  // Subregister 21 of Multireg clicint
  // R[clicint_21]: V(False)

  // F[ip_21]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_21_ip_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_21_ip_21_we),
    .wd     (clicint_21_ip_21_wd),

    // from internal hardware
    .de     (hw2reg.clicint[21].ip.de),
    .d      (hw2reg.clicint[21].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[21].ip.q ),

    // to register interface (read)
    .qs     (clicint_21_ip_21_qs)
  );


  // F[ie_21]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_21_ie_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_21_ie_21_we),
    .wd     (clicint_21_ie_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[21].ie.q ),

    // to register interface (read)
    .qs     (clicint_21_ie_21_qs)
  );


  // F[attr_shv_21]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_21_attr_shv_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_21_attr_shv_21_we),
    .wd     (clicint_21_attr_shv_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[21].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_21_attr_shv_21_qs)
  );


  // F[attr_trig_21]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_21_attr_trig_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_21_attr_trig_21_we),
    .wd     (clicint_21_attr_trig_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[21].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_21_attr_trig_21_qs)
  );


  // F[attr_mode_21]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_21_attr_mode_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_21_attr_mode_21_we),
    .wd     (clicint_21_attr_mode_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[21].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_21_attr_mode_21_qs)
  );


  // F[ctl_21]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_21_ctl_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_21_ctl_21_we),
    .wd     (clicint_21_ctl_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[21].ctl.q ),

    // to register interface (read)
    .qs     (clicint_21_ctl_21_qs)
  );


  // Subregister 22 of Multireg clicint
  // R[clicint_22]: V(False)

  // F[ip_22]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_22_ip_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_22_ip_22_we),
    .wd     (clicint_22_ip_22_wd),

    // from internal hardware
    .de     (hw2reg.clicint[22].ip.de),
    .d      (hw2reg.clicint[22].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[22].ip.q ),

    // to register interface (read)
    .qs     (clicint_22_ip_22_qs)
  );


  // F[ie_22]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_22_ie_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_22_ie_22_we),
    .wd     (clicint_22_ie_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[22].ie.q ),

    // to register interface (read)
    .qs     (clicint_22_ie_22_qs)
  );


  // F[attr_shv_22]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_22_attr_shv_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_22_attr_shv_22_we),
    .wd     (clicint_22_attr_shv_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[22].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_22_attr_shv_22_qs)
  );


  // F[attr_trig_22]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_22_attr_trig_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_22_attr_trig_22_we),
    .wd     (clicint_22_attr_trig_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[22].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_22_attr_trig_22_qs)
  );


  // F[attr_mode_22]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_22_attr_mode_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_22_attr_mode_22_we),
    .wd     (clicint_22_attr_mode_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[22].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_22_attr_mode_22_qs)
  );


  // F[ctl_22]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_22_ctl_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_22_ctl_22_we),
    .wd     (clicint_22_ctl_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[22].ctl.q ),

    // to register interface (read)
    .qs     (clicint_22_ctl_22_qs)
  );


  // Subregister 23 of Multireg clicint
  // R[clicint_23]: V(False)

  // F[ip_23]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_23_ip_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_23_ip_23_we),
    .wd     (clicint_23_ip_23_wd),

    // from internal hardware
    .de     (hw2reg.clicint[23].ip.de),
    .d      (hw2reg.clicint[23].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[23].ip.q ),

    // to register interface (read)
    .qs     (clicint_23_ip_23_qs)
  );


  // F[ie_23]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_23_ie_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_23_ie_23_we),
    .wd     (clicint_23_ie_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[23].ie.q ),

    // to register interface (read)
    .qs     (clicint_23_ie_23_qs)
  );


  // F[attr_shv_23]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_23_attr_shv_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_23_attr_shv_23_we),
    .wd     (clicint_23_attr_shv_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[23].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_23_attr_shv_23_qs)
  );


  // F[attr_trig_23]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_23_attr_trig_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_23_attr_trig_23_we),
    .wd     (clicint_23_attr_trig_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[23].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_23_attr_trig_23_qs)
  );


  // F[attr_mode_23]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_23_attr_mode_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_23_attr_mode_23_we),
    .wd     (clicint_23_attr_mode_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[23].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_23_attr_mode_23_qs)
  );


  // F[ctl_23]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_23_ctl_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_23_ctl_23_we),
    .wd     (clicint_23_ctl_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[23].ctl.q ),

    // to register interface (read)
    .qs     (clicint_23_ctl_23_qs)
  );


  // Subregister 24 of Multireg clicint
  // R[clicint_24]: V(False)

  // F[ip_24]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_24_ip_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_24_ip_24_we),
    .wd     (clicint_24_ip_24_wd),

    // from internal hardware
    .de     (hw2reg.clicint[24].ip.de),
    .d      (hw2reg.clicint[24].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[24].ip.q ),

    // to register interface (read)
    .qs     (clicint_24_ip_24_qs)
  );


  // F[ie_24]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_24_ie_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_24_ie_24_we),
    .wd     (clicint_24_ie_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[24].ie.q ),

    // to register interface (read)
    .qs     (clicint_24_ie_24_qs)
  );


  // F[attr_shv_24]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_24_attr_shv_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_24_attr_shv_24_we),
    .wd     (clicint_24_attr_shv_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[24].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_24_attr_shv_24_qs)
  );


  // F[attr_trig_24]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_24_attr_trig_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_24_attr_trig_24_we),
    .wd     (clicint_24_attr_trig_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[24].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_24_attr_trig_24_qs)
  );


  // F[attr_mode_24]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_24_attr_mode_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_24_attr_mode_24_we),
    .wd     (clicint_24_attr_mode_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[24].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_24_attr_mode_24_qs)
  );


  // F[ctl_24]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_24_ctl_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_24_ctl_24_we),
    .wd     (clicint_24_ctl_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[24].ctl.q ),

    // to register interface (read)
    .qs     (clicint_24_ctl_24_qs)
  );


  // Subregister 25 of Multireg clicint
  // R[clicint_25]: V(False)

  // F[ip_25]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_25_ip_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_25_ip_25_we),
    .wd     (clicint_25_ip_25_wd),

    // from internal hardware
    .de     (hw2reg.clicint[25].ip.de),
    .d      (hw2reg.clicint[25].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[25].ip.q ),

    // to register interface (read)
    .qs     (clicint_25_ip_25_qs)
  );


  // F[ie_25]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_25_ie_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_25_ie_25_we),
    .wd     (clicint_25_ie_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[25].ie.q ),

    // to register interface (read)
    .qs     (clicint_25_ie_25_qs)
  );


  // F[attr_shv_25]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_25_attr_shv_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_25_attr_shv_25_we),
    .wd     (clicint_25_attr_shv_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[25].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_25_attr_shv_25_qs)
  );


  // F[attr_trig_25]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_25_attr_trig_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_25_attr_trig_25_we),
    .wd     (clicint_25_attr_trig_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[25].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_25_attr_trig_25_qs)
  );


  // F[attr_mode_25]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_25_attr_mode_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_25_attr_mode_25_we),
    .wd     (clicint_25_attr_mode_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[25].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_25_attr_mode_25_qs)
  );


  // F[ctl_25]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_25_ctl_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_25_ctl_25_we),
    .wd     (clicint_25_ctl_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[25].ctl.q ),

    // to register interface (read)
    .qs     (clicint_25_ctl_25_qs)
  );


  // Subregister 26 of Multireg clicint
  // R[clicint_26]: V(False)

  // F[ip_26]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_26_ip_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_26_ip_26_we),
    .wd     (clicint_26_ip_26_wd),

    // from internal hardware
    .de     (hw2reg.clicint[26].ip.de),
    .d      (hw2reg.clicint[26].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[26].ip.q ),

    // to register interface (read)
    .qs     (clicint_26_ip_26_qs)
  );


  // F[ie_26]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_26_ie_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_26_ie_26_we),
    .wd     (clicint_26_ie_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[26].ie.q ),

    // to register interface (read)
    .qs     (clicint_26_ie_26_qs)
  );


  // F[attr_shv_26]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_26_attr_shv_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_26_attr_shv_26_we),
    .wd     (clicint_26_attr_shv_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[26].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_26_attr_shv_26_qs)
  );


  // F[attr_trig_26]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_26_attr_trig_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_26_attr_trig_26_we),
    .wd     (clicint_26_attr_trig_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[26].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_26_attr_trig_26_qs)
  );


  // F[attr_mode_26]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_26_attr_mode_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_26_attr_mode_26_we),
    .wd     (clicint_26_attr_mode_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[26].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_26_attr_mode_26_qs)
  );


  // F[ctl_26]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_26_ctl_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_26_ctl_26_we),
    .wd     (clicint_26_ctl_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[26].ctl.q ),

    // to register interface (read)
    .qs     (clicint_26_ctl_26_qs)
  );


  // Subregister 27 of Multireg clicint
  // R[clicint_27]: V(False)

  // F[ip_27]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_27_ip_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_27_ip_27_we),
    .wd     (clicint_27_ip_27_wd),

    // from internal hardware
    .de     (hw2reg.clicint[27].ip.de),
    .d      (hw2reg.clicint[27].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[27].ip.q ),

    // to register interface (read)
    .qs     (clicint_27_ip_27_qs)
  );


  // F[ie_27]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_27_ie_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_27_ie_27_we),
    .wd     (clicint_27_ie_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[27].ie.q ),

    // to register interface (read)
    .qs     (clicint_27_ie_27_qs)
  );


  // F[attr_shv_27]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_27_attr_shv_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_27_attr_shv_27_we),
    .wd     (clicint_27_attr_shv_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[27].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_27_attr_shv_27_qs)
  );


  // F[attr_trig_27]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_27_attr_trig_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_27_attr_trig_27_we),
    .wd     (clicint_27_attr_trig_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[27].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_27_attr_trig_27_qs)
  );


  // F[attr_mode_27]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_27_attr_mode_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_27_attr_mode_27_we),
    .wd     (clicint_27_attr_mode_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[27].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_27_attr_mode_27_qs)
  );


  // F[ctl_27]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_27_ctl_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_27_ctl_27_we),
    .wd     (clicint_27_ctl_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[27].ctl.q ),

    // to register interface (read)
    .qs     (clicint_27_ctl_27_qs)
  );


  // Subregister 28 of Multireg clicint
  // R[clicint_28]: V(False)

  // F[ip_28]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_28_ip_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_28_ip_28_we),
    .wd     (clicint_28_ip_28_wd),

    // from internal hardware
    .de     (hw2reg.clicint[28].ip.de),
    .d      (hw2reg.clicint[28].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[28].ip.q ),

    // to register interface (read)
    .qs     (clicint_28_ip_28_qs)
  );


  // F[ie_28]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_28_ie_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_28_ie_28_we),
    .wd     (clicint_28_ie_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[28].ie.q ),

    // to register interface (read)
    .qs     (clicint_28_ie_28_qs)
  );


  // F[attr_shv_28]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_28_attr_shv_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_28_attr_shv_28_we),
    .wd     (clicint_28_attr_shv_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[28].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_28_attr_shv_28_qs)
  );


  // F[attr_trig_28]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_28_attr_trig_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_28_attr_trig_28_we),
    .wd     (clicint_28_attr_trig_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[28].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_28_attr_trig_28_qs)
  );


  // F[attr_mode_28]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_28_attr_mode_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_28_attr_mode_28_we),
    .wd     (clicint_28_attr_mode_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[28].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_28_attr_mode_28_qs)
  );


  // F[ctl_28]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_28_ctl_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_28_ctl_28_we),
    .wd     (clicint_28_ctl_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[28].ctl.q ),

    // to register interface (read)
    .qs     (clicint_28_ctl_28_qs)
  );


  // Subregister 29 of Multireg clicint
  // R[clicint_29]: V(False)

  // F[ip_29]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_29_ip_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_29_ip_29_we),
    .wd     (clicint_29_ip_29_wd),

    // from internal hardware
    .de     (hw2reg.clicint[29].ip.de),
    .d      (hw2reg.clicint[29].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[29].ip.q ),

    // to register interface (read)
    .qs     (clicint_29_ip_29_qs)
  );


  // F[ie_29]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_29_ie_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_29_ie_29_we),
    .wd     (clicint_29_ie_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[29].ie.q ),

    // to register interface (read)
    .qs     (clicint_29_ie_29_qs)
  );


  // F[attr_shv_29]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_29_attr_shv_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_29_attr_shv_29_we),
    .wd     (clicint_29_attr_shv_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[29].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_29_attr_shv_29_qs)
  );


  // F[attr_trig_29]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_29_attr_trig_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_29_attr_trig_29_we),
    .wd     (clicint_29_attr_trig_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[29].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_29_attr_trig_29_qs)
  );


  // F[attr_mode_29]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_29_attr_mode_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_29_attr_mode_29_we),
    .wd     (clicint_29_attr_mode_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[29].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_29_attr_mode_29_qs)
  );


  // F[ctl_29]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_29_ctl_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_29_ctl_29_we),
    .wd     (clicint_29_ctl_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[29].ctl.q ),

    // to register interface (read)
    .qs     (clicint_29_ctl_29_qs)
  );


  // Subregister 30 of Multireg clicint
  // R[clicint_30]: V(False)

  // F[ip_30]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_30_ip_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_30_ip_30_we),
    .wd     (clicint_30_ip_30_wd),

    // from internal hardware
    .de     (hw2reg.clicint[30].ip.de),
    .d      (hw2reg.clicint[30].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[30].ip.q ),

    // to register interface (read)
    .qs     (clicint_30_ip_30_qs)
  );


  // F[ie_30]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_30_ie_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_30_ie_30_we),
    .wd     (clicint_30_ie_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[30].ie.q ),

    // to register interface (read)
    .qs     (clicint_30_ie_30_qs)
  );


  // F[attr_shv_30]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_30_attr_shv_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_30_attr_shv_30_we),
    .wd     (clicint_30_attr_shv_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[30].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_30_attr_shv_30_qs)
  );


  // F[attr_trig_30]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_30_attr_trig_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_30_attr_trig_30_we),
    .wd     (clicint_30_attr_trig_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[30].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_30_attr_trig_30_qs)
  );


  // F[attr_mode_30]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_30_attr_mode_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_30_attr_mode_30_we),
    .wd     (clicint_30_attr_mode_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[30].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_30_attr_mode_30_qs)
  );


  // F[ctl_30]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_30_ctl_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_30_ctl_30_we),
    .wd     (clicint_30_ctl_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[30].ctl.q ),

    // to register interface (read)
    .qs     (clicint_30_ctl_30_qs)
  );


  // Subregister 31 of Multireg clicint
  // R[clicint_31]: V(False)

  // F[ip_31]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_31_ip_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_31_ip_31_we),
    .wd     (clicint_31_ip_31_wd),

    // from internal hardware
    .de     (hw2reg.clicint[31].ip.de),
    .d      (hw2reg.clicint[31].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[31].ip.q ),

    // to register interface (read)
    .qs     (clicint_31_ip_31_qs)
  );


  // F[ie_31]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_31_ie_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_31_ie_31_we),
    .wd     (clicint_31_ie_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[31].ie.q ),

    // to register interface (read)
    .qs     (clicint_31_ie_31_qs)
  );


  // F[attr_shv_31]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_31_attr_shv_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_31_attr_shv_31_we),
    .wd     (clicint_31_attr_shv_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[31].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_31_attr_shv_31_qs)
  );


  // F[attr_trig_31]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_31_attr_trig_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_31_attr_trig_31_we),
    .wd     (clicint_31_attr_trig_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[31].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_31_attr_trig_31_qs)
  );


  // F[attr_mode_31]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_31_attr_mode_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_31_attr_mode_31_we),
    .wd     (clicint_31_attr_mode_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[31].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_31_attr_mode_31_qs)
  );


  // F[ctl_31]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_31_ctl_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_31_ctl_31_we),
    .wd     (clicint_31_ctl_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[31].ctl.q ),

    // to register interface (read)
    .qs     (clicint_31_ctl_31_qs)
  );


  // Subregister 32 of Multireg clicint
  // R[clicint_32]: V(False)

  // F[ip_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_32_ip_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_32_ip_32_we),
    .wd     (clicint_32_ip_32_wd),

    // from internal hardware
    .de     (hw2reg.clicint[32].ip.de),
    .d      (hw2reg.clicint[32].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[32].ip.q ),

    // to register interface (read)
    .qs     (clicint_32_ip_32_qs)
  );


  // F[ie_32]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_32_ie_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_32_ie_32_we),
    .wd     (clicint_32_ie_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[32].ie.q ),

    // to register interface (read)
    .qs     (clicint_32_ie_32_qs)
  );


  // F[attr_shv_32]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_32_attr_shv_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_32_attr_shv_32_we),
    .wd     (clicint_32_attr_shv_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[32].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_32_attr_shv_32_qs)
  );


  // F[attr_trig_32]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_32_attr_trig_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_32_attr_trig_32_we),
    .wd     (clicint_32_attr_trig_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[32].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_32_attr_trig_32_qs)
  );


  // F[attr_mode_32]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_32_attr_mode_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_32_attr_mode_32_we),
    .wd     (clicint_32_attr_mode_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[32].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_32_attr_mode_32_qs)
  );


  // F[ctl_32]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_32_ctl_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_32_ctl_32_we),
    .wd     (clicint_32_ctl_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[32].ctl.q ),

    // to register interface (read)
    .qs     (clicint_32_ctl_32_qs)
  );


  // Subregister 33 of Multireg clicint
  // R[clicint_33]: V(False)

  // F[ip_33]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_33_ip_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_33_ip_33_we),
    .wd     (clicint_33_ip_33_wd),

    // from internal hardware
    .de     (hw2reg.clicint[33].ip.de),
    .d      (hw2reg.clicint[33].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[33].ip.q ),

    // to register interface (read)
    .qs     (clicint_33_ip_33_qs)
  );


  // F[ie_33]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_33_ie_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_33_ie_33_we),
    .wd     (clicint_33_ie_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[33].ie.q ),

    // to register interface (read)
    .qs     (clicint_33_ie_33_qs)
  );


  // F[attr_shv_33]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_33_attr_shv_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_33_attr_shv_33_we),
    .wd     (clicint_33_attr_shv_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[33].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_33_attr_shv_33_qs)
  );


  // F[attr_trig_33]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_33_attr_trig_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_33_attr_trig_33_we),
    .wd     (clicint_33_attr_trig_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[33].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_33_attr_trig_33_qs)
  );


  // F[attr_mode_33]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_33_attr_mode_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_33_attr_mode_33_we),
    .wd     (clicint_33_attr_mode_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[33].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_33_attr_mode_33_qs)
  );


  // F[ctl_33]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_33_ctl_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_33_ctl_33_we),
    .wd     (clicint_33_ctl_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[33].ctl.q ),

    // to register interface (read)
    .qs     (clicint_33_ctl_33_qs)
  );


  // Subregister 34 of Multireg clicint
  // R[clicint_34]: V(False)

  // F[ip_34]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_34_ip_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_34_ip_34_we),
    .wd     (clicint_34_ip_34_wd),

    // from internal hardware
    .de     (hw2reg.clicint[34].ip.de),
    .d      (hw2reg.clicint[34].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[34].ip.q ),

    // to register interface (read)
    .qs     (clicint_34_ip_34_qs)
  );


  // F[ie_34]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_34_ie_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_34_ie_34_we),
    .wd     (clicint_34_ie_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[34].ie.q ),

    // to register interface (read)
    .qs     (clicint_34_ie_34_qs)
  );


  // F[attr_shv_34]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_34_attr_shv_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_34_attr_shv_34_we),
    .wd     (clicint_34_attr_shv_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[34].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_34_attr_shv_34_qs)
  );


  // F[attr_trig_34]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_34_attr_trig_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_34_attr_trig_34_we),
    .wd     (clicint_34_attr_trig_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[34].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_34_attr_trig_34_qs)
  );


  // F[attr_mode_34]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_34_attr_mode_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_34_attr_mode_34_we),
    .wd     (clicint_34_attr_mode_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[34].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_34_attr_mode_34_qs)
  );


  // F[ctl_34]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_34_ctl_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_34_ctl_34_we),
    .wd     (clicint_34_ctl_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[34].ctl.q ),

    // to register interface (read)
    .qs     (clicint_34_ctl_34_qs)
  );


  // Subregister 35 of Multireg clicint
  // R[clicint_35]: V(False)

  // F[ip_35]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_35_ip_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_35_ip_35_we),
    .wd     (clicint_35_ip_35_wd),

    // from internal hardware
    .de     (hw2reg.clicint[35].ip.de),
    .d      (hw2reg.clicint[35].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[35].ip.q ),

    // to register interface (read)
    .qs     (clicint_35_ip_35_qs)
  );


  // F[ie_35]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_35_ie_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_35_ie_35_we),
    .wd     (clicint_35_ie_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[35].ie.q ),

    // to register interface (read)
    .qs     (clicint_35_ie_35_qs)
  );


  // F[attr_shv_35]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_35_attr_shv_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_35_attr_shv_35_we),
    .wd     (clicint_35_attr_shv_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[35].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_35_attr_shv_35_qs)
  );


  // F[attr_trig_35]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_35_attr_trig_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_35_attr_trig_35_we),
    .wd     (clicint_35_attr_trig_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[35].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_35_attr_trig_35_qs)
  );


  // F[attr_mode_35]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_35_attr_mode_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_35_attr_mode_35_we),
    .wd     (clicint_35_attr_mode_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[35].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_35_attr_mode_35_qs)
  );


  // F[ctl_35]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_35_ctl_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_35_ctl_35_we),
    .wd     (clicint_35_ctl_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[35].ctl.q ),

    // to register interface (read)
    .qs     (clicint_35_ctl_35_qs)
  );


  // Subregister 36 of Multireg clicint
  // R[clicint_36]: V(False)

  // F[ip_36]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_36_ip_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_36_ip_36_we),
    .wd     (clicint_36_ip_36_wd),

    // from internal hardware
    .de     (hw2reg.clicint[36].ip.de),
    .d      (hw2reg.clicint[36].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[36].ip.q ),

    // to register interface (read)
    .qs     (clicint_36_ip_36_qs)
  );


  // F[ie_36]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_36_ie_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_36_ie_36_we),
    .wd     (clicint_36_ie_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[36].ie.q ),

    // to register interface (read)
    .qs     (clicint_36_ie_36_qs)
  );


  // F[attr_shv_36]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_36_attr_shv_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_36_attr_shv_36_we),
    .wd     (clicint_36_attr_shv_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[36].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_36_attr_shv_36_qs)
  );


  // F[attr_trig_36]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_36_attr_trig_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_36_attr_trig_36_we),
    .wd     (clicint_36_attr_trig_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[36].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_36_attr_trig_36_qs)
  );


  // F[attr_mode_36]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_36_attr_mode_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_36_attr_mode_36_we),
    .wd     (clicint_36_attr_mode_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[36].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_36_attr_mode_36_qs)
  );


  // F[ctl_36]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_36_ctl_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_36_ctl_36_we),
    .wd     (clicint_36_ctl_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[36].ctl.q ),

    // to register interface (read)
    .qs     (clicint_36_ctl_36_qs)
  );


  // Subregister 37 of Multireg clicint
  // R[clicint_37]: V(False)

  // F[ip_37]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_37_ip_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_37_ip_37_we),
    .wd     (clicint_37_ip_37_wd),

    // from internal hardware
    .de     (hw2reg.clicint[37].ip.de),
    .d      (hw2reg.clicint[37].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[37].ip.q ),

    // to register interface (read)
    .qs     (clicint_37_ip_37_qs)
  );


  // F[ie_37]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_37_ie_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_37_ie_37_we),
    .wd     (clicint_37_ie_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[37].ie.q ),

    // to register interface (read)
    .qs     (clicint_37_ie_37_qs)
  );


  // F[attr_shv_37]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_37_attr_shv_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_37_attr_shv_37_we),
    .wd     (clicint_37_attr_shv_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[37].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_37_attr_shv_37_qs)
  );


  // F[attr_trig_37]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_37_attr_trig_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_37_attr_trig_37_we),
    .wd     (clicint_37_attr_trig_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[37].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_37_attr_trig_37_qs)
  );


  // F[attr_mode_37]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_37_attr_mode_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_37_attr_mode_37_we),
    .wd     (clicint_37_attr_mode_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[37].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_37_attr_mode_37_qs)
  );


  // F[ctl_37]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_37_ctl_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_37_ctl_37_we),
    .wd     (clicint_37_ctl_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[37].ctl.q ),

    // to register interface (read)
    .qs     (clicint_37_ctl_37_qs)
  );


  // Subregister 38 of Multireg clicint
  // R[clicint_38]: V(False)

  // F[ip_38]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_38_ip_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_38_ip_38_we),
    .wd     (clicint_38_ip_38_wd),

    // from internal hardware
    .de     (hw2reg.clicint[38].ip.de),
    .d      (hw2reg.clicint[38].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[38].ip.q ),

    // to register interface (read)
    .qs     (clicint_38_ip_38_qs)
  );


  // F[ie_38]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_38_ie_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_38_ie_38_we),
    .wd     (clicint_38_ie_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[38].ie.q ),

    // to register interface (read)
    .qs     (clicint_38_ie_38_qs)
  );


  // F[attr_shv_38]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_38_attr_shv_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_38_attr_shv_38_we),
    .wd     (clicint_38_attr_shv_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[38].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_38_attr_shv_38_qs)
  );


  // F[attr_trig_38]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_38_attr_trig_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_38_attr_trig_38_we),
    .wd     (clicint_38_attr_trig_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[38].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_38_attr_trig_38_qs)
  );


  // F[attr_mode_38]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_38_attr_mode_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_38_attr_mode_38_we),
    .wd     (clicint_38_attr_mode_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[38].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_38_attr_mode_38_qs)
  );


  // F[ctl_38]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_38_ctl_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_38_ctl_38_we),
    .wd     (clicint_38_ctl_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[38].ctl.q ),

    // to register interface (read)
    .qs     (clicint_38_ctl_38_qs)
  );


  // Subregister 39 of Multireg clicint
  // R[clicint_39]: V(False)

  // F[ip_39]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_39_ip_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_39_ip_39_we),
    .wd     (clicint_39_ip_39_wd),

    // from internal hardware
    .de     (hw2reg.clicint[39].ip.de),
    .d      (hw2reg.clicint[39].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[39].ip.q ),

    // to register interface (read)
    .qs     (clicint_39_ip_39_qs)
  );


  // F[ie_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_39_ie_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_39_ie_39_we),
    .wd     (clicint_39_ie_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[39].ie.q ),

    // to register interface (read)
    .qs     (clicint_39_ie_39_qs)
  );


  // F[attr_shv_39]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_39_attr_shv_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_39_attr_shv_39_we),
    .wd     (clicint_39_attr_shv_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[39].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_39_attr_shv_39_qs)
  );


  // F[attr_trig_39]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_39_attr_trig_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_39_attr_trig_39_we),
    .wd     (clicint_39_attr_trig_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[39].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_39_attr_trig_39_qs)
  );


  // F[attr_mode_39]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_39_attr_mode_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_39_attr_mode_39_we),
    .wd     (clicint_39_attr_mode_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[39].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_39_attr_mode_39_qs)
  );


  // F[ctl_39]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_39_ctl_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_39_ctl_39_we),
    .wd     (clicint_39_ctl_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[39].ctl.q ),

    // to register interface (read)
    .qs     (clicint_39_ctl_39_qs)
  );


  // Subregister 40 of Multireg clicint
  // R[clicint_40]: V(False)

  // F[ip_40]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_40_ip_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_40_ip_40_we),
    .wd     (clicint_40_ip_40_wd),

    // from internal hardware
    .de     (hw2reg.clicint[40].ip.de),
    .d      (hw2reg.clicint[40].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[40].ip.q ),

    // to register interface (read)
    .qs     (clicint_40_ip_40_qs)
  );


  // F[ie_40]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_40_ie_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_40_ie_40_we),
    .wd     (clicint_40_ie_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[40].ie.q ),

    // to register interface (read)
    .qs     (clicint_40_ie_40_qs)
  );


  // F[attr_shv_40]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_40_attr_shv_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_40_attr_shv_40_we),
    .wd     (clicint_40_attr_shv_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[40].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_40_attr_shv_40_qs)
  );


  // F[attr_trig_40]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_40_attr_trig_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_40_attr_trig_40_we),
    .wd     (clicint_40_attr_trig_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[40].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_40_attr_trig_40_qs)
  );


  // F[attr_mode_40]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_40_attr_mode_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_40_attr_mode_40_we),
    .wd     (clicint_40_attr_mode_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[40].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_40_attr_mode_40_qs)
  );


  // F[ctl_40]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_40_ctl_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_40_ctl_40_we),
    .wd     (clicint_40_ctl_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[40].ctl.q ),

    // to register interface (read)
    .qs     (clicint_40_ctl_40_qs)
  );


  // Subregister 41 of Multireg clicint
  // R[clicint_41]: V(False)

  // F[ip_41]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_41_ip_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_41_ip_41_we),
    .wd     (clicint_41_ip_41_wd),

    // from internal hardware
    .de     (hw2reg.clicint[41].ip.de),
    .d      (hw2reg.clicint[41].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[41].ip.q ),

    // to register interface (read)
    .qs     (clicint_41_ip_41_qs)
  );


  // F[ie_41]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_41_ie_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_41_ie_41_we),
    .wd     (clicint_41_ie_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[41].ie.q ),

    // to register interface (read)
    .qs     (clicint_41_ie_41_qs)
  );


  // F[attr_shv_41]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_41_attr_shv_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_41_attr_shv_41_we),
    .wd     (clicint_41_attr_shv_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[41].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_41_attr_shv_41_qs)
  );


  // F[attr_trig_41]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_41_attr_trig_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_41_attr_trig_41_we),
    .wd     (clicint_41_attr_trig_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[41].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_41_attr_trig_41_qs)
  );


  // F[attr_mode_41]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_41_attr_mode_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_41_attr_mode_41_we),
    .wd     (clicint_41_attr_mode_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[41].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_41_attr_mode_41_qs)
  );


  // F[ctl_41]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_41_ctl_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_41_ctl_41_we),
    .wd     (clicint_41_ctl_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[41].ctl.q ),

    // to register interface (read)
    .qs     (clicint_41_ctl_41_qs)
  );


  // Subregister 42 of Multireg clicint
  // R[clicint_42]: V(False)

  // F[ip_42]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_42_ip_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_42_ip_42_we),
    .wd     (clicint_42_ip_42_wd),

    // from internal hardware
    .de     (hw2reg.clicint[42].ip.de),
    .d      (hw2reg.clicint[42].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[42].ip.q ),

    // to register interface (read)
    .qs     (clicint_42_ip_42_qs)
  );


  // F[ie_42]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_42_ie_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_42_ie_42_we),
    .wd     (clicint_42_ie_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[42].ie.q ),

    // to register interface (read)
    .qs     (clicint_42_ie_42_qs)
  );


  // F[attr_shv_42]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_42_attr_shv_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_42_attr_shv_42_we),
    .wd     (clicint_42_attr_shv_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[42].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_42_attr_shv_42_qs)
  );


  // F[attr_trig_42]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_42_attr_trig_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_42_attr_trig_42_we),
    .wd     (clicint_42_attr_trig_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[42].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_42_attr_trig_42_qs)
  );


  // F[attr_mode_42]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_42_attr_mode_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_42_attr_mode_42_we),
    .wd     (clicint_42_attr_mode_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[42].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_42_attr_mode_42_qs)
  );


  // F[ctl_42]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_42_ctl_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_42_ctl_42_we),
    .wd     (clicint_42_ctl_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[42].ctl.q ),

    // to register interface (read)
    .qs     (clicint_42_ctl_42_qs)
  );


  // Subregister 43 of Multireg clicint
  // R[clicint_43]: V(False)

  // F[ip_43]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_43_ip_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_43_ip_43_we),
    .wd     (clicint_43_ip_43_wd),

    // from internal hardware
    .de     (hw2reg.clicint[43].ip.de),
    .d      (hw2reg.clicint[43].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[43].ip.q ),

    // to register interface (read)
    .qs     (clicint_43_ip_43_qs)
  );


  // F[ie_43]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_43_ie_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_43_ie_43_we),
    .wd     (clicint_43_ie_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[43].ie.q ),

    // to register interface (read)
    .qs     (clicint_43_ie_43_qs)
  );


  // F[attr_shv_43]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_43_attr_shv_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_43_attr_shv_43_we),
    .wd     (clicint_43_attr_shv_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[43].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_43_attr_shv_43_qs)
  );


  // F[attr_trig_43]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_43_attr_trig_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_43_attr_trig_43_we),
    .wd     (clicint_43_attr_trig_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[43].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_43_attr_trig_43_qs)
  );


  // F[attr_mode_43]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_43_attr_mode_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_43_attr_mode_43_we),
    .wd     (clicint_43_attr_mode_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[43].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_43_attr_mode_43_qs)
  );


  // F[ctl_43]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_43_ctl_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_43_ctl_43_we),
    .wd     (clicint_43_ctl_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[43].ctl.q ),

    // to register interface (read)
    .qs     (clicint_43_ctl_43_qs)
  );


  // Subregister 44 of Multireg clicint
  // R[clicint_44]: V(False)

  // F[ip_44]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_44_ip_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_44_ip_44_we),
    .wd     (clicint_44_ip_44_wd),

    // from internal hardware
    .de     (hw2reg.clicint[44].ip.de),
    .d      (hw2reg.clicint[44].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[44].ip.q ),

    // to register interface (read)
    .qs     (clicint_44_ip_44_qs)
  );


  // F[ie_44]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_44_ie_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_44_ie_44_we),
    .wd     (clicint_44_ie_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[44].ie.q ),

    // to register interface (read)
    .qs     (clicint_44_ie_44_qs)
  );


  // F[attr_shv_44]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_44_attr_shv_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_44_attr_shv_44_we),
    .wd     (clicint_44_attr_shv_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[44].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_44_attr_shv_44_qs)
  );


  // F[attr_trig_44]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_44_attr_trig_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_44_attr_trig_44_we),
    .wd     (clicint_44_attr_trig_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[44].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_44_attr_trig_44_qs)
  );


  // F[attr_mode_44]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_44_attr_mode_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_44_attr_mode_44_we),
    .wd     (clicint_44_attr_mode_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[44].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_44_attr_mode_44_qs)
  );


  // F[ctl_44]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_44_ctl_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_44_ctl_44_we),
    .wd     (clicint_44_ctl_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[44].ctl.q ),

    // to register interface (read)
    .qs     (clicint_44_ctl_44_qs)
  );


  // Subregister 45 of Multireg clicint
  // R[clicint_45]: V(False)

  // F[ip_45]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_45_ip_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_45_ip_45_we),
    .wd     (clicint_45_ip_45_wd),

    // from internal hardware
    .de     (hw2reg.clicint[45].ip.de),
    .d      (hw2reg.clicint[45].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[45].ip.q ),

    // to register interface (read)
    .qs     (clicint_45_ip_45_qs)
  );


  // F[ie_45]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_45_ie_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_45_ie_45_we),
    .wd     (clicint_45_ie_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[45].ie.q ),

    // to register interface (read)
    .qs     (clicint_45_ie_45_qs)
  );


  // F[attr_shv_45]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_45_attr_shv_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_45_attr_shv_45_we),
    .wd     (clicint_45_attr_shv_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[45].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_45_attr_shv_45_qs)
  );


  // F[attr_trig_45]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_45_attr_trig_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_45_attr_trig_45_we),
    .wd     (clicint_45_attr_trig_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[45].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_45_attr_trig_45_qs)
  );


  // F[attr_mode_45]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_45_attr_mode_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_45_attr_mode_45_we),
    .wd     (clicint_45_attr_mode_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[45].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_45_attr_mode_45_qs)
  );


  // F[ctl_45]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_45_ctl_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_45_ctl_45_we),
    .wd     (clicint_45_ctl_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[45].ctl.q ),

    // to register interface (read)
    .qs     (clicint_45_ctl_45_qs)
  );


  // Subregister 46 of Multireg clicint
  // R[clicint_46]: V(False)

  // F[ip_46]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_46_ip_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_46_ip_46_we),
    .wd     (clicint_46_ip_46_wd),

    // from internal hardware
    .de     (hw2reg.clicint[46].ip.de),
    .d      (hw2reg.clicint[46].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[46].ip.q ),

    // to register interface (read)
    .qs     (clicint_46_ip_46_qs)
  );


  // F[ie_46]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_46_ie_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_46_ie_46_we),
    .wd     (clicint_46_ie_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[46].ie.q ),

    // to register interface (read)
    .qs     (clicint_46_ie_46_qs)
  );


  // F[attr_shv_46]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_46_attr_shv_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_46_attr_shv_46_we),
    .wd     (clicint_46_attr_shv_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[46].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_46_attr_shv_46_qs)
  );


  // F[attr_trig_46]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_46_attr_trig_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_46_attr_trig_46_we),
    .wd     (clicint_46_attr_trig_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[46].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_46_attr_trig_46_qs)
  );


  // F[attr_mode_46]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_46_attr_mode_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_46_attr_mode_46_we),
    .wd     (clicint_46_attr_mode_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[46].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_46_attr_mode_46_qs)
  );


  // F[ctl_46]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_46_ctl_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_46_ctl_46_we),
    .wd     (clicint_46_ctl_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[46].ctl.q ),

    // to register interface (read)
    .qs     (clicint_46_ctl_46_qs)
  );


  // Subregister 47 of Multireg clicint
  // R[clicint_47]: V(False)

  // F[ip_47]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_47_ip_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_47_ip_47_we),
    .wd     (clicint_47_ip_47_wd),

    // from internal hardware
    .de     (hw2reg.clicint[47].ip.de),
    .d      (hw2reg.clicint[47].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[47].ip.q ),

    // to register interface (read)
    .qs     (clicint_47_ip_47_qs)
  );


  // F[ie_47]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_47_ie_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_47_ie_47_we),
    .wd     (clicint_47_ie_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[47].ie.q ),

    // to register interface (read)
    .qs     (clicint_47_ie_47_qs)
  );


  // F[attr_shv_47]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_47_attr_shv_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_47_attr_shv_47_we),
    .wd     (clicint_47_attr_shv_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[47].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_47_attr_shv_47_qs)
  );


  // F[attr_trig_47]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_47_attr_trig_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_47_attr_trig_47_we),
    .wd     (clicint_47_attr_trig_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[47].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_47_attr_trig_47_qs)
  );


  // F[attr_mode_47]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_47_attr_mode_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_47_attr_mode_47_we),
    .wd     (clicint_47_attr_mode_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[47].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_47_attr_mode_47_qs)
  );


  // F[ctl_47]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_47_ctl_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_47_ctl_47_we),
    .wd     (clicint_47_ctl_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[47].ctl.q ),

    // to register interface (read)
    .qs     (clicint_47_ctl_47_qs)
  );


  // Subregister 48 of Multireg clicint
  // R[clicint_48]: V(False)

  // F[ip_48]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_48_ip_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_48_ip_48_we),
    .wd     (clicint_48_ip_48_wd),

    // from internal hardware
    .de     (hw2reg.clicint[48].ip.de),
    .d      (hw2reg.clicint[48].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[48].ip.q ),

    // to register interface (read)
    .qs     (clicint_48_ip_48_qs)
  );


  // F[ie_48]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_48_ie_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_48_ie_48_we),
    .wd     (clicint_48_ie_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[48].ie.q ),

    // to register interface (read)
    .qs     (clicint_48_ie_48_qs)
  );


  // F[attr_shv_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_48_attr_shv_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_48_attr_shv_48_we),
    .wd     (clicint_48_attr_shv_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[48].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_48_attr_shv_48_qs)
  );


  // F[attr_trig_48]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_48_attr_trig_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_48_attr_trig_48_we),
    .wd     (clicint_48_attr_trig_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[48].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_48_attr_trig_48_qs)
  );


  // F[attr_mode_48]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_48_attr_mode_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_48_attr_mode_48_we),
    .wd     (clicint_48_attr_mode_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[48].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_48_attr_mode_48_qs)
  );


  // F[ctl_48]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_48_ctl_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_48_ctl_48_we),
    .wd     (clicint_48_ctl_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[48].ctl.q ),

    // to register interface (read)
    .qs     (clicint_48_ctl_48_qs)
  );


  // Subregister 49 of Multireg clicint
  // R[clicint_49]: V(False)

  // F[ip_49]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_49_ip_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_49_ip_49_we),
    .wd     (clicint_49_ip_49_wd),

    // from internal hardware
    .de     (hw2reg.clicint[49].ip.de),
    .d      (hw2reg.clicint[49].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[49].ip.q ),

    // to register interface (read)
    .qs     (clicint_49_ip_49_qs)
  );


  // F[ie_49]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_49_ie_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_49_ie_49_we),
    .wd     (clicint_49_ie_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[49].ie.q ),

    // to register interface (read)
    .qs     (clicint_49_ie_49_qs)
  );


  // F[attr_shv_49]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_49_attr_shv_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_49_attr_shv_49_we),
    .wd     (clicint_49_attr_shv_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[49].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_49_attr_shv_49_qs)
  );


  // F[attr_trig_49]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_49_attr_trig_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_49_attr_trig_49_we),
    .wd     (clicint_49_attr_trig_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[49].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_49_attr_trig_49_qs)
  );


  // F[attr_mode_49]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_49_attr_mode_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_49_attr_mode_49_we),
    .wd     (clicint_49_attr_mode_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[49].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_49_attr_mode_49_qs)
  );


  // F[ctl_49]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_49_ctl_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_49_ctl_49_we),
    .wd     (clicint_49_ctl_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[49].ctl.q ),

    // to register interface (read)
    .qs     (clicint_49_ctl_49_qs)
  );


  // Subregister 50 of Multireg clicint
  // R[clicint_50]: V(False)

  // F[ip_50]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_50_ip_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_50_ip_50_we),
    .wd     (clicint_50_ip_50_wd),

    // from internal hardware
    .de     (hw2reg.clicint[50].ip.de),
    .d      (hw2reg.clicint[50].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[50].ip.q ),

    // to register interface (read)
    .qs     (clicint_50_ip_50_qs)
  );


  // F[ie_50]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_50_ie_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_50_ie_50_we),
    .wd     (clicint_50_ie_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[50].ie.q ),

    // to register interface (read)
    .qs     (clicint_50_ie_50_qs)
  );


  // F[attr_shv_50]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_50_attr_shv_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_50_attr_shv_50_we),
    .wd     (clicint_50_attr_shv_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[50].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_50_attr_shv_50_qs)
  );


  // F[attr_trig_50]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_50_attr_trig_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_50_attr_trig_50_we),
    .wd     (clicint_50_attr_trig_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[50].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_50_attr_trig_50_qs)
  );


  // F[attr_mode_50]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_50_attr_mode_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_50_attr_mode_50_we),
    .wd     (clicint_50_attr_mode_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[50].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_50_attr_mode_50_qs)
  );


  // F[ctl_50]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_50_ctl_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_50_ctl_50_we),
    .wd     (clicint_50_ctl_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[50].ctl.q ),

    // to register interface (read)
    .qs     (clicint_50_ctl_50_qs)
  );


  // Subregister 51 of Multireg clicint
  // R[clicint_51]: V(False)

  // F[ip_51]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_51_ip_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_51_ip_51_we),
    .wd     (clicint_51_ip_51_wd),

    // from internal hardware
    .de     (hw2reg.clicint[51].ip.de),
    .d      (hw2reg.clicint[51].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[51].ip.q ),

    // to register interface (read)
    .qs     (clicint_51_ip_51_qs)
  );


  // F[ie_51]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_51_ie_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_51_ie_51_we),
    .wd     (clicint_51_ie_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[51].ie.q ),

    // to register interface (read)
    .qs     (clicint_51_ie_51_qs)
  );


  // F[attr_shv_51]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_51_attr_shv_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_51_attr_shv_51_we),
    .wd     (clicint_51_attr_shv_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[51].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_51_attr_shv_51_qs)
  );


  // F[attr_trig_51]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_51_attr_trig_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_51_attr_trig_51_we),
    .wd     (clicint_51_attr_trig_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[51].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_51_attr_trig_51_qs)
  );


  // F[attr_mode_51]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_51_attr_mode_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_51_attr_mode_51_we),
    .wd     (clicint_51_attr_mode_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[51].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_51_attr_mode_51_qs)
  );


  // F[ctl_51]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_51_ctl_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_51_ctl_51_we),
    .wd     (clicint_51_ctl_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[51].ctl.q ),

    // to register interface (read)
    .qs     (clicint_51_ctl_51_qs)
  );


  // Subregister 52 of Multireg clicint
  // R[clicint_52]: V(False)

  // F[ip_52]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_52_ip_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_52_ip_52_we),
    .wd     (clicint_52_ip_52_wd),

    // from internal hardware
    .de     (hw2reg.clicint[52].ip.de),
    .d      (hw2reg.clicint[52].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[52].ip.q ),

    // to register interface (read)
    .qs     (clicint_52_ip_52_qs)
  );


  // F[ie_52]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_52_ie_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_52_ie_52_we),
    .wd     (clicint_52_ie_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[52].ie.q ),

    // to register interface (read)
    .qs     (clicint_52_ie_52_qs)
  );


  // F[attr_shv_52]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_52_attr_shv_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_52_attr_shv_52_we),
    .wd     (clicint_52_attr_shv_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[52].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_52_attr_shv_52_qs)
  );


  // F[attr_trig_52]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_52_attr_trig_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_52_attr_trig_52_we),
    .wd     (clicint_52_attr_trig_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[52].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_52_attr_trig_52_qs)
  );


  // F[attr_mode_52]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_52_attr_mode_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_52_attr_mode_52_we),
    .wd     (clicint_52_attr_mode_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[52].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_52_attr_mode_52_qs)
  );


  // F[ctl_52]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_52_ctl_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_52_ctl_52_we),
    .wd     (clicint_52_ctl_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[52].ctl.q ),

    // to register interface (read)
    .qs     (clicint_52_ctl_52_qs)
  );


  // Subregister 53 of Multireg clicint
  // R[clicint_53]: V(False)

  // F[ip_53]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_53_ip_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_53_ip_53_we),
    .wd     (clicint_53_ip_53_wd),

    // from internal hardware
    .de     (hw2reg.clicint[53].ip.de),
    .d      (hw2reg.clicint[53].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[53].ip.q ),

    // to register interface (read)
    .qs     (clicint_53_ip_53_qs)
  );


  // F[ie_53]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_53_ie_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_53_ie_53_we),
    .wd     (clicint_53_ie_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[53].ie.q ),

    // to register interface (read)
    .qs     (clicint_53_ie_53_qs)
  );


  // F[attr_shv_53]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_53_attr_shv_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_53_attr_shv_53_we),
    .wd     (clicint_53_attr_shv_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[53].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_53_attr_shv_53_qs)
  );


  // F[attr_trig_53]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_53_attr_trig_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_53_attr_trig_53_we),
    .wd     (clicint_53_attr_trig_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[53].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_53_attr_trig_53_qs)
  );


  // F[attr_mode_53]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_53_attr_mode_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_53_attr_mode_53_we),
    .wd     (clicint_53_attr_mode_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[53].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_53_attr_mode_53_qs)
  );


  // F[ctl_53]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_53_ctl_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_53_ctl_53_we),
    .wd     (clicint_53_ctl_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[53].ctl.q ),

    // to register interface (read)
    .qs     (clicint_53_ctl_53_qs)
  );


  // Subregister 54 of Multireg clicint
  // R[clicint_54]: V(False)

  // F[ip_54]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_54_ip_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_54_ip_54_we),
    .wd     (clicint_54_ip_54_wd),

    // from internal hardware
    .de     (hw2reg.clicint[54].ip.de),
    .d      (hw2reg.clicint[54].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[54].ip.q ),

    // to register interface (read)
    .qs     (clicint_54_ip_54_qs)
  );


  // F[ie_54]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_54_ie_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_54_ie_54_we),
    .wd     (clicint_54_ie_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[54].ie.q ),

    // to register interface (read)
    .qs     (clicint_54_ie_54_qs)
  );


  // F[attr_shv_54]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_54_attr_shv_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_54_attr_shv_54_we),
    .wd     (clicint_54_attr_shv_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[54].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_54_attr_shv_54_qs)
  );


  // F[attr_trig_54]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_54_attr_trig_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_54_attr_trig_54_we),
    .wd     (clicint_54_attr_trig_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[54].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_54_attr_trig_54_qs)
  );


  // F[attr_mode_54]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_54_attr_mode_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_54_attr_mode_54_we),
    .wd     (clicint_54_attr_mode_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[54].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_54_attr_mode_54_qs)
  );


  // F[ctl_54]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_54_ctl_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_54_ctl_54_we),
    .wd     (clicint_54_ctl_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[54].ctl.q ),

    // to register interface (read)
    .qs     (clicint_54_ctl_54_qs)
  );


  // Subregister 55 of Multireg clicint
  // R[clicint_55]: V(False)

  // F[ip_55]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_55_ip_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_55_ip_55_we),
    .wd     (clicint_55_ip_55_wd),

    // from internal hardware
    .de     (hw2reg.clicint[55].ip.de),
    .d      (hw2reg.clicint[55].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[55].ip.q ),

    // to register interface (read)
    .qs     (clicint_55_ip_55_qs)
  );


  // F[ie_55]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_55_ie_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_55_ie_55_we),
    .wd     (clicint_55_ie_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[55].ie.q ),

    // to register interface (read)
    .qs     (clicint_55_ie_55_qs)
  );


  // F[attr_shv_55]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_55_attr_shv_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_55_attr_shv_55_we),
    .wd     (clicint_55_attr_shv_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[55].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_55_attr_shv_55_qs)
  );


  // F[attr_trig_55]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_55_attr_trig_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_55_attr_trig_55_we),
    .wd     (clicint_55_attr_trig_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[55].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_55_attr_trig_55_qs)
  );


  // F[attr_mode_55]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_55_attr_mode_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_55_attr_mode_55_we),
    .wd     (clicint_55_attr_mode_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[55].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_55_attr_mode_55_qs)
  );


  // F[ctl_55]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_55_ctl_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_55_ctl_55_we),
    .wd     (clicint_55_ctl_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[55].ctl.q ),

    // to register interface (read)
    .qs     (clicint_55_ctl_55_qs)
  );


  // Subregister 56 of Multireg clicint
  // R[clicint_56]: V(False)

  // F[ip_56]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_56_ip_56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_56_ip_56_we),
    .wd     (clicint_56_ip_56_wd),

    // from internal hardware
    .de     (hw2reg.clicint[56].ip.de),
    .d      (hw2reg.clicint[56].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[56].ip.q ),

    // to register interface (read)
    .qs     (clicint_56_ip_56_qs)
  );


  // F[ie_56]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_56_ie_56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_56_ie_56_we),
    .wd     (clicint_56_ie_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[56].ie.q ),

    // to register interface (read)
    .qs     (clicint_56_ie_56_qs)
  );


  // F[attr_shv_56]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_56_attr_shv_56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_56_attr_shv_56_we),
    .wd     (clicint_56_attr_shv_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[56].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_56_attr_shv_56_qs)
  );


  // F[attr_trig_56]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_56_attr_trig_56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_56_attr_trig_56_we),
    .wd     (clicint_56_attr_trig_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[56].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_56_attr_trig_56_qs)
  );


  // F[attr_mode_56]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_56_attr_mode_56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_56_attr_mode_56_we),
    .wd     (clicint_56_attr_mode_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[56].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_56_attr_mode_56_qs)
  );


  // F[ctl_56]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_56_ctl_56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_56_ctl_56_we),
    .wd     (clicint_56_ctl_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[56].ctl.q ),

    // to register interface (read)
    .qs     (clicint_56_ctl_56_qs)
  );


  // Subregister 57 of Multireg clicint
  // R[clicint_57]: V(False)

  // F[ip_57]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_57_ip_57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_57_ip_57_we),
    .wd     (clicint_57_ip_57_wd),

    // from internal hardware
    .de     (hw2reg.clicint[57].ip.de),
    .d      (hw2reg.clicint[57].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[57].ip.q ),

    // to register interface (read)
    .qs     (clicint_57_ip_57_qs)
  );


  // F[ie_57]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_57_ie_57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_57_ie_57_we),
    .wd     (clicint_57_ie_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[57].ie.q ),

    // to register interface (read)
    .qs     (clicint_57_ie_57_qs)
  );


  // F[attr_shv_57]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_57_attr_shv_57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_57_attr_shv_57_we),
    .wd     (clicint_57_attr_shv_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[57].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_57_attr_shv_57_qs)
  );


  // F[attr_trig_57]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_57_attr_trig_57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_57_attr_trig_57_we),
    .wd     (clicint_57_attr_trig_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[57].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_57_attr_trig_57_qs)
  );


  // F[attr_mode_57]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_57_attr_mode_57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_57_attr_mode_57_we),
    .wd     (clicint_57_attr_mode_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[57].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_57_attr_mode_57_qs)
  );


  // F[ctl_57]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_57_ctl_57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_57_ctl_57_we),
    .wd     (clicint_57_ctl_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[57].ctl.q ),

    // to register interface (read)
    .qs     (clicint_57_ctl_57_qs)
  );


  // Subregister 58 of Multireg clicint
  // R[clicint_58]: V(False)

  // F[ip_58]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_58_ip_58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_58_ip_58_we),
    .wd     (clicint_58_ip_58_wd),

    // from internal hardware
    .de     (hw2reg.clicint[58].ip.de),
    .d      (hw2reg.clicint[58].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[58].ip.q ),

    // to register interface (read)
    .qs     (clicint_58_ip_58_qs)
  );


  // F[ie_58]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_58_ie_58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_58_ie_58_we),
    .wd     (clicint_58_ie_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[58].ie.q ),

    // to register interface (read)
    .qs     (clicint_58_ie_58_qs)
  );


  // F[attr_shv_58]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_58_attr_shv_58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_58_attr_shv_58_we),
    .wd     (clicint_58_attr_shv_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[58].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_58_attr_shv_58_qs)
  );


  // F[attr_trig_58]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_58_attr_trig_58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_58_attr_trig_58_we),
    .wd     (clicint_58_attr_trig_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[58].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_58_attr_trig_58_qs)
  );


  // F[attr_mode_58]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_58_attr_mode_58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_58_attr_mode_58_we),
    .wd     (clicint_58_attr_mode_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[58].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_58_attr_mode_58_qs)
  );


  // F[ctl_58]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_58_ctl_58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_58_ctl_58_we),
    .wd     (clicint_58_ctl_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[58].ctl.q ),

    // to register interface (read)
    .qs     (clicint_58_ctl_58_qs)
  );


  // Subregister 59 of Multireg clicint
  // R[clicint_59]: V(False)

  // F[ip_59]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_59_ip_59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_59_ip_59_we),
    .wd     (clicint_59_ip_59_wd),

    // from internal hardware
    .de     (hw2reg.clicint[59].ip.de),
    .d      (hw2reg.clicint[59].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[59].ip.q ),

    // to register interface (read)
    .qs     (clicint_59_ip_59_qs)
  );


  // F[ie_59]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_59_ie_59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_59_ie_59_we),
    .wd     (clicint_59_ie_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[59].ie.q ),

    // to register interface (read)
    .qs     (clicint_59_ie_59_qs)
  );


  // F[attr_shv_59]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_59_attr_shv_59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_59_attr_shv_59_we),
    .wd     (clicint_59_attr_shv_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[59].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_59_attr_shv_59_qs)
  );


  // F[attr_trig_59]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_59_attr_trig_59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_59_attr_trig_59_we),
    .wd     (clicint_59_attr_trig_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[59].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_59_attr_trig_59_qs)
  );


  // F[attr_mode_59]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_59_attr_mode_59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_59_attr_mode_59_we),
    .wd     (clicint_59_attr_mode_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[59].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_59_attr_mode_59_qs)
  );


  // F[ctl_59]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_59_ctl_59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_59_ctl_59_we),
    .wd     (clicint_59_ctl_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[59].ctl.q ),

    // to register interface (read)
    .qs     (clicint_59_ctl_59_qs)
  );


  // Subregister 60 of Multireg clicint
  // R[clicint_60]: V(False)

  // F[ip_60]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_60_ip_60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_60_ip_60_we),
    .wd     (clicint_60_ip_60_wd),

    // from internal hardware
    .de     (hw2reg.clicint[60].ip.de),
    .d      (hw2reg.clicint[60].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[60].ip.q ),

    // to register interface (read)
    .qs     (clicint_60_ip_60_qs)
  );


  // F[ie_60]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_60_ie_60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_60_ie_60_we),
    .wd     (clicint_60_ie_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[60].ie.q ),

    // to register interface (read)
    .qs     (clicint_60_ie_60_qs)
  );


  // F[attr_shv_60]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_60_attr_shv_60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_60_attr_shv_60_we),
    .wd     (clicint_60_attr_shv_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[60].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_60_attr_shv_60_qs)
  );


  // F[attr_trig_60]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_60_attr_trig_60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_60_attr_trig_60_we),
    .wd     (clicint_60_attr_trig_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[60].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_60_attr_trig_60_qs)
  );


  // F[attr_mode_60]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_60_attr_mode_60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_60_attr_mode_60_we),
    .wd     (clicint_60_attr_mode_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[60].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_60_attr_mode_60_qs)
  );


  // F[ctl_60]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_60_ctl_60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_60_ctl_60_we),
    .wd     (clicint_60_ctl_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[60].ctl.q ),

    // to register interface (read)
    .qs     (clicint_60_ctl_60_qs)
  );


  // Subregister 61 of Multireg clicint
  // R[clicint_61]: V(False)

  // F[ip_61]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_61_ip_61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_61_ip_61_we),
    .wd     (clicint_61_ip_61_wd),

    // from internal hardware
    .de     (hw2reg.clicint[61].ip.de),
    .d      (hw2reg.clicint[61].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[61].ip.q ),

    // to register interface (read)
    .qs     (clicint_61_ip_61_qs)
  );


  // F[ie_61]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_61_ie_61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_61_ie_61_we),
    .wd     (clicint_61_ie_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[61].ie.q ),

    // to register interface (read)
    .qs     (clicint_61_ie_61_qs)
  );


  // F[attr_shv_61]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_61_attr_shv_61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_61_attr_shv_61_we),
    .wd     (clicint_61_attr_shv_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[61].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_61_attr_shv_61_qs)
  );


  // F[attr_trig_61]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_61_attr_trig_61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_61_attr_trig_61_we),
    .wd     (clicint_61_attr_trig_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[61].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_61_attr_trig_61_qs)
  );


  // F[attr_mode_61]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_61_attr_mode_61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_61_attr_mode_61_we),
    .wd     (clicint_61_attr_mode_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[61].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_61_attr_mode_61_qs)
  );


  // F[ctl_61]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_61_ctl_61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_61_ctl_61_we),
    .wd     (clicint_61_ctl_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[61].ctl.q ),

    // to register interface (read)
    .qs     (clicint_61_ctl_61_qs)
  );


  // Subregister 62 of Multireg clicint
  // R[clicint_62]: V(False)

  // F[ip_62]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_62_ip_62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_62_ip_62_we),
    .wd     (clicint_62_ip_62_wd),

    // from internal hardware
    .de     (hw2reg.clicint[62].ip.de),
    .d      (hw2reg.clicint[62].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[62].ip.q ),

    // to register interface (read)
    .qs     (clicint_62_ip_62_qs)
  );


  // F[ie_62]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_62_ie_62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_62_ie_62_we),
    .wd     (clicint_62_ie_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[62].ie.q ),

    // to register interface (read)
    .qs     (clicint_62_ie_62_qs)
  );


  // F[attr_shv_62]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_62_attr_shv_62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_62_attr_shv_62_we),
    .wd     (clicint_62_attr_shv_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[62].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_62_attr_shv_62_qs)
  );


  // F[attr_trig_62]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_62_attr_trig_62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_62_attr_trig_62_we),
    .wd     (clicint_62_attr_trig_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[62].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_62_attr_trig_62_qs)
  );


  // F[attr_mode_62]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_62_attr_mode_62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_62_attr_mode_62_we),
    .wd     (clicint_62_attr_mode_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[62].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_62_attr_mode_62_qs)
  );


  // F[ctl_62]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_62_ctl_62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_62_ctl_62_we),
    .wd     (clicint_62_ctl_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[62].ctl.q ),

    // to register interface (read)
    .qs     (clicint_62_ctl_62_qs)
  );


  // Subregister 63 of Multireg clicint
  // R[clicint_63]: V(False)

  // F[ip_63]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_63_ip_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_63_ip_63_we),
    .wd     (clicint_63_ip_63_wd),

    // from internal hardware
    .de     (hw2reg.clicint[63].ip.de),
    .d      (hw2reg.clicint[63].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[63].ip.q ),

    // to register interface (read)
    .qs     (clicint_63_ip_63_qs)
  );


  // F[ie_63]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_63_ie_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_63_ie_63_we),
    .wd     (clicint_63_ie_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[63].ie.q ),

    // to register interface (read)
    .qs     (clicint_63_ie_63_qs)
  );


  // F[attr_shv_63]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_63_attr_shv_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_63_attr_shv_63_we),
    .wd     (clicint_63_attr_shv_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[63].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_63_attr_shv_63_qs)
  );


  // F[attr_trig_63]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_63_attr_trig_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_63_attr_trig_63_we),
    .wd     (clicint_63_attr_trig_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[63].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_63_attr_trig_63_qs)
  );


  // F[attr_mode_63]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_63_attr_mode_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_63_attr_mode_63_we),
    .wd     (clicint_63_attr_mode_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[63].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_63_attr_mode_63_qs)
  );


  // F[ctl_63]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_63_ctl_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_63_ctl_63_we),
    .wd     (clicint_63_ctl_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[63].ctl.q ),

    // to register interface (read)
    .qs     (clicint_63_ctl_63_qs)
  );


  // Subregister 64 of Multireg clicint
  // R[clicint_64]: V(False)

  // F[ip_64]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_64_ip_64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_64_ip_64_we),
    .wd     (clicint_64_ip_64_wd),

    // from internal hardware
    .de     (hw2reg.clicint[64].ip.de),
    .d      (hw2reg.clicint[64].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[64].ip.q ),

    // to register interface (read)
    .qs     (clicint_64_ip_64_qs)
  );


  // F[ie_64]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_64_ie_64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_64_ie_64_we),
    .wd     (clicint_64_ie_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[64].ie.q ),

    // to register interface (read)
    .qs     (clicint_64_ie_64_qs)
  );


  // F[attr_shv_64]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_64_attr_shv_64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_64_attr_shv_64_we),
    .wd     (clicint_64_attr_shv_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[64].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_64_attr_shv_64_qs)
  );


  // F[attr_trig_64]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_64_attr_trig_64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_64_attr_trig_64_we),
    .wd     (clicint_64_attr_trig_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[64].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_64_attr_trig_64_qs)
  );


  // F[attr_mode_64]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_64_attr_mode_64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_64_attr_mode_64_we),
    .wd     (clicint_64_attr_mode_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[64].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_64_attr_mode_64_qs)
  );


  // F[ctl_64]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_64_ctl_64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_64_ctl_64_we),
    .wd     (clicint_64_ctl_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[64].ctl.q ),

    // to register interface (read)
    .qs     (clicint_64_ctl_64_qs)
  );


  // Subregister 65 of Multireg clicint
  // R[clicint_65]: V(False)

  // F[ip_65]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_65_ip_65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_65_ip_65_we),
    .wd     (clicint_65_ip_65_wd),

    // from internal hardware
    .de     (hw2reg.clicint[65].ip.de),
    .d      (hw2reg.clicint[65].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[65].ip.q ),

    // to register interface (read)
    .qs     (clicint_65_ip_65_qs)
  );


  // F[ie_65]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_65_ie_65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_65_ie_65_we),
    .wd     (clicint_65_ie_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[65].ie.q ),

    // to register interface (read)
    .qs     (clicint_65_ie_65_qs)
  );


  // F[attr_shv_65]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_65_attr_shv_65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_65_attr_shv_65_we),
    .wd     (clicint_65_attr_shv_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[65].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_65_attr_shv_65_qs)
  );


  // F[attr_trig_65]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_65_attr_trig_65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_65_attr_trig_65_we),
    .wd     (clicint_65_attr_trig_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[65].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_65_attr_trig_65_qs)
  );


  // F[attr_mode_65]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_65_attr_mode_65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_65_attr_mode_65_we),
    .wd     (clicint_65_attr_mode_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[65].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_65_attr_mode_65_qs)
  );


  // F[ctl_65]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_65_ctl_65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_65_ctl_65_we),
    .wd     (clicint_65_ctl_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[65].ctl.q ),

    // to register interface (read)
    .qs     (clicint_65_ctl_65_qs)
  );


  // Subregister 66 of Multireg clicint
  // R[clicint_66]: V(False)

  // F[ip_66]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_66_ip_66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_66_ip_66_we),
    .wd     (clicint_66_ip_66_wd),

    // from internal hardware
    .de     (hw2reg.clicint[66].ip.de),
    .d      (hw2reg.clicint[66].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[66].ip.q ),

    // to register interface (read)
    .qs     (clicint_66_ip_66_qs)
  );


  // F[ie_66]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_66_ie_66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_66_ie_66_we),
    .wd     (clicint_66_ie_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[66].ie.q ),

    // to register interface (read)
    .qs     (clicint_66_ie_66_qs)
  );


  // F[attr_shv_66]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_66_attr_shv_66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_66_attr_shv_66_we),
    .wd     (clicint_66_attr_shv_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[66].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_66_attr_shv_66_qs)
  );


  // F[attr_trig_66]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_66_attr_trig_66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_66_attr_trig_66_we),
    .wd     (clicint_66_attr_trig_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[66].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_66_attr_trig_66_qs)
  );


  // F[attr_mode_66]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_66_attr_mode_66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_66_attr_mode_66_we),
    .wd     (clicint_66_attr_mode_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[66].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_66_attr_mode_66_qs)
  );


  // F[ctl_66]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_66_ctl_66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_66_ctl_66_we),
    .wd     (clicint_66_ctl_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[66].ctl.q ),

    // to register interface (read)
    .qs     (clicint_66_ctl_66_qs)
  );


  // Subregister 67 of Multireg clicint
  // R[clicint_67]: V(False)

  // F[ip_67]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_67_ip_67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_67_ip_67_we),
    .wd     (clicint_67_ip_67_wd),

    // from internal hardware
    .de     (hw2reg.clicint[67].ip.de),
    .d      (hw2reg.clicint[67].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[67].ip.q ),

    // to register interface (read)
    .qs     (clicint_67_ip_67_qs)
  );


  // F[ie_67]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_67_ie_67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_67_ie_67_we),
    .wd     (clicint_67_ie_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[67].ie.q ),

    // to register interface (read)
    .qs     (clicint_67_ie_67_qs)
  );


  // F[attr_shv_67]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_67_attr_shv_67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_67_attr_shv_67_we),
    .wd     (clicint_67_attr_shv_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[67].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_67_attr_shv_67_qs)
  );


  // F[attr_trig_67]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_67_attr_trig_67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_67_attr_trig_67_we),
    .wd     (clicint_67_attr_trig_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[67].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_67_attr_trig_67_qs)
  );


  // F[attr_mode_67]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_67_attr_mode_67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_67_attr_mode_67_we),
    .wd     (clicint_67_attr_mode_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[67].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_67_attr_mode_67_qs)
  );


  // F[ctl_67]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_67_ctl_67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_67_ctl_67_we),
    .wd     (clicint_67_ctl_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[67].ctl.q ),

    // to register interface (read)
    .qs     (clicint_67_ctl_67_qs)
  );


  // Subregister 68 of Multireg clicint
  // R[clicint_68]: V(False)

  // F[ip_68]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_68_ip_68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_68_ip_68_we),
    .wd     (clicint_68_ip_68_wd),

    // from internal hardware
    .de     (hw2reg.clicint[68].ip.de),
    .d      (hw2reg.clicint[68].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[68].ip.q ),

    // to register interface (read)
    .qs     (clicint_68_ip_68_qs)
  );


  // F[ie_68]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_68_ie_68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_68_ie_68_we),
    .wd     (clicint_68_ie_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[68].ie.q ),

    // to register interface (read)
    .qs     (clicint_68_ie_68_qs)
  );


  // F[attr_shv_68]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_68_attr_shv_68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_68_attr_shv_68_we),
    .wd     (clicint_68_attr_shv_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[68].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_68_attr_shv_68_qs)
  );


  // F[attr_trig_68]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_68_attr_trig_68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_68_attr_trig_68_we),
    .wd     (clicint_68_attr_trig_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[68].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_68_attr_trig_68_qs)
  );


  // F[attr_mode_68]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_68_attr_mode_68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_68_attr_mode_68_we),
    .wd     (clicint_68_attr_mode_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[68].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_68_attr_mode_68_qs)
  );


  // F[ctl_68]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_68_ctl_68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_68_ctl_68_we),
    .wd     (clicint_68_ctl_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[68].ctl.q ),

    // to register interface (read)
    .qs     (clicint_68_ctl_68_qs)
  );


  // Subregister 69 of Multireg clicint
  // R[clicint_69]: V(False)

  // F[ip_69]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_69_ip_69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_69_ip_69_we),
    .wd     (clicint_69_ip_69_wd),

    // from internal hardware
    .de     (hw2reg.clicint[69].ip.de),
    .d      (hw2reg.clicint[69].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[69].ip.q ),

    // to register interface (read)
    .qs     (clicint_69_ip_69_qs)
  );


  // F[ie_69]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_69_ie_69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_69_ie_69_we),
    .wd     (clicint_69_ie_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[69].ie.q ),

    // to register interface (read)
    .qs     (clicint_69_ie_69_qs)
  );


  // F[attr_shv_69]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_69_attr_shv_69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_69_attr_shv_69_we),
    .wd     (clicint_69_attr_shv_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[69].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_69_attr_shv_69_qs)
  );


  // F[attr_trig_69]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_69_attr_trig_69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_69_attr_trig_69_we),
    .wd     (clicint_69_attr_trig_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[69].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_69_attr_trig_69_qs)
  );


  // F[attr_mode_69]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_69_attr_mode_69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_69_attr_mode_69_we),
    .wd     (clicint_69_attr_mode_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[69].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_69_attr_mode_69_qs)
  );


  // F[ctl_69]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_69_ctl_69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_69_ctl_69_we),
    .wd     (clicint_69_ctl_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[69].ctl.q ),

    // to register interface (read)
    .qs     (clicint_69_ctl_69_qs)
  );


  // Subregister 70 of Multireg clicint
  // R[clicint_70]: V(False)

  // F[ip_70]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_70_ip_70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_70_ip_70_we),
    .wd     (clicint_70_ip_70_wd),

    // from internal hardware
    .de     (hw2reg.clicint[70].ip.de),
    .d      (hw2reg.clicint[70].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[70].ip.q ),

    // to register interface (read)
    .qs     (clicint_70_ip_70_qs)
  );


  // F[ie_70]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_70_ie_70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_70_ie_70_we),
    .wd     (clicint_70_ie_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[70].ie.q ),

    // to register interface (read)
    .qs     (clicint_70_ie_70_qs)
  );


  // F[attr_shv_70]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_70_attr_shv_70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_70_attr_shv_70_we),
    .wd     (clicint_70_attr_shv_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[70].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_70_attr_shv_70_qs)
  );


  // F[attr_trig_70]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_70_attr_trig_70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_70_attr_trig_70_we),
    .wd     (clicint_70_attr_trig_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[70].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_70_attr_trig_70_qs)
  );


  // F[attr_mode_70]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_70_attr_mode_70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_70_attr_mode_70_we),
    .wd     (clicint_70_attr_mode_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[70].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_70_attr_mode_70_qs)
  );


  // F[ctl_70]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_70_ctl_70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_70_ctl_70_we),
    .wd     (clicint_70_ctl_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[70].ctl.q ),

    // to register interface (read)
    .qs     (clicint_70_ctl_70_qs)
  );


  // Subregister 71 of Multireg clicint
  // R[clicint_71]: V(False)

  // F[ip_71]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_71_ip_71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_71_ip_71_we),
    .wd     (clicint_71_ip_71_wd),

    // from internal hardware
    .de     (hw2reg.clicint[71].ip.de),
    .d      (hw2reg.clicint[71].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[71].ip.q ),

    // to register interface (read)
    .qs     (clicint_71_ip_71_qs)
  );


  // F[ie_71]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_71_ie_71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_71_ie_71_we),
    .wd     (clicint_71_ie_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[71].ie.q ),

    // to register interface (read)
    .qs     (clicint_71_ie_71_qs)
  );


  // F[attr_shv_71]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_71_attr_shv_71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_71_attr_shv_71_we),
    .wd     (clicint_71_attr_shv_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[71].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_71_attr_shv_71_qs)
  );


  // F[attr_trig_71]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_71_attr_trig_71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_71_attr_trig_71_we),
    .wd     (clicint_71_attr_trig_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[71].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_71_attr_trig_71_qs)
  );


  // F[attr_mode_71]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_71_attr_mode_71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_71_attr_mode_71_we),
    .wd     (clicint_71_attr_mode_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[71].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_71_attr_mode_71_qs)
  );


  // F[ctl_71]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_71_ctl_71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_71_ctl_71_we),
    .wd     (clicint_71_ctl_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[71].ctl.q ),

    // to register interface (read)
    .qs     (clicint_71_ctl_71_qs)
  );


  // Subregister 72 of Multireg clicint
  // R[clicint_72]: V(False)

  // F[ip_72]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_72_ip_72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_72_ip_72_we),
    .wd     (clicint_72_ip_72_wd),

    // from internal hardware
    .de     (hw2reg.clicint[72].ip.de),
    .d      (hw2reg.clicint[72].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[72].ip.q ),

    // to register interface (read)
    .qs     (clicint_72_ip_72_qs)
  );


  // F[ie_72]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_72_ie_72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_72_ie_72_we),
    .wd     (clicint_72_ie_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[72].ie.q ),

    // to register interface (read)
    .qs     (clicint_72_ie_72_qs)
  );


  // F[attr_shv_72]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_72_attr_shv_72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_72_attr_shv_72_we),
    .wd     (clicint_72_attr_shv_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[72].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_72_attr_shv_72_qs)
  );


  // F[attr_trig_72]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_72_attr_trig_72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_72_attr_trig_72_we),
    .wd     (clicint_72_attr_trig_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[72].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_72_attr_trig_72_qs)
  );


  // F[attr_mode_72]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_72_attr_mode_72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_72_attr_mode_72_we),
    .wd     (clicint_72_attr_mode_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[72].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_72_attr_mode_72_qs)
  );


  // F[ctl_72]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_72_ctl_72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_72_ctl_72_we),
    .wd     (clicint_72_ctl_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[72].ctl.q ),

    // to register interface (read)
    .qs     (clicint_72_ctl_72_qs)
  );


  // Subregister 73 of Multireg clicint
  // R[clicint_73]: V(False)

  // F[ip_73]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_73_ip_73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_73_ip_73_we),
    .wd     (clicint_73_ip_73_wd),

    // from internal hardware
    .de     (hw2reg.clicint[73].ip.de),
    .d      (hw2reg.clicint[73].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[73].ip.q ),

    // to register interface (read)
    .qs     (clicint_73_ip_73_qs)
  );


  // F[ie_73]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_73_ie_73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_73_ie_73_we),
    .wd     (clicint_73_ie_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[73].ie.q ),

    // to register interface (read)
    .qs     (clicint_73_ie_73_qs)
  );


  // F[attr_shv_73]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_73_attr_shv_73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_73_attr_shv_73_we),
    .wd     (clicint_73_attr_shv_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[73].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_73_attr_shv_73_qs)
  );


  // F[attr_trig_73]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_73_attr_trig_73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_73_attr_trig_73_we),
    .wd     (clicint_73_attr_trig_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[73].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_73_attr_trig_73_qs)
  );


  // F[attr_mode_73]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_73_attr_mode_73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_73_attr_mode_73_we),
    .wd     (clicint_73_attr_mode_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[73].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_73_attr_mode_73_qs)
  );


  // F[ctl_73]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_73_ctl_73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_73_ctl_73_we),
    .wd     (clicint_73_ctl_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[73].ctl.q ),

    // to register interface (read)
    .qs     (clicint_73_ctl_73_qs)
  );


  // Subregister 74 of Multireg clicint
  // R[clicint_74]: V(False)

  // F[ip_74]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_74_ip_74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_74_ip_74_we),
    .wd     (clicint_74_ip_74_wd),

    // from internal hardware
    .de     (hw2reg.clicint[74].ip.de),
    .d      (hw2reg.clicint[74].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[74].ip.q ),

    // to register interface (read)
    .qs     (clicint_74_ip_74_qs)
  );


  // F[ie_74]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_74_ie_74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_74_ie_74_we),
    .wd     (clicint_74_ie_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[74].ie.q ),

    // to register interface (read)
    .qs     (clicint_74_ie_74_qs)
  );


  // F[attr_shv_74]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_74_attr_shv_74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_74_attr_shv_74_we),
    .wd     (clicint_74_attr_shv_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[74].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_74_attr_shv_74_qs)
  );


  // F[attr_trig_74]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_74_attr_trig_74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_74_attr_trig_74_we),
    .wd     (clicint_74_attr_trig_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[74].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_74_attr_trig_74_qs)
  );


  // F[attr_mode_74]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_74_attr_mode_74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_74_attr_mode_74_we),
    .wd     (clicint_74_attr_mode_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[74].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_74_attr_mode_74_qs)
  );


  // F[ctl_74]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_74_ctl_74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_74_ctl_74_we),
    .wd     (clicint_74_ctl_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[74].ctl.q ),

    // to register interface (read)
    .qs     (clicint_74_ctl_74_qs)
  );


  // Subregister 75 of Multireg clicint
  // R[clicint_75]: V(False)

  // F[ip_75]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_75_ip_75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_75_ip_75_we),
    .wd     (clicint_75_ip_75_wd),

    // from internal hardware
    .de     (hw2reg.clicint[75].ip.de),
    .d      (hw2reg.clicint[75].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[75].ip.q ),

    // to register interface (read)
    .qs     (clicint_75_ip_75_qs)
  );


  // F[ie_75]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_75_ie_75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_75_ie_75_we),
    .wd     (clicint_75_ie_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[75].ie.q ),

    // to register interface (read)
    .qs     (clicint_75_ie_75_qs)
  );


  // F[attr_shv_75]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_75_attr_shv_75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_75_attr_shv_75_we),
    .wd     (clicint_75_attr_shv_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[75].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_75_attr_shv_75_qs)
  );


  // F[attr_trig_75]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_75_attr_trig_75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_75_attr_trig_75_we),
    .wd     (clicint_75_attr_trig_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[75].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_75_attr_trig_75_qs)
  );


  // F[attr_mode_75]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_75_attr_mode_75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_75_attr_mode_75_we),
    .wd     (clicint_75_attr_mode_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[75].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_75_attr_mode_75_qs)
  );


  // F[ctl_75]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_75_ctl_75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_75_ctl_75_we),
    .wd     (clicint_75_ctl_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[75].ctl.q ),

    // to register interface (read)
    .qs     (clicint_75_ctl_75_qs)
  );


  // Subregister 76 of Multireg clicint
  // R[clicint_76]: V(False)

  // F[ip_76]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_76_ip_76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_76_ip_76_we),
    .wd     (clicint_76_ip_76_wd),

    // from internal hardware
    .de     (hw2reg.clicint[76].ip.de),
    .d      (hw2reg.clicint[76].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[76].ip.q ),

    // to register interface (read)
    .qs     (clicint_76_ip_76_qs)
  );


  // F[ie_76]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_76_ie_76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_76_ie_76_we),
    .wd     (clicint_76_ie_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[76].ie.q ),

    // to register interface (read)
    .qs     (clicint_76_ie_76_qs)
  );


  // F[attr_shv_76]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_76_attr_shv_76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_76_attr_shv_76_we),
    .wd     (clicint_76_attr_shv_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[76].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_76_attr_shv_76_qs)
  );


  // F[attr_trig_76]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_76_attr_trig_76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_76_attr_trig_76_we),
    .wd     (clicint_76_attr_trig_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[76].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_76_attr_trig_76_qs)
  );


  // F[attr_mode_76]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_76_attr_mode_76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_76_attr_mode_76_we),
    .wd     (clicint_76_attr_mode_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[76].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_76_attr_mode_76_qs)
  );


  // F[ctl_76]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_76_ctl_76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_76_ctl_76_we),
    .wd     (clicint_76_ctl_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[76].ctl.q ),

    // to register interface (read)
    .qs     (clicint_76_ctl_76_qs)
  );


  // Subregister 77 of Multireg clicint
  // R[clicint_77]: V(False)

  // F[ip_77]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_77_ip_77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_77_ip_77_we),
    .wd     (clicint_77_ip_77_wd),

    // from internal hardware
    .de     (hw2reg.clicint[77].ip.de),
    .d      (hw2reg.clicint[77].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[77].ip.q ),

    // to register interface (read)
    .qs     (clicint_77_ip_77_qs)
  );


  // F[ie_77]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_77_ie_77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_77_ie_77_we),
    .wd     (clicint_77_ie_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[77].ie.q ),

    // to register interface (read)
    .qs     (clicint_77_ie_77_qs)
  );


  // F[attr_shv_77]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_77_attr_shv_77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_77_attr_shv_77_we),
    .wd     (clicint_77_attr_shv_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[77].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_77_attr_shv_77_qs)
  );


  // F[attr_trig_77]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_77_attr_trig_77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_77_attr_trig_77_we),
    .wd     (clicint_77_attr_trig_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[77].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_77_attr_trig_77_qs)
  );


  // F[attr_mode_77]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_77_attr_mode_77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_77_attr_mode_77_we),
    .wd     (clicint_77_attr_mode_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[77].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_77_attr_mode_77_qs)
  );


  // F[ctl_77]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_77_ctl_77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_77_ctl_77_we),
    .wd     (clicint_77_ctl_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[77].ctl.q ),

    // to register interface (read)
    .qs     (clicint_77_ctl_77_qs)
  );


  // Subregister 78 of Multireg clicint
  // R[clicint_78]: V(False)

  // F[ip_78]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_78_ip_78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_78_ip_78_we),
    .wd     (clicint_78_ip_78_wd),

    // from internal hardware
    .de     (hw2reg.clicint[78].ip.de),
    .d      (hw2reg.clicint[78].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[78].ip.q ),

    // to register interface (read)
    .qs     (clicint_78_ip_78_qs)
  );


  // F[ie_78]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_78_ie_78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_78_ie_78_we),
    .wd     (clicint_78_ie_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[78].ie.q ),

    // to register interface (read)
    .qs     (clicint_78_ie_78_qs)
  );


  // F[attr_shv_78]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_78_attr_shv_78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_78_attr_shv_78_we),
    .wd     (clicint_78_attr_shv_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[78].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_78_attr_shv_78_qs)
  );


  // F[attr_trig_78]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_78_attr_trig_78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_78_attr_trig_78_we),
    .wd     (clicint_78_attr_trig_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[78].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_78_attr_trig_78_qs)
  );


  // F[attr_mode_78]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_78_attr_mode_78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_78_attr_mode_78_we),
    .wd     (clicint_78_attr_mode_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[78].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_78_attr_mode_78_qs)
  );


  // F[ctl_78]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_78_ctl_78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_78_ctl_78_we),
    .wd     (clicint_78_ctl_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[78].ctl.q ),

    // to register interface (read)
    .qs     (clicint_78_ctl_78_qs)
  );


  // Subregister 79 of Multireg clicint
  // R[clicint_79]: V(False)

  // F[ip_79]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_79_ip_79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_79_ip_79_we),
    .wd     (clicint_79_ip_79_wd),

    // from internal hardware
    .de     (hw2reg.clicint[79].ip.de),
    .d      (hw2reg.clicint[79].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[79].ip.q ),

    // to register interface (read)
    .qs     (clicint_79_ip_79_qs)
  );


  // F[ie_79]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_79_ie_79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_79_ie_79_we),
    .wd     (clicint_79_ie_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[79].ie.q ),

    // to register interface (read)
    .qs     (clicint_79_ie_79_qs)
  );


  // F[attr_shv_79]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_79_attr_shv_79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_79_attr_shv_79_we),
    .wd     (clicint_79_attr_shv_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[79].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_79_attr_shv_79_qs)
  );


  // F[attr_trig_79]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_79_attr_trig_79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_79_attr_trig_79_we),
    .wd     (clicint_79_attr_trig_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[79].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_79_attr_trig_79_qs)
  );


  // F[attr_mode_79]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_79_attr_mode_79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_79_attr_mode_79_we),
    .wd     (clicint_79_attr_mode_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[79].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_79_attr_mode_79_qs)
  );


  // F[ctl_79]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_79_ctl_79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_79_ctl_79_we),
    .wd     (clicint_79_ctl_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[79].ctl.q ),

    // to register interface (read)
    .qs     (clicint_79_ctl_79_qs)
  );


  // Subregister 80 of Multireg clicint
  // R[clicint_80]: V(False)

  // F[ip_80]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_80_ip_80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_80_ip_80_we),
    .wd     (clicint_80_ip_80_wd),

    // from internal hardware
    .de     (hw2reg.clicint[80].ip.de),
    .d      (hw2reg.clicint[80].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[80].ip.q ),

    // to register interface (read)
    .qs     (clicint_80_ip_80_qs)
  );


  // F[ie_80]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_80_ie_80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_80_ie_80_we),
    .wd     (clicint_80_ie_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[80].ie.q ),

    // to register interface (read)
    .qs     (clicint_80_ie_80_qs)
  );


  // F[attr_shv_80]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_80_attr_shv_80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_80_attr_shv_80_we),
    .wd     (clicint_80_attr_shv_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[80].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_80_attr_shv_80_qs)
  );


  // F[attr_trig_80]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_80_attr_trig_80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_80_attr_trig_80_we),
    .wd     (clicint_80_attr_trig_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[80].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_80_attr_trig_80_qs)
  );


  // F[attr_mode_80]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_80_attr_mode_80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_80_attr_mode_80_we),
    .wd     (clicint_80_attr_mode_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[80].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_80_attr_mode_80_qs)
  );


  // F[ctl_80]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_80_ctl_80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_80_ctl_80_we),
    .wd     (clicint_80_ctl_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[80].ctl.q ),

    // to register interface (read)
    .qs     (clicint_80_ctl_80_qs)
  );


  // Subregister 81 of Multireg clicint
  // R[clicint_81]: V(False)

  // F[ip_81]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_81_ip_81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_81_ip_81_we),
    .wd     (clicint_81_ip_81_wd),

    // from internal hardware
    .de     (hw2reg.clicint[81].ip.de),
    .d      (hw2reg.clicint[81].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[81].ip.q ),

    // to register interface (read)
    .qs     (clicint_81_ip_81_qs)
  );


  // F[ie_81]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_81_ie_81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_81_ie_81_we),
    .wd     (clicint_81_ie_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[81].ie.q ),

    // to register interface (read)
    .qs     (clicint_81_ie_81_qs)
  );


  // F[attr_shv_81]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_81_attr_shv_81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_81_attr_shv_81_we),
    .wd     (clicint_81_attr_shv_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[81].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_81_attr_shv_81_qs)
  );


  // F[attr_trig_81]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_81_attr_trig_81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_81_attr_trig_81_we),
    .wd     (clicint_81_attr_trig_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[81].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_81_attr_trig_81_qs)
  );


  // F[attr_mode_81]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_81_attr_mode_81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_81_attr_mode_81_we),
    .wd     (clicint_81_attr_mode_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[81].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_81_attr_mode_81_qs)
  );


  // F[ctl_81]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_81_ctl_81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_81_ctl_81_we),
    .wd     (clicint_81_ctl_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[81].ctl.q ),

    // to register interface (read)
    .qs     (clicint_81_ctl_81_qs)
  );


  // Subregister 82 of Multireg clicint
  // R[clicint_82]: V(False)

  // F[ip_82]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_82_ip_82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_82_ip_82_we),
    .wd     (clicint_82_ip_82_wd),

    // from internal hardware
    .de     (hw2reg.clicint[82].ip.de),
    .d      (hw2reg.clicint[82].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[82].ip.q ),

    // to register interface (read)
    .qs     (clicint_82_ip_82_qs)
  );


  // F[ie_82]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_82_ie_82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_82_ie_82_we),
    .wd     (clicint_82_ie_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[82].ie.q ),

    // to register interface (read)
    .qs     (clicint_82_ie_82_qs)
  );


  // F[attr_shv_82]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_82_attr_shv_82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_82_attr_shv_82_we),
    .wd     (clicint_82_attr_shv_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[82].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_82_attr_shv_82_qs)
  );


  // F[attr_trig_82]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_82_attr_trig_82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_82_attr_trig_82_we),
    .wd     (clicint_82_attr_trig_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[82].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_82_attr_trig_82_qs)
  );


  // F[attr_mode_82]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_82_attr_mode_82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_82_attr_mode_82_we),
    .wd     (clicint_82_attr_mode_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[82].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_82_attr_mode_82_qs)
  );


  // F[ctl_82]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_82_ctl_82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_82_ctl_82_we),
    .wd     (clicint_82_ctl_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[82].ctl.q ),

    // to register interface (read)
    .qs     (clicint_82_ctl_82_qs)
  );


  // Subregister 83 of Multireg clicint
  // R[clicint_83]: V(False)

  // F[ip_83]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_83_ip_83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_83_ip_83_we),
    .wd     (clicint_83_ip_83_wd),

    // from internal hardware
    .de     (hw2reg.clicint[83].ip.de),
    .d      (hw2reg.clicint[83].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[83].ip.q ),

    // to register interface (read)
    .qs     (clicint_83_ip_83_qs)
  );


  // F[ie_83]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_83_ie_83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_83_ie_83_we),
    .wd     (clicint_83_ie_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[83].ie.q ),

    // to register interface (read)
    .qs     (clicint_83_ie_83_qs)
  );


  // F[attr_shv_83]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_83_attr_shv_83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_83_attr_shv_83_we),
    .wd     (clicint_83_attr_shv_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[83].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_83_attr_shv_83_qs)
  );


  // F[attr_trig_83]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_83_attr_trig_83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_83_attr_trig_83_we),
    .wd     (clicint_83_attr_trig_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[83].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_83_attr_trig_83_qs)
  );


  // F[attr_mode_83]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_83_attr_mode_83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_83_attr_mode_83_we),
    .wd     (clicint_83_attr_mode_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[83].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_83_attr_mode_83_qs)
  );


  // F[ctl_83]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_83_ctl_83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_83_ctl_83_we),
    .wd     (clicint_83_ctl_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[83].ctl.q ),

    // to register interface (read)
    .qs     (clicint_83_ctl_83_qs)
  );


  // Subregister 84 of Multireg clicint
  // R[clicint_84]: V(False)

  // F[ip_84]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_84_ip_84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_84_ip_84_we),
    .wd     (clicint_84_ip_84_wd),

    // from internal hardware
    .de     (hw2reg.clicint[84].ip.de),
    .d      (hw2reg.clicint[84].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[84].ip.q ),

    // to register interface (read)
    .qs     (clicint_84_ip_84_qs)
  );


  // F[ie_84]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_84_ie_84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_84_ie_84_we),
    .wd     (clicint_84_ie_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[84].ie.q ),

    // to register interface (read)
    .qs     (clicint_84_ie_84_qs)
  );


  // F[attr_shv_84]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_84_attr_shv_84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_84_attr_shv_84_we),
    .wd     (clicint_84_attr_shv_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[84].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_84_attr_shv_84_qs)
  );


  // F[attr_trig_84]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_84_attr_trig_84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_84_attr_trig_84_we),
    .wd     (clicint_84_attr_trig_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[84].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_84_attr_trig_84_qs)
  );


  // F[attr_mode_84]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_84_attr_mode_84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_84_attr_mode_84_we),
    .wd     (clicint_84_attr_mode_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[84].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_84_attr_mode_84_qs)
  );


  // F[ctl_84]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_84_ctl_84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_84_ctl_84_we),
    .wd     (clicint_84_ctl_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[84].ctl.q ),

    // to register interface (read)
    .qs     (clicint_84_ctl_84_qs)
  );


  // Subregister 85 of Multireg clicint
  // R[clicint_85]: V(False)

  // F[ip_85]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_85_ip_85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_85_ip_85_we),
    .wd     (clicint_85_ip_85_wd),

    // from internal hardware
    .de     (hw2reg.clicint[85].ip.de),
    .d      (hw2reg.clicint[85].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[85].ip.q ),

    // to register interface (read)
    .qs     (clicint_85_ip_85_qs)
  );


  // F[ie_85]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_85_ie_85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_85_ie_85_we),
    .wd     (clicint_85_ie_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[85].ie.q ),

    // to register interface (read)
    .qs     (clicint_85_ie_85_qs)
  );


  // F[attr_shv_85]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_85_attr_shv_85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_85_attr_shv_85_we),
    .wd     (clicint_85_attr_shv_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[85].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_85_attr_shv_85_qs)
  );


  // F[attr_trig_85]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_85_attr_trig_85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_85_attr_trig_85_we),
    .wd     (clicint_85_attr_trig_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[85].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_85_attr_trig_85_qs)
  );


  // F[attr_mode_85]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_85_attr_mode_85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_85_attr_mode_85_we),
    .wd     (clicint_85_attr_mode_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[85].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_85_attr_mode_85_qs)
  );


  // F[ctl_85]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_85_ctl_85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_85_ctl_85_we),
    .wd     (clicint_85_ctl_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[85].ctl.q ),

    // to register interface (read)
    .qs     (clicint_85_ctl_85_qs)
  );


  // Subregister 86 of Multireg clicint
  // R[clicint_86]: V(False)

  // F[ip_86]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_86_ip_86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_86_ip_86_we),
    .wd     (clicint_86_ip_86_wd),

    // from internal hardware
    .de     (hw2reg.clicint[86].ip.de),
    .d      (hw2reg.clicint[86].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[86].ip.q ),

    // to register interface (read)
    .qs     (clicint_86_ip_86_qs)
  );


  // F[ie_86]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_86_ie_86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_86_ie_86_we),
    .wd     (clicint_86_ie_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[86].ie.q ),

    // to register interface (read)
    .qs     (clicint_86_ie_86_qs)
  );


  // F[attr_shv_86]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_86_attr_shv_86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_86_attr_shv_86_we),
    .wd     (clicint_86_attr_shv_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[86].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_86_attr_shv_86_qs)
  );


  // F[attr_trig_86]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_86_attr_trig_86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_86_attr_trig_86_we),
    .wd     (clicint_86_attr_trig_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[86].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_86_attr_trig_86_qs)
  );


  // F[attr_mode_86]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_86_attr_mode_86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_86_attr_mode_86_we),
    .wd     (clicint_86_attr_mode_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[86].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_86_attr_mode_86_qs)
  );


  // F[ctl_86]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_86_ctl_86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_86_ctl_86_we),
    .wd     (clicint_86_ctl_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[86].ctl.q ),

    // to register interface (read)
    .qs     (clicint_86_ctl_86_qs)
  );


  // Subregister 87 of Multireg clicint
  // R[clicint_87]: V(False)

  // F[ip_87]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_87_ip_87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_87_ip_87_we),
    .wd     (clicint_87_ip_87_wd),

    // from internal hardware
    .de     (hw2reg.clicint[87].ip.de),
    .d      (hw2reg.clicint[87].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[87].ip.q ),

    // to register interface (read)
    .qs     (clicint_87_ip_87_qs)
  );


  // F[ie_87]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_87_ie_87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_87_ie_87_we),
    .wd     (clicint_87_ie_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[87].ie.q ),

    // to register interface (read)
    .qs     (clicint_87_ie_87_qs)
  );


  // F[attr_shv_87]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_87_attr_shv_87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_87_attr_shv_87_we),
    .wd     (clicint_87_attr_shv_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[87].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_87_attr_shv_87_qs)
  );


  // F[attr_trig_87]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_87_attr_trig_87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_87_attr_trig_87_we),
    .wd     (clicint_87_attr_trig_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[87].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_87_attr_trig_87_qs)
  );


  // F[attr_mode_87]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_87_attr_mode_87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_87_attr_mode_87_we),
    .wd     (clicint_87_attr_mode_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[87].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_87_attr_mode_87_qs)
  );


  // F[ctl_87]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_87_ctl_87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_87_ctl_87_we),
    .wd     (clicint_87_ctl_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[87].ctl.q ),

    // to register interface (read)
    .qs     (clicint_87_ctl_87_qs)
  );


  // Subregister 88 of Multireg clicint
  // R[clicint_88]: V(False)

  // F[ip_88]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_88_ip_88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_88_ip_88_we),
    .wd     (clicint_88_ip_88_wd),

    // from internal hardware
    .de     (hw2reg.clicint[88].ip.de),
    .d      (hw2reg.clicint[88].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[88].ip.q ),

    // to register interface (read)
    .qs     (clicint_88_ip_88_qs)
  );


  // F[ie_88]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_88_ie_88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_88_ie_88_we),
    .wd     (clicint_88_ie_88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[88].ie.q ),

    // to register interface (read)
    .qs     (clicint_88_ie_88_qs)
  );


  // F[attr_shv_88]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_88_attr_shv_88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_88_attr_shv_88_we),
    .wd     (clicint_88_attr_shv_88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[88].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_88_attr_shv_88_qs)
  );


  // F[attr_trig_88]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_88_attr_trig_88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_88_attr_trig_88_we),
    .wd     (clicint_88_attr_trig_88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[88].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_88_attr_trig_88_qs)
  );


  // F[attr_mode_88]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_88_attr_mode_88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_88_attr_mode_88_we),
    .wd     (clicint_88_attr_mode_88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[88].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_88_attr_mode_88_qs)
  );


  // F[ctl_88]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_88_ctl_88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_88_ctl_88_we),
    .wd     (clicint_88_ctl_88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[88].ctl.q ),

    // to register interface (read)
    .qs     (clicint_88_ctl_88_qs)
  );


  // Subregister 89 of Multireg clicint
  // R[clicint_89]: V(False)

  // F[ip_89]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_89_ip_89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_89_ip_89_we),
    .wd     (clicint_89_ip_89_wd),

    // from internal hardware
    .de     (hw2reg.clicint[89].ip.de),
    .d      (hw2reg.clicint[89].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[89].ip.q ),

    // to register interface (read)
    .qs     (clicint_89_ip_89_qs)
  );


  // F[ie_89]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_89_ie_89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_89_ie_89_we),
    .wd     (clicint_89_ie_89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[89].ie.q ),

    // to register interface (read)
    .qs     (clicint_89_ie_89_qs)
  );


  // F[attr_shv_89]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_89_attr_shv_89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_89_attr_shv_89_we),
    .wd     (clicint_89_attr_shv_89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[89].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_89_attr_shv_89_qs)
  );


  // F[attr_trig_89]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_89_attr_trig_89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_89_attr_trig_89_we),
    .wd     (clicint_89_attr_trig_89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[89].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_89_attr_trig_89_qs)
  );


  // F[attr_mode_89]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_89_attr_mode_89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_89_attr_mode_89_we),
    .wd     (clicint_89_attr_mode_89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[89].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_89_attr_mode_89_qs)
  );


  // F[ctl_89]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_89_ctl_89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_89_ctl_89_we),
    .wd     (clicint_89_ctl_89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[89].ctl.q ),

    // to register interface (read)
    .qs     (clicint_89_ctl_89_qs)
  );


  // Subregister 90 of Multireg clicint
  // R[clicint_90]: V(False)

  // F[ip_90]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_90_ip_90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_90_ip_90_we),
    .wd     (clicint_90_ip_90_wd),

    // from internal hardware
    .de     (hw2reg.clicint[90].ip.de),
    .d      (hw2reg.clicint[90].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[90].ip.q ),

    // to register interface (read)
    .qs     (clicint_90_ip_90_qs)
  );


  // F[ie_90]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_90_ie_90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_90_ie_90_we),
    .wd     (clicint_90_ie_90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[90].ie.q ),

    // to register interface (read)
    .qs     (clicint_90_ie_90_qs)
  );


  // F[attr_shv_90]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_90_attr_shv_90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_90_attr_shv_90_we),
    .wd     (clicint_90_attr_shv_90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[90].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_90_attr_shv_90_qs)
  );


  // F[attr_trig_90]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_90_attr_trig_90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_90_attr_trig_90_we),
    .wd     (clicint_90_attr_trig_90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[90].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_90_attr_trig_90_qs)
  );


  // F[attr_mode_90]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_90_attr_mode_90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_90_attr_mode_90_we),
    .wd     (clicint_90_attr_mode_90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[90].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_90_attr_mode_90_qs)
  );


  // F[ctl_90]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_90_ctl_90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_90_ctl_90_we),
    .wd     (clicint_90_ctl_90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[90].ctl.q ),

    // to register interface (read)
    .qs     (clicint_90_ctl_90_qs)
  );


  // Subregister 91 of Multireg clicint
  // R[clicint_91]: V(False)

  // F[ip_91]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_91_ip_91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_91_ip_91_we),
    .wd     (clicint_91_ip_91_wd),

    // from internal hardware
    .de     (hw2reg.clicint[91].ip.de),
    .d      (hw2reg.clicint[91].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[91].ip.q ),

    // to register interface (read)
    .qs     (clicint_91_ip_91_qs)
  );


  // F[ie_91]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_91_ie_91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_91_ie_91_we),
    .wd     (clicint_91_ie_91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[91].ie.q ),

    // to register interface (read)
    .qs     (clicint_91_ie_91_qs)
  );


  // F[attr_shv_91]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_91_attr_shv_91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_91_attr_shv_91_we),
    .wd     (clicint_91_attr_shv_91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[91].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_91_attr_shv_91_qs)
  );


  // F[attr_trig_91]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_91_attr_trig_91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_91_attr_trig_91_we),
    .wd     (clicint_91_attr_trig_91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[91].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_91_attr_trig_91_qs)
  );


  // F[attr_mode_91]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_91_attr_mode_91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_91_attr_mode_91_we),
    .wd     (clicint_91_attr_mode_91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[91].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_91_attr_mode_91_qs)
  );


  // F[ctl_91]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_91_ctl_91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_91_ctl_91_we),
    .wd     (clicint_91_ctl_91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[91].ctl.q ),

    // to register interface (read)
    .qs     (clicint_91_ctl_91_qs)
  );


  // Subregister 92 of Multireg clicint
  // R[clicint_92]: V(False)

  // F[ip_92]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_92_ip_92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_92_ip_92_we),
    .wd     (clicint_92_ip_92_wd),

    // from internal hardware
    .de     (hw2reg.clicint[92].ip.de),
    .d      (hw2reg.clicint[92].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[92].ip.q ),

    // to register interface (read)
    .qs     (clicint_92_ip_92_qs)
  );


  // F[ie_92]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_92_ie_92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_92_ie_92_we),
    .wd     (clicint_92_ie_92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[92].ie.q ),

    // to register interface (read)
    .qs     (clicint_92_ie_92_qs)
  );


  // F[attr_shv_92]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_92_attr_shv_92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_92_attr_shv_92_we),
    .wd     (clicint_92_attr_shv_92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[92].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_92_attr_shv_92_qs)
  );


  // F[attr_trig_92]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_92_attr_trig_92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_92_attr_trig_92_we),
    .wd     (clicint_92_attr_trig_92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[92].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_92_attr_trig_92_qs)
  );


  // F[attr_mode_92]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_92_attr_mode_92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_92_attr_mode_92_we),
    .wd     (clicint_92_attr_mode_92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[92].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_92_attr_mode_92_qs)
  );


  // F[ctl_92]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_92_ctl_92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_92_ctl_92_we),
    .wd     (clicint_92_ctl_92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[92].ctl.q ),

    // to register interface (read)
    .qs     (clicint_92_ctl_92_qs)
  );


  // Subregister 93 of Multireg clicint
  // R[clicint_93]: V(False)

  // F[ip_93]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_93_ip_93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_93_ip_93_we),
    .wd     (clicint_93_ip_93_wd),

    // from internal hardware
    .de     (hw2reg.clicint[93].ip.de),
    .d      (hw2reg.clicint[93].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[93].ip.q ),

    // to register interface (read)
    .qs     (clicint_93_ip_93_qs)
  );


  // F[ie_93]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_93_ie_93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_93_ie_93_we),
    .wd     (clicint_93_ie_93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[93].ie.q ),

    // to register interface (read)
    .qs     (clicint_93_ie_93_qs)
  );


  // F[attr_shv_93]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_93_attr_shv_93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_93_attr_shv_93_we),
    .wd     (clicint_93_attr_shv_93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[93].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_93_attr_shv_93_qs)
  );


  // F[attr_trig_93]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_93_attr_trig_93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_93_attr_trig_93_we),
    .wd     (clicint_93_attr_trig_93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[93].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_93_attr_trig_93_qs)
  );


  // F[attr_mode_93]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_93_attr_mode_93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_93_attr_mode_93_we),
    .wd     (clicint_93_attr_mode_93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[93].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_93_attr_mode_93_qs)
  );


  // F[ctl_93]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_93_ctl_93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_93_ctl_93_we),
    .wd     (clicint_93_ctl_93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[93].ctl.q ),

    // to register interface (read)
    .qs     (clicint_93_ctl_93_qs)
  );


  // Subregister 94 of Multireg clicint
  // R[clicint_94]: V(False)

  // F[ip_94]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_94_ip_94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_94_ip_94_we),
    .wd     (clicint_94_ip_94_wd),

    // from internal hardware
    .de     (hw2reg.clicint[94].ip.de),
    .d      (hw2reg.clicint[94].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[94].ip.q ),

    // to register interface (read)
    .qs     (clicint_94_ip_94_qs)
  );


  // F[ie_94]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_94_ie_94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_94_ie_94_we),
    .wd     (clicint_94_ie_94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[94].ie.q ),

    // to register interface (read)
    .qs     (clicint_94_ie_94_qs)
  );


  // F[attr_shv_94]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_94_attr_shv_94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_94_attr_shv_94_we),
    .wd     (clicint_94_attr_shv_94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[94].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_94_attr_shv_94_qs)
  );


  // F[attr_trig_94]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_94_attr_trig_94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_94_attr_trig_94_we),
    .wd     (clicint_94_attr_trig_94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[94].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_94_attr_trig_94_qs)
  );


  // F[attr_mode_94]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_94_attr_mode_94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_94_attr_mode_94_we),
    .wd     (clicint_94_attr_mode_94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[94].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_94_attr_mode_94_qs)
  );


  // F[ctl_94]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_94_ctl_94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_94_ctl_94_we),
    .wd     (clicint_94_ctl_94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[94].ctl.q ),

    // to register interface (read)
    .qs     (clicint_94_ctl_94_qs)
  );


  // Subregister 95 of Multireg clicint
  // R[clicint_95]: V(False)

  // F[ip_95]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_95_ip_95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_95_ip_95_we),
    .wd     (clicint_95_ip_95_wd),

    // from internal hardware
    .de     (hw2reg.clicint[95].ip.de),
    .d      (hw2reg.clicint[95].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[95].ip.q ),

    // to register interface (read)
    .qs     (clicint_95_ip_95_qs)
  );


  // F[ie_95]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_95_ie_95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_95_ie_95_we),
    .wd     (clicint_95_ie_95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[95].ie.q ),

    // to register interface (read)
    .qs     (clicint_95_ie_95_qs)
  );


  // F[attr_shv_95]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_95_attr_shv_95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_95_attr_shv_95_we),
    .wd     (clicint_95_attr_shv_95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[95].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_95_attr_shv_95_qs)
  );


  // F[attr_trig_95]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_95_attr_trig_95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_95_attr_trig_95_we),
    .wd     (clicint_95_attr_trig_95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[95].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_95_attr_trig_95_qs)
  );


  // F[attr_mode_95]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_95_attr_mode_95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_95_attr_mode_95_we),
    .wd     (clicint_95_attr_mode_95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[95].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_95_attr_mode_95_qs)
  );


  // F[ctl_95]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_95_ctl_95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_95_ctl_95_we),
    .wd     (clicint_95_ctl_95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[95].ctl.q ),

    // to register interface (read)
    .qs     (clicint_95_ctl_95_qs)
  );


  // Subregister 96 of Multireg clicint
  // R[clicint_96]: V(False)

  // F[ip_96]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_96_ip_96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_96_ip_96_we),
    .wd     (clicint_96_ip_96_wd),

    // from internal hardware
    .de     (hw2reg.clicint[96].ip.de),
    .d      (hw2reg.clicint[96].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[96].ip.q ),

    // to register interface (read)
    .qs     (clicint_96_ip_96_qs)
  );


  // F[ie_96]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_96_ie_96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_96_ie_96_we),
    .wd     (clicint_96_ie_96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[96].ie.q ),

    // to register interface (read)
    .qs     (clicint_96_ie_96_qs)
  );


  // F[attr_shv_96]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_96_attr_shv_96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_96_attr_shv_96_we),
    .wd     (clicint_96_attr_shv_96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[96].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_96_attr_shv_96_qs)
  );


  // F[attr_trig_96]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_96_attr_trig_96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_96_attr_trig_96_we),
    .wd     (clicint_96_attr_trig_96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[96].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_96_attr_trig_96_qs)
  );


  // F[attr_mode_96]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_96_attr_mode_96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_96_attr_mode_96_we),
    .wd     (clicint_96_attr_mode_96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[96].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_96_attr_mode_96_qs)
  );


  // F[ctl_96]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_96_ctl_96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_96_ctl_96_we),
    .wd     (clicint_96_ctl_96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[96].ctl.q ),

    // to register interface (read)
    .qs     (clicint_96_ctl_96_qs)
  );


  // Subregister 97 of Multireg clicint
  // R[clicint_97]: V(False)

  // F[ip_97]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_97_ip_97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_97_ip_97_we),
    .wd     (clicint_97_ip_97_wd),

    // from internal hardware
    .de     (hw2reg.clicint[97].ip.de),
    .d      (hw2reg.clicint[97].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[97].ip.q ),

    // to register interface (read)
    .qs     (clicint_97_ip_97_qs)
  );


  // F[ie_97]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_97_ie_97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_97_ie_97_we),
    .wd     (clicint_97_ie_97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[97].ie.q ),

    // to register interface (read)
    .qs     (clicint_97_ie_97_qs)
  );


  // F[attr_shv_97]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_97_attr_shv_97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_97_attr_shv_97_we),
    .wd     (clicint_97_attr_shv_97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[97].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_97_attr_shv_97_qs)
  );


  // F[attr_trig_97]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_97_attr_trig_97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_97_attr_trig_97_we),
    .wd     (clicint_97_attr_trig_97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[97].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_97_attr_trig_97_qs)
  );


  // F[attr_mode_97]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_97_attr_mode_97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_97_attr_mode_97_we),
    .wd     (clicint_97_attr_mode_97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[97].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_97_attr_mode_97_qs)
  );


  // F[ctl_97]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_97_ctl_97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_97_ctl_97_we),
    .wd     (clicint_97_ctl_97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[97].ctl.q ),

    // to register interface (read)
    .qs     (clicint_97_ctl_97_qs)
  );


  // Subregister 98 of Multireg clicint
  // R[clicint_98]: V(False)

  // F[ip_98]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_98_ip_98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_98_ip_98_we),
    .wd     (clicint_98_ip_98_wd),

    // from internal hardware
    .de     (hw2reg.clicint[98].ip.de),
    .d      (hw2reg.clicint[98].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[98].ip.q ),

    // to register interface (read)
    .qs     (clicint_98_ip_98_qs)
  );


  // F[ie_98]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_98_ie_98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_98_ie_98_we),
    .wd     (clicint_98_ie_98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[98].ie.q ),

    // to register interface (read)
    .qs     (clicint_98_ie_98_qs)
  );


  // F[attr_shv_98]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_98_attr_shv_98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_98_attr_shv_98_we),
    .wd     (clicint_98_attr_shv_98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[98].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_98_attr_shv_98_qs)
  );


  // F[attr_trig_98]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_98_attr_trig_98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_98_attr_trig_98_we),
    .wd     (clicint_98_attr_trig_98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[98].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_98_attr_trig_98_qs)
  );


  // F[attr_mode_98]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_98_attr_mode_98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_98_attr_mode_98_we),
    .wd     (clicint_98_attr_mode_98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[98].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_98_attr_mode_98_qs)
  );


  // F[ctl_98]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_98_ctl_98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_98_ctl_98_we),
    .wd     (clicint_98_ctl_98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[98].ctl.q ),

    // to register interface (read)
    .qs     (clicint_98_ctl_98_qs)
  );


  // Subregister 99 of Multireg clicint
  // R[clicint_99]: V(False)

  // F[ip_99]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_99_ip_99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_99_ip_99_we),
    .wd     (clicint_99_ip_99_wd),

    // from internal hardware
    .de     (hw2reg.clicint[99].ip.de),
    .d      (hw2reg.clicint[99].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[99].ip.q ),

    // to register interface (read)
    .qs     (clicint_99_ip_99_qs)
  );


  // F[ie_99]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_99_ie_99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_99_ie_99_we),
    .wd     (clicint_99_ie_99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[99].ie.q ),

    // to register interface (read)
    .qs     (clicint_99_ie_99_qs)
  );


  // F[attr_shv_99]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_99_attr_shv_99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_99_attr_shv_99_we),
    .wd     (clicint_99_attr_shv_99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[99].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_99_attr_shv_99_qs)
  );


  // F[attr_trig_99]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_99_attr_trig_99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_99_attr_trig_99_we),
    .wd     (clicint_99_attr_trig_99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[99].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_99_attr_trig_99_qs)
  );


  // F[attr_mode_99]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_99_attr_mode_99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_99_attr_mode_99_we),
    .wd     (clicint_99_attr_mode_99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[99].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_99_attr_mode_99_qs)
  );


  // F[ctl_99]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_99_ctl_99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_99_ctl_99_we),
    .wd     (clicint_99_ctl_99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[99].ctl.q ),

    // to register interface (read)
    .qs     (clicint_99_ctl_99_qs)
  );


  // Subregister 100 of Multireg clicint
  // R[clicint_100]: V(False)

  // F[ip_100]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_100_ip_100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_100_ip_100_we),
    .wd     (clicint_100_ip_100_wd),

    // from internal hardware
    .de     (hw2reg.clicint[100].ip.de),
    .d      (hw2reg.clicint[100].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[100].ip.q ),

    // to register interface (read)
    .qs     (clicint_100_ip_100_qs)
  );


  // F[ie_100]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_100_ie_100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_100_ie_100_we),
    .wd     (clicint_100_ie_100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[100].ie.q ),

    // to register interface (read)
    .qs     (clicint_100_ie_100_qs)
  );


  // F[attr_shv_100]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_100_attr_shv_100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_100_attr_shv_100_we),
    .wd     (clicint_100_attr_shv_100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[100].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_100_attr_shv_100_qs)
  );


  // F[attr_trig_100]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_100_attr_trig_100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_100_attr_trig_100_we),
    .wd     (clicint_100_attr_trig_100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[100].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_100_attr_trig_100_qs)
  );


  // F[attr_mode_100]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_100_attr_mode_100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_100_attr_mode_100_we),
    .wd     (clicint_100_attr_mode_100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[100].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_100_attr_mode_100_qs)
  );


  // F[ctl_100]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_100_ctl_100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_100_ctl_100_we),
    .wd     (clicint_100_ctl_100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[100].ctl.q ),

    // to register interface (read)
    .qs     (clicint_100_ctl_100_qs)
  );


  // Subregister 101 of Multireg clicint
  // R[clicint_101]: V(False)

  // F[ip_101]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_101_ip_101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_101_ip_101_we),
    .wd     (clicint_101_ip_101_wd),

    // from internal hardware
    .de     (hw2reg.clicint[101].ip.de),
    .d      (hw2reg.clicint[101].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[101].ip.q ),

    // to register interface (read)
    .qs     (clicint_101_ip_101_qs)
  );


  // F[ie_101]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_101_ie_101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_101_ie_101_we),
    .wd     (clicint_101_ie_101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[101].ie.q ),

    // to register interface (read)
    .qs     (clicint_101_ie_101_qs)
  );


  // F[attr_shv_101]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_101_attr_shv_101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_101_attr_shv_101_we),
    .wd     (clicint_101_attr_shv_101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[101].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_101_attr_shv_101_qs)
  );


  // F[attr_trig_101]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_101_attr_trig_101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_101_attr_trig_101_we),
    .wd     (clicint_101_attr_trig_101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[101].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_101_attr_trig_101_qs)
  );


  // F[attr_mode_101]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_101_attr_mode_101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_101_attr_mode_101_we),
    .wd     (clicint_101_attr_mode_101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[101].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_101_attr_mode_101_qs)
  );


  // F[ctl_101]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_101_ctl_101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_101_ctl_101_we),
    .wd     (clicint_101_ctl_101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[101].ctl.q ),

    // to register interface (read)
    .qs     (clicint_101_ctl_101_qs)
  );


  // Subregister 102 of Multireg clicint
  // R[clicint_102]: V(False)

  // F[ip_102]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_102_ip_102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_102_ip_102_we),
    .wd     (clicint_102_ip_102_wd),

    // from internal hardware
    .de     (hw2reg.clicint[102].ip.de),
    .d      (hw2reg.clicint[102].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[102].ip.q ),

    // to register interface (read)
    .qs     (clicint_102_ip_102_qs)
  );


  // F[ie_102]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_102_ie_102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_102_ie_102_we),
    .wd     (clicint_102_ie_102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[102].ie.q ),

    // to register interface (read)
    .qs     (clicint_102_ie_102_qs)
  );


  // F[attr_shv_102]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_102_attr_shv_102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_102_attr_shv_102_we),
    .wd     (clicint_102_attr_shv_102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[102].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_102_attr_shv_102_qs)
  );


  // F[attr_trig_102]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_102_attr_trig_102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_102_attr_trig_102_we),
    .wd     (clicint_102_attr_trig_102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[102].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_102_attr_trig_102_qs)
  );


  // F[attr_mode_102]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_102_attr_mode_102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_102_attr_mode_102_we),
    .wd     (clicint_102_attr_mode_102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[102].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_102_attr_mode_102_qs)
  );


  // F[ctl_102]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_102_ctl_102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_102_ctl_102_we),
    .wd     (clicint_102_ctl_102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[102].ctl.q ),

    // to register interface (read)
    .qs     (clicint_102_ctl_102_qs)
  );


  // Subregister 103 of Multireg clicint
  // R[clicint_103]: V(False)

  // F[ip_103]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_103_ip_103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_103_ip_103_we),
    .wd     (clicint_103_ip_103_wd),

    // from internal hardware
    .de     (hw2reg.clicint[103].ip.de),
    .d      (hw2reg.clicint[103].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[103].ip.q ),

    // to register interface (read)
    .qs     (clicint_103_ip_103_qs)
  );


  // F[ie_103]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_103_ie_103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_103_ie_103_we),
    .wd     (clicint_103_ie_103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[103].ie.q ),

    // to register interface (read)
    .qs     (clicint_103_ie_103_qs)
  );


  // F[attr_shv_103]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_103_attr_shv_103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_103_attr_shv_103_we),
    .wd     (clicint_103_attr_shv_103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[103].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_103_attr_shv_103_qs)
  );


  // F[attr_trig_103]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_103_attr_trig_103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_103_attr_trig_103_we),
    .wd     (clicint_103_attr_trig_103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[103].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_103_attr_trig_103_qs)
  );


  // F[attr_mode_103]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_103_attr_mode_103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_103_attr_mode_103_we),
    .wd     (clicint_103_attr_mode_103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[103].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_103_attr_mode_103_qs)
  );


  // F[ctl_103]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_103_ctl_103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_103_ctl_103_we),
    .wd     (clicint_103_ctl_103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[103].ctl.q ),

    // to register interface (read)
    .qs     (clicint_103_ctl_103_qs)
  );


  // Subregister 104 of Multireg clicint
  // R[clicint_104]: V(False)

  // F[ip_104]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_104_ip_104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_104_ip_104_we),
    .wd     (clicint_104_ip_104_wd),

    // from internal hardware
    .de     (hw2reg.clicint[104].ip.de),
    .d      (hw2reg.clicint[104].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[104].ip.q ),

    // to register interface (read)
    .qs     (clicint_104_ip_104_qs)
  );


  // F[ie_104]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_104_ie_104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_104_ie_104_we),
    .wd     (clicint_104_ie_104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[104].ie.q ),

    // to register interface (read)
    .qs     (clicint_104_ie_104_qs)
  );


  // F[attr_shv_104]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_104_attr_shv_104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_104_attr_shv_104_we),
    .wd     (clicint_104_attr_shv_104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[104].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_104_attr_shv_104_qs)
  );


  // F[attr_trig_104]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_104_attr_trig_104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_104_attr_trig_104_we),
    .wd     (clicint_104_attr_trig_104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[104].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_104_attr_trig_104_qs)
  );


  // F[attr_mode_104]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_104_attr_mode_104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_104_attr_mode_104_we),
    .wd     (clicint_104_attr_mode_104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[104].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_104_attr_mode_104_qs)
  );


  // F[ctl_104]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_104_ctl_104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_104_ctl_104_we),
    .wd     (clicint_104_ctl_104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[104].ctl.q ),

    // to register interface (read)
    .qs     (clicint_104_ctl_104_qs)
  );


  // Subregister 105 of Multireg clicint
  // R[clicint_105]: V(False)

  // F[ip_105]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_105_ip_105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_105_ip_105_we),
    .wd     (clicint_105_ip_105_wd),

    // from internal hardware
    .de     (hw2reg.clicint[105].ip.de),
    .d      (hw2reg.clicint[105].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[105].ip.q ),

    // to register interface (read)
    .qs     (clicint_105_ip_105_qs)
  );


  // F[ie_105]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_105_ie_105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_105_ie_105_we),
    .wd     (clicint_105_ie_105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[105].ie.q ),

    // to register interface (read)
    .qs     (clicint_105_ie_105_qs)
  );


  // F[attr_shv_105]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_105_attr_shv_105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_105_attr_shv_105_we),
    .wd     (clicint_105_attr_shv_105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[105].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_105_attr_shv_105_qs)
  );


  // F[attr_trig_105]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_105_attr_trig_105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_105_attr_trig_105_we),
    .wd     (clicint_105_attr_trig_105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[105].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_105_attr_trig_105_qs)
  );


  // F[attr_mode_105]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_105_attr_mode_105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_105_attr_mode_105_we),
    .wd     (clicint_105_attr_mode_105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[105].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_105_attr_mode_105_qs)
  );


  // F[ctl_105]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_105_ctl_105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_105_ctl_105_we),
    .wd     (clicint_105_ctl_105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[105].ctl.q ),

    // to register interface (read)
    .qs     (clicint_105_ctl_105_qs)
  );


  // Subregister 106 of Multireg clicint
  // R[clicint_106]: V(False)

  // F[ip_106]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_106_ip_106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_106_ip_106_we),
    .wd     (clicint_106_ip_106_wd),

    // from internal hardware
    .de     (hw2reg.clicint[106].ip.de),
    .d      (hw2reg.clicint[106].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[106].ip.q ),

    // to register interface (read)
    .qs     (clicint_106_ip_106_qs)
  );


  // F[ie_106]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_106_ie_106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_106_ie_106_we),
    .wd     (clicint_106_ie_106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[106].ie.q ),

    // to register interface (read)
    .qs     (clicint_106_ie_106_qs)
  );


  // F[attr_shv_106]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_106_attr_shv_106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_106_attr_shv_106_we),
    .wd     (clicint_106_attr_shv_106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[106].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_106_attr_shv_106_qs)
  );


  // F[attr_trig_106]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_106_attr_trig_106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_106_attr_trig_106_we),
    .wd     (clicint_106_attr_trig_106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[106].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_106_attr_trig_106_qs)
  );


  // F[attr_mode_106]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_106_attr_mode_106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_106_attr_mode_106_we),
    .wd     (clicint_106_attr_mode_106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[106].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_106_attr_mode_106_qs)
  );


  // F[ctl_106]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_106_ctl_106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_106_ctl_106_we),
    .wd     (clicint_106_ctl_106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[106].ctl.q ),

    // to register interface (read)
    .qs     (clicint_106_ctl_106_qs)
  );


  // Subregister 107 of Multireg clicint
  // R[clicint_107]: V(False)

  // F[ip_107]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_107_ip_107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_107_ip_107_we),
    .wd     (clicint_107_ip_107_wd),

    // from internal hardware
    .de     (hw2reg.clicint[107].ip.de),
    .d      (hw2reg.clicint[107].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[107].ip.q ),

    // to register interface (read)
    .qs     (clicint_107_ip_107_qs)
  );


  // F[ie_107]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_107_ie_107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_107_ie_107_we),
    .wd     (clicint_107_ie_107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[107].ie.q ),

    // to register interface (read)
    .qs     (clicint_107_ie_107_qs)
  );


  // F[attr_shv_107]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_107_attr_shv_107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_107_attr_shv_107_we),
    .wd     (clicint_107_attr_shv_107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[107].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_107_attr_shv_107_qs)
  );


  // F[attr_trig_107]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_107_attr_trig_107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_107_attr_trig_107_we),
    .wd     (clicint_107_attr_trig_107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[107].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_107_attr_trig_107_qs)
  );


  // F[attr_mode_107]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_107_attr_mode_107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_107_attr_mode_107_we),
    .wd     (clicint_107_attr_mode_107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[107].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_107_attr_mode_107_qs)
  );


  // F[ctl_107]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_107_ctl_107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_107_ctl_107_we),
    .wd     (clicint_107_ctl_107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[107].ctl.q ),

    // to register interface (read)
    .qs     (clicint_107_ctl_107_qs)
  );


  // Subregister 108 of Multireg clicint
  // R[clicint_108]: V(False)

  // F[ip_108]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_108_ip_108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_108_ip_108_we),
    .wd     (clicint_108_ip_108_wd),

    // from internal hardware
    .de     (hw2reg.clicint[108].ip.de),
    .d      (hw2reg.clicint[108].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[108].ip.q ),

    // to register interface (read)
    .qs     (clicint_108_ip_108_qs)
  );


  // F[ie_108]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_108_ie_108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_108_ie_108_we),
    .wd     (clicint_108_ie_108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[108].ie.q ),

    // to register interface (read)
    .qs     (clicint_108_ie_108_qs)
  );


  // F[attr_shv_108]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_108_attr_shv_108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_108_attr_shv_108_we),
    .wd     (clicint_108_attr_shv_108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[108].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_108_attr_shv_108_qs)
  );


  // F[attr_trig_108]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_108_attr_trig_108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_108_attr_trig_108_we),
    .wd     (clicint_108_attr_trig_108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[108].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_108_attr_trig_108_qs)
  );


  // F[attr_mode_108]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_108_attr_mode_108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_108_attr_mode_108_we),
    .wd     (clicint_108_attr_mode_108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[108].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_108_attr_mode_108_qs)
  );


  // F[ctl_108]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_108_ctl_108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_108_ctl_108_we),
    .wd     (clicint_108_ctl_108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[108].ctl.q ),

    // to register interface (read)
    .qs     (clicint_108_ctl_108_qs)
  );


  // Subregister 109 of Multireg clicint
  // R[clicint_109]: V(False)

  // F[ip_109]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_109_ip_109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_109_ip_109_we),
    .wd     (clicint_109_ip_109_wd),

    // from internal hardware
    .de     (hw2reg.clicint[109].ip.de),
    .d      (hw2reg.clicint[109].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[109].ip.q ),

    // to register interface (read)
    .qs     (clicint_109_ip_109_qs)
  );


  // F[ie_109]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_109_ie_109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_109_ie_109_we),
    .wd     (clicint_109_ie_109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[109].ie.q ),

    // to register interface (read)
    .qs     (clicint_109_ie_109_qs)
  );


  // F[attr_shv_109]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_109_attr_shv_109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_109_attr_shv_109_we),
    .wd     (clicint_109_attr_shv_109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[109].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_109_attr_shv_109_qs)
  );


  // F[attr_trig_109]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_109_attr_trig_109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_109_attr_trig_109_we),
    .wd     (clicint_109_attr_trig_109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[109].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_109_attr_trig_109_qs)
  );


  // F[attr_mode_109]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_109_attr_mode_109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_109_attr_mode_109_we),
    .wd     (clicint_109_attr_mode_109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[109].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_109_attr_mode_109_qs)
  );


  // F[ctl_109]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_109_ctl_109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_109_ctl_109_we),
    .wd     (clicint_109_ctl_109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[109].ctl.q ),

    // to register interface (read)
    .qs     (clicint_109_ctl_109_qs)
  );


  // Subregister 110 of Multireg clicint
  // R[clicint_110]: V(False)

  // F[ip_110]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_110_ip_110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_110_ip_110_we),
    .wd     (clicint_110_ip_110_wd),

    // from internal hardware
    .de     (hw2reg.clicint[110].ip.de),
    .d      (hw2reg.clicint[110].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[110].ip.q ),

    // to register interface (read)
    .qs     (clicint_110_ip_110_qs)
  );


  // F[ie_110]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_110_ie_110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_110_ie_110_we),
    .wd     (clicint_110_ie_110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[110].ie.q ),

    // to register interface (read)
    .qs     (clicint_110_ie_110_qs)
  );


  // F[attr_shv_110]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_110_attr_shv_110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_110_attr_shv_110_we),
    .wd     (clicint_110_attr_shv_110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[110].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_110_attr_shv_110_qs)
  );


  // F[attr_trig_110]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_110_attr_trig_110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_110_attr_trig_110_we),
    .wd     (clicint_110_attr_trig_110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[110].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_110_attr_trig_110_qs)
  );


  // F[attr_mode_110]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_110_attr_mode_110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_110_attr_mode_110_we),
    .wd     (clicint_110_attr_mode_110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[110].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_110_attr_mode_110_qs)
  );


  // F[ctl_110]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_110_ctl_110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_110_ctl_110_we),
    .wd     (clicint_110_ctl_110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[110].ctl.q ),

    // to register interface (read)
    .qs     (clicint_110_ctl_110_qs)
  );


  // Subregister 111 of Multireg clicint
  // R[clicint_111]: V(False)

  // F[ip_111]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_111_ip_111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_111_ip_111_we),
    .wd     (clicint_111_ip_111_wd),

    // from internal hardware
    .de     (hw2reg.clicint[111].ip.de),
    .d      (hw2reg.clicint[111].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[111].ip.q ),

    // to register interface (read)
    .qs     (clicint_111_ip_111_qs)
  );


  // F[ie_111]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_111_ie_111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_111_ie_111_we),
    .wd     (clicint_111_ie_111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[111].ie.q ),

    // to register interface (read)
    .qs     (clicint_111_ie_111_qs)
  );


  // F[attr_shv_111]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_111_attr_shv_111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_111_attr_shv_111_we),
    .wd     (clicint_111_attr_shv_111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[111].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_111_attr_shv_111_qs)
  );


  // F[attr_trig_111]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_111_attr_trig_111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_111_attr_trig_111_we),
    .wd     (clicint_111_attr_trig_111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[111].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_111_attr_trig_111_qs)
  );


  // F[attr_mode_111]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_111_attr_mode_111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_111_attr_mode_111_we),
    .wd     (clicint_111_attr_mode_111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[111].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_111_attr_mode_111_qs)
  );


  // F[ctl_111]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_111_ctl_111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_111_ctl_111_we),
    .wd     (clicint_111_ctl_111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[111].ctl.q ),

    // to register interface (read)
    .qs     (clicint_111_ctl_111_qs)
  );


  // Subregister 112 of Multireg clicint
  // R[clicint_112]: V(False)

  // F[ip_112]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_112_ip_112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_112_ip_112_we),
    .wd     (clicint_112_ip_112_wd),

    // from internal hardware
    .de     (hw2reg.clicint[112].ip.de),
    .d      (hw2reg.clicint[112].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[112].ip.q ),

    // to register interface (read)
    .qs     (clicint_112_ip_112_qs)
  );


  // F[ie_112]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_112_ie_112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_112_ie_112_we),
    .wd     (clicint_112_ie_112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[112].ie.q ),

    // to register interface (read)
    .qs     (clicint_112_ie_112_qs)
  );


  // F[attr_shv_112]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_112_attr_shv_112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_112_attr_shv_112_we),
    .wd     (clicint_112_attr_shv_112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[112].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_112_attr_shv_112_qs)
  );


  // F[attr_trig_112]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_112_attr_trig_112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_112_attr_trig_112_we),
    .wd     (clicint_112_attr_trig_112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[112].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_112_attr_trig_112_qs)
  );


  // F[attr_mode_112]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_112_attr_mode_112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_112_attr_mode_112_we),
    .wd     (clicint_112_attr_mode_112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[112].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_112_attr_mode_112_qs)
  );


  // F[ctl_112]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_112_ctl_112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_112_ctl_112_we),
    .wd     (clicint_112_ctl_112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[112].ctl.q ),

    // to register interface (read)
    .qs     (clicint_112_ctl_112_qs)
  );


  // Subregister 113 of Multireg clicint
  // R[clicint_113]: V(False)

  // F[ip_113]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_113_ip_113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_113_ip_113_we),
    .wd     (clicint_113_ip_113_wd),

    // from internal hardware
    .de     (hw2reg.clicint[113].ip.de),
    .d      (hw2reg.clicint[113].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[113].ip.q ),

    // to register interface (read)
    .qs     (clicint_113_ip_113_qs)
  );


  // F[ie_113]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_113_ie_113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_113_ie_113_we),
    .wd     (clicint_113_ie_113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[113].ie.q ),

    // to register interface (read)
    .qs     (clicint_113_ie_113_qs)
  );


  // F[attr_shv_113]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_113_attr_shv_113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_113_attr_shv_113_we),
    .wd     (clicint_113_attr_shv_113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[113].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_113_attr_shv_113_qs)
  );


  // F[attr_trig_113]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_113_attr_trig_113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_113_attr_trig_113_we),
    .wd     (clicint_113_attr_trig_113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[113].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_113_attr_trig_113_qs)
  );


  // F[attr_mode_113]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_113_attr_mode_113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_113_attr_mode_113_we),
    .wd     (clicint_113_attr_mode_113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[113].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_113_attr_mode_113_qs)
  );


  // F[ctl_113]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_113_ctl_113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_113_ctl_113_we),
    .wd     (clicint_113_ctl_113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[113].ctl.q ),

    // to register interface (read)
    .qs     (clicint_113_ctl_113_qs)
  );


  // Subregister 114 of Multireg clicint
  // R[clicint_114]: V(False)

  // F[ip_114]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_114_ip_114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_114_ip_114_we),
    .wd     (clicint_114_ip_114_wd),

    // from internal hardware
    .de     (hw2reg.clicint[114].ip.de),
    .d      (hw2reg.clicint[114].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[114].ip.q ),

    // to register interface (read)
    .qs     (clicint_114_ip_114_qs)
  );


  // F[ie_114]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_114_ie_114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_114_ie_114_we),
    .wd     (clicint_114_ie_114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[114].ie.q ),

    // to register interface (read)
    .qs     (clicint_114_ie_114_qs)
  );


  // F[attr_shv_114]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_114_attr_shv_114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_114_attr_shv_114_we),
    .wd     (clicint_114_attr_shv_114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[114].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_114_attr_shv_114_qs)
  );


  // F[attr_trig_114]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_114_attr_trig_114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_114_attr_trig_114_we),
    .wd     (clicint_114_attr_trig_114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[114].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_114_attr_trig_114_qs)
  );


  // F[attr_mode_114]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_114_attr_mode_114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_114_attr_mode_114_we),
    .wd     (clicint_114_attr_mode_114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[114].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_114_attr_mode_114_qs)
  );


  // F[ctl_114]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_114_ctl_114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_114_ctl_114_we),
    .wd     (clicint_114_ctl_114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[114].ctl.q ),

    // to register interface (read)
    .qs     (clicint_114_ctl_114_qs)
  );


  // Subregister 115 of Multireg clicint
  // R[clicint_115]: V(False)

  // F[ip_115]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_115_ip_115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_115_ip_115_we),
    .wd     (clicint_115_ip_115_wd),

    // from internal hardware
    .de     (hw2reg.clicint[115].ip.de),
    .d      (hw2reg.clicint[115].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[115].ip.q ),

    // to register interface (read)
    .qs     (clicint_115_ip_115_qs)
  );


  // F[ie_115]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_115_ie_115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_115_ie_115_we),
    .wd     (clicint_115_ie_115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[115].ie.q ),

    // to register interface (read)
    .qs     (clicint_115_ie_115_qs)
  );


  // F[attr_shv_115]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_115_attr_shv_115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_115_attr_shv_115_we),
    .wd     (clicint_115_attr_shv_115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[115].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_115_attr_shv_115_qs)
  );


  // F[attr_trig_115]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_115_attr_trig_115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_115_attr_trig_115_we),
    .wd     (clicint_115_attr_trig_115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[115].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_115_attr_trig_115_qs)
  );


  // F[attr_mode_115]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_115_attr_mode_115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_115_attr_mode_115_we),
    .wd     (clicint_115_attr_mode_115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[115].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_115_attr_mode_115_qs)
  );


  // F[ctl_115]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_115_ctl_115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_115_ctl_115_we),
    .wd     (clicint_115_ctl_115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[115].ctl.q ),

    // to register interface (read)
    .qs     (clicint_115_ctl_115_qs)
  );


  // Subregister 116 of Multireg clicint
  // R[clicint_116]: V(False)

  // F[ip_116]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_116_ip_116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_116_ip_116_we),
    .wd     (clicint_116_ip_116_wd),

    // from internal hardware
    .de     (hw2reg.clicint[116].ip.de),
    .d      (hw2reg.clicint[116].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[116].ip.q ),

    // to register interface (read)
    .qs     (clicint_116_ip_116_qs)
  );


  // F[ie_116]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_116_ie_116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_116_ie_116_we),
    .wd     (clicint_116_ie_116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[116].ie.q ),

    // to register interface (read)
    .qs     (clicint_116_ie_116_qs)
  );


  // F[attr_shv_116]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_116_attr_shv_116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_116_attr_shv_116_we),
    .wd     (clicint_116_attr_shv_116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[116].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_116_attr_shv_116_qs)
  );


  // F[attr_trig_116]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_116_attr_trig_116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_116_attr_trig_116_we),
    .wd     (clicint_116_attr_trig_116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[116].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_116_attr_trig_116_qs)
  );


  // F[attr_mode_116]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_116_attr_mode_116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_116_attr_mode_116_we),
    .wd     (clicint_116_attr_mode_116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[116].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_116_attr_mode_116_qs)
  );


  // F[ctl_116]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_116_ctl_116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_116_ctl_116_we),
    .wd     (clicint_116_ctl_116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[116].ctl.q ),

    // to register interface (read)
    .qs     (clicint_116_ctl_116_qs)
  );


  // Subregister 117 of Multireg clicint
  // R[clicint_117]: V(False)

  // F[ip_117]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_117_ip_117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_117_ip_117_we),
    .wd     (clicint_117_ip_117_wd),

    // from internal hardware
    .de     (hw2reg.clicint[117].ip.de),
    .d      (hw2reg.clicint[117].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[117].ip.q ),

    // to register interface (read)
    .qs     (clicint_117_ip_117_qs)
  );


  // F[ie_117]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_117_ie_117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_117_ie_117_we),
    .wd     (clicint_117_ie_117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[117].ie.q ),

    // to register interface (read)
    .qs     (clicint_117_ie_117_qs)
  );


  // F[attr_shv_117]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_117_attr_shv_117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_117_attr_shv_117_we),
    .wd     (clicint_117_attr_shv_117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[117].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_117_attr_shv_117_qs)
  );


  // F[attr_trig_117]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_117_attr_trig_117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_117_attr_trig_117_we),
    .wd     (clicint_117_attr_trig_117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[117].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_117_attr_trig_117_qs)
  );


  // F[attr_mode_117]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_117_attr_mode_117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_117_attr_mode_117_we),
    .wd     (clicint_117_attr_mode_117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[117].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_117_attr_mode_117_qs)
  );


  // F[ctl_117]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_117_ctl_117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_117_ctl_117_we),
    .wd     (clicint_117_ctl_117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[117].ctl.q ),

    // to register interface (read)
    .qs     (clicint_117_ctl_117_qs)
  );


  // Subregister 118 of Multireg clicint
  // R[clicint_118]: V(False)

  // F[ip_118]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_118_ip_118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_118_ip_118_we),
    .wd     (clicint_118_ip_118_wd),

    // from internal hardware
    .de     (hw2reg.clicint[118].ip.de),
    .d      (hw2reg.clicint[118].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[118].ip.q ),

    // to register interface (read)
    .qs     (clicint_118_ip_118_qs)
  );


  // F[ie_118]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_118_ie_118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_118_ie_118_we),
    .wd     (clicint_118_ie_118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[118].ie.q ),

    // to register interface (read)
    .qs     (clicint_118_ie_118_qs)
  );


  // F[attr_shv_118]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_118_attr_shv_118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_118_attr_shv_118_we),
    .wd     (clicint_118_attr_shv_118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[118].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_118_attr_shv_118_qs)
  );


  // F[attr_trig_118]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_118_attr_trig_118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_118_attr_trig_118_we),
    .wd     (clicint_118_attr_trig_118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[118].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_118_attr_trig_118_qs)
  );


  // F[attr_mode_118]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_118_attr_mode_118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_118_attr_mode_118_we),
    .wd     (clicint_118_attr_mode_118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[118].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_118_attr_mode_118_qs)
  );


  // F[ctl_118]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_118_ctl_118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_118_ctl_118_we),
    .wd     (clicint_118_ctl_118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[118].ctl.q ),

    // to register interface (read)
    .qs     (clicint_118_ctl_118_qs)
  );


  // Subregister 119 of Multireg clicint
  // R[clicint_119]: V(False)

  // F[ip_119]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_119_ip_119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_119_ip_119_we),
    .wd     (clicint_119_ip_119_wd),

    // from internal hardware
    .de     (hw2reg.clicint[119].ip.de),
    .d      (hw2reg.clicint[119].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[119].ip.q ),

    // to register interface (read)
    .qs     (clicint_119_ip_119_qs)
  );


  // F[ie_119]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_119_ie_119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_119_ie_119_we),
    .wd     (clicint_119_ie_119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[119].ie.q ),

    // to register interface (read)
    .qs     (clicint_119_ie_119_qs)
  );


  // F[attr_shv_119]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_119_attr_shv_119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_119_attr_shv_119_we),
    .wd     (clicint_119_attr_shv_119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[119].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_119_attr_shv_119_qs)
  );


  // F[attr_trig_119]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_119_attr_trig_119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_119_attr_trig_119_we),
    .wd     (clicint_119_attr_trig_119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[119].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_119_attr_trig_119_qs)
  );


  // F[attr_mode_119]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_119_attr_mode_119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_119_attr_mode_119_we),
    .wd     (clicint_119_attr_mode_119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[119].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_119_attr_mode_119_qs)
  );


  // F[ctl_119]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_119_ctl_119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_119_ctl_119_we),
    .wd     (clicint_119_ctl_119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[119].ctl.q ),

    // to register interface (read)
    .qs     (clicint_119_ctl_119_qs)
  );


  // Subregister 120 of Multireg clicint
  // R[clicint_120]: V(False)

  // F[ip_120]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_120_ip_120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_120_ip_120_we),
    .wd     (clicint_120_ip_120_wd),

    // from internal hardware
    .de     (hw2reg.clicint[120].ip.de),
    .d      (hw2reg.clicint[120].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[120].ip.q ),

    // to register interface (read)
    .qs     (clicint_120_ip_120_qs)
  );


  // F[ie_120]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_120_ie_120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_120_ie_120_we),
    .wd     (clicint_120_ie_120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[120].ie.q ),

    // to register interface (read)
    .qs     (clicint_120_ie_120_qs)
  );


  // F[attr_shv_120]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_120_attr_shv_120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_120_attr_shv_120_we),
    .wd     (clicint_120_attr_shv_120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[120].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_120_attr_shv_120_qs)
  );


  // F[attr_trig_120]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_120_attr_trig_120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_120_attr_trig_120_we),
    .wd     (clicint_120_attr_trig_120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[120].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_120_attr_trig_120_qs)
  );


  // F[attr_mode_120]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_120_attr_mode_120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_120_attr_mode_120_we),
    .wd     (clicint_120_attr_mode_120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[120].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_120_attr_mode_120_qs)
  );


  // F[ctl_120]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_120_ctl_120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_120_ctl_120_we),
    .wd     (clicint_120_ctl_120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[120].ctl.q ),

    // to register interface (read)
    .qs     (clicint_120_ctl_120_qs)
  );


  // Subregister 121 of Multireg clicint
  // R[clicint_121]: V(False)

  // F[ip_121]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_121_ip_121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_121_ip_121_we),
    .wd     (clicint_121_ip_121_wd),

    // from internal hardware
    .de     (hw2reg.clicint[121].ip.de),
    .d      (hw2reg.clicint[121].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[121].ip.q ),

    // to register interface (read)
    .qs     (clicint_121_ip_121_qs)
  );


  // F[ie_121]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_121_ie_121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_121_ie_121_we),
    .wd     (clicint_121_ie_121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[121].ie.q ),

    // to register interface (read)
    .qs     (clicint_121_ie_121_qs)
  );


  // F[attr_shv_121]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_121_attr_shv_121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_121_attr_shv_121_we),
    .wd     (clicint_121_attr_shv_121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[121].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_121_attr_shv_121_qs)
  );


  // F[attr_trig_121]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_121_attr_trig_121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_121_attr_trig_121_we),
    .wd     (clicint_121_attr_trig_121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[121].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_121_attr_trig_121_qs)
  );


  // F[attr_mode_121]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_121_attr_mode_121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_121_attr_mode_121_we),
    .wd     (clicint_121_attr_mode_121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[121].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_121_attr_mode_121_qs)
  );


  // F[ctl_121]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_121_ctl_121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_121_ctl_121_we),
    .wd     (clicint_121_ctl_121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[121].ctl.q ),

    // to register interface (read)
    .qs     (clicint_121_ctl_121_qs)
  );


  // Subregister 122 of Multireg clicint
  // R[clicint_122]: V(False)

  // F[ip_122]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_122_ip_122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_122_ip_122_we),
    .wd     (clicint_122_ip_122_wd),

    // from internal hardware
    .de     (hw2reg.clicint[122].ip.de),
    .d      (hw2reg.clicint[122].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[122].ip.q ),

    // to register interface (read)
    .qs     (clicint_122_ip_122_qs)
  );


  // F[ie_122]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_122_ie_122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_122_ie_122_we),
    .wd     (clicint_122_ie_122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[122].ie.q ),

    // to register interface (read)
    .qs     (clicint_122_ie_122_qs)
  );


  // F[attr_shv_122]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_122_attr_shv_122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_122_attr_shv_122_we),
    .wd     (clicint_122_attr_shv_122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[122].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_122_attr_shv_122_qs)
  );


  // F[attr_trig_122]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_122_attr_trig_122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_122_attr_trig_122_we),
    .wd     (clicint_122_attr_trig_122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[122].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_122_attr_trig_122_qs)
  );


  // F[attr_mode_122]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_122_attr_mode_122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_122_attr_mode_122_we),
    .wd     (clicint_122_attr_mode_122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[122].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_122_attr_mode_122_qs)
  );


  // F[ctl_122]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_122_ctl_122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_122_ctl_122_we),
    .wd     (clicint_122_ctl_122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[122].ctl.q ),

    // to register interface (read)
    .qs     (clicint_122_ctl_122_qs)
  );


  // Subregister 123 of Multireg clicint
  // R[clicint_123]: V(False)

  // F[ip_123]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_123_ip_123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_123_ip_123_we),
    .wd     (clicint_123_ip_123_wd),

    // from internal hardware
    .de     (hw2reg.clicint[123].ip.de),
    .d      (hw2reg.clicint[123].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[123].ip.q ),

    // to register interface (read)
    .qs     (clicint_123_ip_123_qs)
  );


  // F[ie_123]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_123_ie_123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_123_ie_123_we),
    .wd     (clicint_123_ie_123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[123].ie.q ),

    // to register interface (read)
    .qs     (clicint_123_ie_123_qs)
  );


  // F[attr_shv_123]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_123_attr_shv_123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_123_attr_shv_123_we),
    .wd     (clicint_123_attr_shv_123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[123].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_123_attr_shv_123_qs)
  );


  // F[attr_trig_123]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_123_attr_trig_123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_123_attr_trig_123_we),
    .wd     (clicint_123_attr_trig_123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[123].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_123_attr_trig_123_qs)
  );


  // F[attr_mode_123]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_123_attr_mode_123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_123_attr_mode_123_we),
    .wd     (clicint_123_attr_mode_123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[123].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_123_attr_mode_123_qs)
  );


  // F[ctl_123]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_123_ctl_123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_123_ctl_123_we),
    .wd     (clicint_123_ctl_123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[123].ctl.q ),

    // to register interface (read)
    .qs     (clicint_123_ctl_123_qs)
  );


  // Subregister 124 of Multireg clicint
  // R[clicint_124]: V(False)

  // F[ip_124]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_124_ip_124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_124_ip_124_we),
    .wd     (clicint_124_ip_124_wd),

    // from internal hardware
    .de     (hw2reg.clicint[124].ip.de),
    .d      (hw2reg.clicint[124].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[124].ip.q ),

    // to register interface (read)
    .qs     (clicint_124_ip_124_qs)
  );


  // F[ie_124]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_124_ie_124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_124_ie_124_we),
    .wd     (clicint_124_ie_124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[124].ie.q ),

    // to register interface (read)
    .qs     (clicint_124_ie_124_qs)
  );


  // F[attr_shv_124]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_124_attr_shv_124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_124_attr_shv_124_we),
    .wd     (clicint_124_attr_shv_124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[124].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_124_attr_shv_124_qs)
  );


  // F[attr_trig_124]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_124_attr_trig_124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_124_attr_trig_124_we),
    .wd     (clicint_124_attr_trig_124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[124].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_124_attr_trig_124_qs)
  );


  // F[attr_mode_124]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_124_attr_mode_124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_124_attr_mode_124_we),
    .wd     (clicint_124_attr_mode_124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[124].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_124_attr_mode_124_qs)
  );


  // F[ctl_124]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_124_ctl_124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_124_ctl_124_we),
    .wd     (clicint_124_ctl_124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[124].ctl.q ),

    // to register interface (read)
    .qs     (clicint_124_ctl_124_qs)
  );


  // Subregister 125 of Multireg clicint
  // R[clicint_125]: V(False)

  // F[ip_125]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_125_ip_125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_125_ip_125_we),
    .wd     (clicint_125_ip_125_wd),

    // from internal hardware
    .de     (hw2reg.clicint[125].ip.de),
    .d      (hw2reg.clicint[125].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[125].ip.q ),

    // to register interface (read)
    .qs     (clicint_125_ip_125_qs)
  );


  // F[ie_125]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_125_ie_125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_125_ie_125_we),
    .wd     (clicint_125_ie_125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[125].ie.q ),

    // to register interface (read)
    .qs     (clicint_125_ie_125_qs)
  );


  // F[attr_shv_125]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_125_attr_shv_125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_125_attr_shv_125_we),
    .wd     (clicint_125_attr_shv_125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[125].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_125_attr_shv_125_qs)
  );


  // F[attr_trig_125]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_125_attr_trig_125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_125_attr_trig_125_we),
    .wd     (clicint_125_attr_trig_125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[125].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_125_attr_trig_125_qs)
  );


  // F[attr_mode_125]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_125_attr_mode_125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_125_attr_mode_125_we),
    .wd     (clicint_125_attr_mode_125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[125].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_125_attr_mode_125_qs)
  );


  // F[ctl_125]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_125_ctl_125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_125_ctl_125_we),
    .wd     (clicint_125_ctl_125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[125].ctl.q ),

    // to register interface (read)
    .qs     (clicint_125_ctl_125_qs)
  );


  // Subregister 126 of Multireg clicint
  // R[clicint_126]: V(False)

  // F[ip_126]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_126_ip_126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_126_ip_126_we),
    .wd     (clicint_126_ip_126_wd),

    // from internal hardware
    .de     (hw2reg.clicint[126].ip.de),
    .d      (hw2reg.clicint[126].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[126].ip.q ),

    // to register interface (read)
    .qs     (clicint_126_ip_126_qs)
  );


  // F[ie_126]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_126_ie_126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_126_ie_126_we),
    .wd     (clicint_126_ie_126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[126].ie.q ),

    // to register interface (read)
    .qs     (clicint_126_ie_126_qs)
  );


  // F[attr_shv_126]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_126_attr_shv_126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_126_attr_shv_126_we),
    .wd     (clicint_126_attr_shv_126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[126].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_126_attr_shv_126_qs)
  );


  // F[attr_trig_126]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_126_attr_trig_126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_126_attr_trig_126_we),
    .wd     (clicint_126_attr_trig_126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[126].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_126_attr_trig_126_qs)
  );


  // F[attr_mode_126]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_126_attr_mode_126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_126_attr_mode_126_we),
    .wd     (clicint_126_attr_mode_126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[126].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_126_attr_mode_126_qs)
  );


  // F[ctl_126]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_126_ctl_126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_126_ctl_126_we),
    .wd     (clicint_126_ctl_126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[126].ctl.q ),

    // to register interface (read)
    .qs     (clicint_126_ctl_126_qs)
  );


  // Subregister 127 of Multireg clicint
  // R[clicint_127]: V(False)

  // F[ip_127]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_127_ip_127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_127_ip_127_we),
    .wd     (clicint_127_ip_127_wd),

    // from internal hardware
    .de     (hw2reg.clicint[127].ip.de),
    .d      (hw2reg.clicint[127].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[127].ip.q ),

    // to register interface (read)
    .qs     (clicint_127_ip_127_qs)
  );


  // F[ie_127]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_127_ie_127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_127_ie_127_we),
    .wd     (clicint_127_ie_127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[127].ie.q ),

    // to register interface (read)
    .qs     (clicint_127_ie_127_qs)
  );


  // F[attr_shv_127]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_127_attr_shv_127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_127_attr_shv_127_we),
    .wd     (clicint_127_attr_shv_127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[127].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_127_attr_shv_127_qs)
  );


  // F[attr_trig_127]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_127_attr_trig_127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_127_attr_trig_127_we),
    .wd     (clicint_127_attr_trig_127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[127].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_127_attr_trig_127_qs)
  );


  // F[attr_mode_127]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_127_attr_mode_127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_127_attr_mode_127_we),
    .wd     (clicint_127_attr_mode_127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[127].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_127_attr_mode_127_qs)
  );


  // F[ctl_127]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_127_ctl_127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_127_ctl_127_we),
    .wd     (clicint_127_ctl_127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[127].ctl.q ),

    // to register interface (read)
    .qs     (clicint_127_ctl_127_qs)
  );


  // Subregister 128 of Multireg clicint
  // R[clicint_128]: V(False)

  // F[ip_128]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_128_ip_128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_128_ip_128_we),
    .wd     (clicint_128_ip_128_wd),

    // from internal hardware
    .de     (hw2reg.clicint[128].ip.de),
    .d      (hw2reg.clicint[128].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[128].ip.q ),

    // to register interface (read)
    .qs     (clicint_128_ip_128_qs)
  );


  // F[ie_128]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_128_ie_128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_128_ie_128_we),
    .wd     (clicint_128_ie_128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[128].ie.q ),

    // to register interface (read)
    .qs     (clicint_128_ie_128_qs)
  );


  // F[attr_shv_128]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_128_attr_shv_128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_128_attr_shv_128_we),
    .wd     (clicint_128_attr_shv_128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[128].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_128_attr_shv_128_qs)
  );


  // F[attr_trig_128]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_128_attr_trig_128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_128_attr_trig_128_we),
    .wd     (clicint_128_attr_trig_128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[128].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_128_attr_trig_128_qs)
  );


  // F[attr_mode_128]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_128_attr_mode_128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_128_attr_mode_128_we),
    .wd     (clicint_128_attr_mode_128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[128].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_128_attr_mode_128_qs)
  );


  // F[ctl_128]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_128_ctl_128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_128_ctl_128_we),
    .wd     (clicint_128_ctl_128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[128].ctl.q ),

    // to register interface (read)
    .qs     (clicint_128_ctl_128_qs)
  );


  // Subregister 129 of Multireg clicint
  // R[clicint_129]: V(False)

  // F[ip_129]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_129_ip_129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_129_ip_129_we),
    .wd     (clicint_129_ip_129_wd),

    // from internal hardware
    .de     (hw2reg.clicint[129].ip.de),
    .d      (hw2reg.clicint[129].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[129].ip.q ),

    // to register interface (read)
    .qs     (clicint_129_ip_129_qs)
  );


  // F[ie_129]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_129_ie_129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_129_ie_129_we),
    .wd     (clicint_129_ie_129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[129].ie.q ),

    // to register interface (read)
    .qs     (clicint_129_ie_129_qs)
  );


  // F[attr_shv_129]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_129_attr_shv_129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_129_attr_shv_129_we),
    .wd     (clicint_129_attr_shv_129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[129].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_129_attr_shv_129_qs)
  );


  // F[attr_trig_129]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_129_attr_trig_129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_129_attr_trig_129_we),
    .wd     (clicint_129_attr_trig_129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[129].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_129_attr_trig_129_qs)
  );


  // F[attr_mode_129]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_129_attr_mode_129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_129_attr_mode_129_we),
    .wd     (clicint_129_attr_mode_129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[129].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_129_attr_mode_129_qs)
  );


  // F[ctl_129]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_129_ctl_129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_129_ctl_129_we),
    .wd     (clicint_129_ctl_129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[129].ctl.q ),

    // to register interface (read)
    .qs     (clicint_129_ctl_129_qs)
  );


  // Subregister 130 of Multireg clicint
  // R[clicint_130]: V(False)

  // F[ip_130]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_130_ip_130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_130_ip_130_we),
    .wd     (clicint_130_ip_130_wd),

    // from internal hardware
    .de     (hw2reg.clicint[130].ip.de),
    .d      (hw2reg.clicint[130].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[130].ip.q ),

    // to register interface (read)
    .qs     (clicint_130_ip_130_qs)
  );


  // F[ie_130]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_130_ie_130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_130_ie_130_we),
    .wd     (clicint_130_ie_130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[130].ie.q ),

    // to register interface (read)
    .qs     (clicint_130_ie_130_qs)
  );


  // F[attr_shv_130]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_130_attr_shv_130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_130_attr_shv_130_we),
    .wd     (clicint_130_attr_shv_130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[130].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_130_attr_shv_130_qs)
  );


  // F[attr_trig_130]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_130_attr_trig_130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_130_attr_trig_130_we),
    .wd     (clicint_130_attr_trig_130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[130].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_130_attr_trig_130_qs)
  );


  // F[attr_mode_130]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_130_attr_mode_130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_130_attr_mode_130_we),
    .wd     (clicint_130_attr_mode_130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[130].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_130_attr_mode_130_qs)
  );


  // F[ctl_130]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_130_ctl_130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_130_ctl_130_we),
    .wd     (clicint_130_ctl_130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[130].ctl.q ),

    // to register interface (read)
    .qs     (clicint_130_ctl_130_qs)
  );


  // Subregister 131 of Multireg clicint
  // R[clicint_131]: V(False)

  // F[ip_131]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_131_ip_131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_131_ip_131_we),
    .wd     (clicint_131_ip_131_wd),

    // from internal hardware
    .de     (hw2reg.clicint[131].ip.de),
    .d      (hw2reg.clicint[131].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[131].ip.q ),

    // to register interface (read)
    .qs     (clicint_131_ip_131_qs)
  );


  // F[ie_131]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_131_ie_131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_131_ie_131_we),
    .wd     (clicint_131_ie_131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[131].ie.q ),

    // to register interface (read)
    .qs     (clicint_131_ie_131_qs)
  );


  // F[attr_shv_131]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_131_attr_shv_131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_131_attr_shv_131_we),
    .wd     (clicint_131_attr_shv_131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[131].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_131_attr_shv_131_qs)
  );


  // F[attr_trig_131]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_131_attr_trig_131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_131_attr_trig_131_we),
    .wd     (clicint_131_attr_trig_131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[131].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_131_attr_trig_131_qs)
  );


  // F[attr_mode_131]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_131_attr_mode_131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_131_attr_mode_131_we),
    .wd     (clicint_131_attr_mode_131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[131].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_131_attr_mode_131_qs)
  );


  // F[ctl_131]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_131_ctl_131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_131_ctl_131_we),
    .wd     (clicint_131_ctl_131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[131].ctl.q ),

    // to register interface (read)
    .qs     (clicint_131_ctl_131_qs)
  );


  // Subregister 132 of Multireg clicint
  // R[clicint_132]: V(False)

  // F[ip_132]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_132_ip_132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_132_ip_132_we),
    .wd     (clicint_132_ip_132_wd),

    // from internal hardware
    .de     (hw2reg.clicint[132].ip.de),
    .d      (hw2reg.clicint[132].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[132].ip.q ),

    // to register interface (read)
    .qs     (clicint_132_ip_132_qs)
  );


  // F[ie_132]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_132_ie_132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_132_ie_132_we),
    .wd     (clicint_132_ie_132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[132].ie.q ),

    // to register interface (read)
    .qs     (clicint_132_ie_132_qs)
  );


  // F[attr_shv_132]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_132_attr_shv_132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_132_attr_shv_132_we),
    .wd     (clicint_132_attr_shv_132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[132].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_132_attr_shv_132_qs)
  );


  // F[attr_trig_132]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_132_attr_trig_132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_132_attr_trig_132_we),
    .wd     (clicint_132_attr_trig_132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[132].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_132_attr_trig_132_qs)
  );


  // F[attr_mode_132]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_132_attr_mode_132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_132_attr_mode_132_we),
    .wd     (clicint_132_attr_mode_132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[132].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_132_attr_mode_132_qs)
  );


  // F[ctl_132]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_132_ctl_132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_132_ctl_132_we),
    .wd     (clicint_132_ctl_132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[132].ctl.q ),

    // to register interface (read)
    .qs     (clicint_132_ctl_132_qs)
  );


  // Subregister 133 of Multireg clicint
  // R[clicint_133]: V(False)

  // F[ip_133]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_133_ip_133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_133_ip_133_we),
    .wd     (clicint_133_ip_133_wd),

    // from internal hardware
    .de     (hw2reg.clicint[133].ip.de),
    .d      (hw2reg.clicint[133].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[133].ip.q ),

    // to register interface (read)
    .qs     (clicint_133_ip_133_qs)
  );


  // F[ie_133]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_133_ie_133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_133_ie_133_we),
    .wd     (clicint_133_ie_133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[133].ie.q ),

    // to register interface (read)
    .qs     (clicint_133_ie_133_qs)
  );


  // F[attr_shv_133]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_133_attr_shv_133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_133_attr_shv_133_we),
    .wd     (clicint_133_attr_shv_133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[133].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_133_attr_shv_133_qs)
  );


  // F[attr_trig_133]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_133_attr_trig_133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_133_attr_trig_133_we),
    .wd     (clicint_133_attr_trig_133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[133].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_133_attr_trig_133_qs)
  );


  // F[attr_mode_133]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_133_attr_mode_133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_133_attr_mode_133_we),
    .wd     (clicint_133_attr_mode_133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[133].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_133_attr_mode_133_qs)
  );


  // F[ctl_133]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_133_ctl_133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_133_ctl_133_we),
    .wd     (clicint_133_ctl_133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[133].ctl.q ),

    // to register interface (read)
    .qs     (clicint_133_ctl_133_qs)
  );


  // Subregister 134 of Multireg clicint
  // R[clicint_134]: V(False)

  // F[ip_134]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_134_ip_134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_134_ip_134_we),
    .wd     (clicint_134_ip_134_wd),

    // from internal hardware
    .de     (hw2reg.clicint[134].ip.de),
    .d      (hw2reg.clicint[134].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[134].ip.q ),

    // to register interface (read)
    .qs     (clicint_134_ip_134_qs)
  );


  // F[ie_134]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_134_ie_134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_134_ie_134_we),
    .wd     (clicint_134_ie_134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[134].ie.q ),

    // to register interface (read)
    .qs     (clicint_134_ie_134_qs)
  );


  // F[attr_shv_134]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_134_attr_shv_134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_134_attr_shv_134_we),
    .wd     (clicint_134_attr_shv_134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[134].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_134_attr_shv_134_qs)
  );


  // F[attr_trig_134]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_134_attr_trig_134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_134_attr_trig_134_we),
    .wd     (clicint_134_attr_trig_134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[134].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_134_attr_trig_134_qs)
  );


  // F[attr_mode_134]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_134_attr_mode_134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_134_attr_mode_134_we),
    .wd     (clicint_134_attr_mode_134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[134].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_134_attr_mode_134_qs)
  );


  // F[ctl_134]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_134_ctl_134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_134_ctl_134_we),
    .wd     (clicint_134_ctl_134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[134].ctl.q ),

    // to register interface (read)
    .qs     (clicint_134_ctl_134_qs)
  );


  // Subregister 135 of Multireg clicint
  // R[clicint_135]: V(False)

  // F[ip_135]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_135_ip_135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_135_ip_135_we),
    .wd     (clicint_135_ip_135_wd),

    // from internal hardware
    .de     (hw2reg.clicint[135].ip.de),
    .d      (hw2reg.clicint[135].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[135].ip.q ),

    // to register interface (read)
    .qs     (clicint_135_ip_135_qs)
  );


  // F[ie_135]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_135_ie_135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_135_ie_135_we),
    .wd     (clicint_135_ie_135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[135].ie.q ),

    // to register interface (read)
    .qs     (clicint_135_ie_135_qs)
  );


  // F[attr_shv_135]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_135_attr_shv_135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_135_attr_shv_135_we),
    .wd     (clicint_135_attr_shv_135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[135].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_135_attr_shv_135_qs)
  );


  // F[attr_trig_135]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_135_attr_trig_135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_135_attr_trig_135_we),
    .wd     (clicint_135_attr_trig_135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[135].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_135_attr_trig_135_qs)
  );


  // F[attr_mode_135]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_135_attr_mode_135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_135_attr_mode_135_we),
    .wd     (clicint_135_attr_mode_135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[135].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_135_attr_mode_135_qs)
  );


  // F[ctl_135]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_135_ctl_135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_135_ctl_135_we),
    .wd     (clicint_135_ctl_135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[135].ctl.q ),

    // to register interface (read)
    .qs     (clicint_135_ctl_135_qs)
  );


  // Subregister 136 of Multireg clicint
  // R[clicint_136]: V(False)

  // F[ip_136]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_136_ip_136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_136_ip_136_we),
    .wd     (clicint_136_ip_136_wd),

    // from internal hardware
    .de     (hw2reg.clicint[136].ip.de),
    .d      (hw2reg.clicint[136].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[136].ip.q ),

    // to register interface (read)
    .qs     (clicint_136_ip_136_qs)
  );


  // F[ie_136]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_136_ie_136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_136_ie_136_we),
    .wd     (clicint_136_ie_136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[136].ie.q ),

    // to register interface (read)
    .qs     (clicint_136_ie_136_qs)
  );


  // F[attr_shv_136]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_136_attr_shv_136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_136_attr_shv_136_we),
    .wd     (clicint_136_attr_shv_136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[136].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_136_attr_shv_136_qs)
  );


  // F[attr_trig_136]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_136_attr_trig_136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_136_attr_trig_136_we),
    .wd     (clicint_136_attr_trig_136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[136].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_136_attr_trig_136_qs)
  );


  // F[attr_mode_136]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_136_attr_mode_136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_136_attr_mode_136_we),
    .wd     (clicint_136_attr_mode_136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[136].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_136_attr_mode_136_qs)
  );


  // F[ctl_136]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_136_ctl_136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_136_ctl_136_we),
    .wd     (clicint_136_ctl_136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[136].ctl.q ),

    // to register interface (read)
    .qs     (clicint_136_ctl_136_qs)
  );


  // Subregister 137 of Multireg clicint
  // R[clicint_137]: V(False)

  // F[ip_137]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_137_ip_137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_137_ip_137_we),
    .wd     (clicint_137_ip_137_wd),

    // from internal hardware
    .de     (hw2reg.clicint[137].ip.de),
    .d      (hw2reg.clicint[137].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[137].ip.q ),

    // to register interface (read)
    .qs     (clicint_137_ip_137_qs)
  );


  // F[ie_137]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_137_ie_137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_137_ie_137_we),
    .wd     (clicint_137_ie_137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[137].ie.q ),

    // to register interface (read)
    .qs     (clicint_137_ie_137_qs)
  );


  // F[attr_shv_137]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_137_attr_shv_137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_137_attr_shv_137_we),
    .wd     (clicint_137_attr_shv_137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[137].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_137_attr_shv_137_qs)
  );


  // F[attr_trig_137]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_137_attr_trig_137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_137_attr_trig_137_we),
    .wd     (clicint_137_attr_trig_137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[137].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_137_attr_trig_137_qs)
  );


  // F[attr_mode_137]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_137_attr_mode_137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_137_attr_mode_137_we),
    .wd     (clicint_137_attr_mode_137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[137].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_137_attr_mode_137_qs)
  );


  // F[ctl_137]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_137_ctl_137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_137_ctl_137_we),
    .wd     (clicint_137_ctl_137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[137].ctl.q ),

    // to register interface (read)
    .qs     (clicint_137_ctl_137_qs)
  );


  // Subregister 138 of Multireg clicint
  // R[clicint_138]: V(False)

  // F[ip_138]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_138_ip_138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_138_ip_138_we),
    .wd     (clicint_138_ip_138_wd),

    // from internal hardware
    .de     (hw2reg.clicint[138].ip.de),
    .d      (hw2reg.clicint[138].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[138].ip.q ),

    // to register interface (read)
    .qs     (clicint_138_ip_138_qs)
  );


  // F[ie_138]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_138_ie_138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_138_ie_138_we),
    .wd     (clicint_138_ie_138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[138].ie.q ),

    // to register interface (read)
    .qs     (clicint_138_ie_138_qs)
  );


  // F[attr_shv_138]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_138_attr_shv_138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_138_attr_shv_138_we),
    .wd     (clicint_138_attr_shv_138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[138].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_138_attr_shv_138_qs)
  );


  // F[attr_trig_138]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_138_attr_trig_138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_138_attr_trig_138_we),
    .wd     (clicint_138_attr_trig_138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[138].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_138_attr_trig_138_qs)
  );


  // F[attr_mode_138]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_138_attr_mode_138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_138_attr_mode_138_we),
    .wd     (clicint_138_attr_mode_138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[138].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_138_attr_mode_138_qs)
  );


  // F[ctl_138]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_138_ctl_138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_138_ctl_138_we),
    .wd     (clicint_138_ctl_138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[138].ctl.q ),

    // to register interface (read)
    .qs     (clicint_138_ctl_138_qs)
  );


  // Subregister 139 of Multireg clicint
  // R[clicint_139]: V(False)

  // F[ip_139]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_139_ip_139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_139_ip_139_we),
    .wd     (clicint_139_ip_139_wd),

    // from internal hardware
    .de     (hw2reg.clicint[139].ip.de),
    .d      (hw2reg.clicint[139].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[139].ip.q ),

    // to register interface (read)
    .qs     (clicint_139_ip_139_qs)
  );


  // F[ie_139]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_139_ie_139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_139_ie_139_we),
    .wd     (clicint_139_ie_139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[139].ie.q ),

    // to register interface (read)
    .qs     (clicint_139_ie_139_qs)
  );


  // F[attr_shv_139]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_139_attr_shv_139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_139_attr_shv_139_we),
    .wd     (clicint_139_attr_shv_139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[139].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_139_attr_shv_139_qs)
  );


  // F[attr_trig_139]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_139_attr_trig_139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_139_attr_trig_139_we),
    .wd     (clicint_139_attr_trig_139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[139].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_139_attr_trig_139_qs)
  );


  // F[attr_mode_139]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_139_attr_mode_139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_139_attr_mode_139_we),
    .wd     (clicint_139_attr_mode_139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[139].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_139_attr_mode_139_qs)
  );


  // F[ctl_139]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_139_ctl_139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_139_ctl_139_we),
    .wd     (clicint_139_ctl_139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[139].ctl.q ),

    // to register interface (read)
    .qs     (clicint_139_ctl_139_qs)
  );


  // Subregister 140 of Multireg clicint
  // R[clicint_140]: V(False)

  // F[ip_140]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_140_ip_140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_140_ip_140_we),
    .wd     (clicint_140_ip_140_wd),

    // from internal hardware
    .de     (hw2reg.clicint[140].ip.de),
    .d      (hw2reg.clicint[140].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[140].ip.q ),

    // to register interface (read)
    .qs     (clicint_140_ip_140_qs)
  );


  // F[ie_140]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_140_ie_140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_140_ie_140_we),
    .wd     (clicint_140_ie_140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[140].ie.q ),

    // to register interface (read)
    .qs     (clicint_140_ie_140_qs)
  );


  // F[attr_shv_140]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_140_attr_shv_140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_140_attr_shv_140_we),
    .wd     (clicint_140_attr_shv_140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[140].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_140_attr_shv_140_qs)
  );


  // F[attr_trig_140]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_140_attr_trig_140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_140_attr_trig_140_we),
    .wd     (clicint_140_attr_trig_140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[140].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_140_attr_trig_140_qs)
  );


  // F[attr_mode_140]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_140_attr_mode_140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_140_attr_mode_140_we),
    .wd     (clicint_140_attr_mode_140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[140].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_140_attr_mode_140_qs)
  );


  // F[ctl_140]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_140_ctl_140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_140_ctl_140_we),
    .wd     (clicint_140_ctl_140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[140].ctl.q ),

    // to register interface (read)
    .qs     (clicint_140_ctl_140_qs)
  );


  // Subregister 141 of Multireg clicint
  // R[clicint_141]: V(False)

  // F[ip_141]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_141_ip_141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_141_ip_141_we),
    .wd     (clicint_141_ip_141_wd),

    // from internal hardware
    .de     (hw2reg.clicint[141].ip.de),
    .d      (hw2reg.clicint[141].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[141].ip.q ),

    // to register interface (read)
    .qs     (clicint_141_ip_141_qs)
  );


  // F[ie_141]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_141_ie_141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_141_ie_141_we),
    .wd     (clicint_141_ie_141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[141].ie.q ),

    // to register interface (read)
    .qs     (clicint_141_ie_141_qs)
  );


  // F[attr_shv_141]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_141_attr_shv_141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_141_attr_shv_141_we),
    .wd     (clicint_141_attr_shv_141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[141].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_141_attr_shv_141_qs)
  );


  // F[attr_trig_141]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_141_attr_trig_141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_141_attr_trig_141_we),
    .wd     (clicint_141_attr_trig_141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[141].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_141_attr_trig_141_qs)
  );


  // F[attr_mode_141]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_141_attr_mode_141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_141_attr_mode_141_we),
    .wd     (clicint_141_attr_mode_141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[141].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_141_attr_mode_141_qs)
  );


  // F[ctl_141]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_141_ctl_141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_141_ctl_141_we),
    .wd     (clicint_141_ctl_141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[141].ctl.q ),

    // to register interface (read)
    .qs     (clicint_141_ctl_141_qs)
  );


  // Subregister 142 of Multireg clicint
  // R[clicint_142]: V(False)

  // F[ip_142]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_142_ip_142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_142_ip_142_we),
    .wd     (clicint_142_ip_142_wd),

    // from internal hardware
    .de     (hw2reg.clicint[142].ip.de),
    .d      (hw2reg.clicint[142].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[142].ip.q ),

    // to register interface (read)
    .qs     (clicint_142_ip_142_qs)
  );


  // F[ie_142]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_142_ie_142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_142_ie_142_we),
    .wd     (clicint_142_ie_142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[142].ie.q ),

    // to register interface (read)
    .qs     (clicint_142_ie_142_qs)
  );


  // F[attr_shv_142]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_142_attr_shv_142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_142_attr_shv_142_we),
    .wd     (clicint_142_attr_shv_142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[142].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_142_attr_shv_142_qs)
  );


  // F[attr_trig_142]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_142_attr_trig_142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_142_attr_trig_142_we),
    .wd     (clicint_142_attr_trig_142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[142].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_142_attr_trig_142_qs)
  );


  // F[attr_mode_142]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_142_attr_mode_142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_142_attr_mode_142_we),
    .wd     (clicint_142_attr_mode_142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[142].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_142_attr_mode_142_qs)
  );


  // F[ctl_142]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_142_ctl_142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_142_ctl_142_we),
    .wd     (clicint_142_ctl_142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[142].ctl.q ),

    // to register interface (read)
    .qs     (clicint_142_ctl_142_qs)
  );


  // Subregister 143 of Multireg clicint
  // R[clicint_143]: V(False)

  // F[ip_143]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_143_ip_143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_143_ip_143_we),
    .wd     (clicint_143_ip_143_wd),

    // from internal hardware
    .de     (hw2reg.clicint[143].ip.de),
    .d      (hw2reg.clicint[143].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[143].ip.q ),

    // to register interface (read)
    .qs     (clicint_143_ip_143_qs)
  );


  // F[ie_143]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_143_ie_143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_143_ie_143_we),
    .wd     (clicint_143_ie_143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[143].ie.q ),

    // to register interface (read)
    .qs     (clicint_143_ie_143_qs)
  );


  // F[attr_shv_143]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_143_attr_shv_143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_143_attr_shv_143_we),
    .wd     (clicint_143_attr_shv_143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[143].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_143_attr_shv_143_qs)
  );


  // F[attr_trig_143]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_143_attr_trig_143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_143_attr_trig_143_we),
    .wd     (clicint_143_attr_trig_143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[143].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_143_attr_trig_143_qs)
  );


  // F[attr_mode_143]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_143_attr_mode_143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_143_attr_mode_143_we),
    .wd     (clicint_143_attr_mode_143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[143].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_143_attr_mode_143_qs)
  );


  // F[ctl_143]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_143_ctl_143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_143_ctl_143_we),
    .wd     (clicint_143_ctl_143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[143].ctl.q ),

    // to register interface (read)
    .qs     (clicint_143_ctl_143_qs)
  );


  // Subregister 144 of Multireg clicint
  // R[clicint_144]: V(False)

  // F[ip_144]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_144_ip_144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_144_ip_144_we),
    .wd     (clicint_144_ip_144_wd),

    // from internal hardware
    .de     (hw2reg.clicint[144].ip.de),
    .d      (hw2reg.clicint[144].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[144].ip.q ),

    // to register interface (read)
    .qs     (clicint_144_ip_144_qs)
  );


  // F[ie_144]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_144_ie_144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_144_ie_144_we),
    .wd     (clicint_144_ie_144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[144].ie.q ),

    // to register interface (read)
    .qs     (clicint_144_ie_144_qs)
  );


  // F[attr_shv_144]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_144_attr_shv_144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_144_attr_shv_144_we),
    .wd     (clicint_144_attr_shv_144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[144].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_144_attr_shv_144_qs)
  );


  // F[attr_trig_144]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_144_attr_trig_144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_144_attr_trig_144_we),
    .wd     (clicint_144_attr_trig_144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[144].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_144_attr_trig_144_qs)
  );


  // F[attr_mode_144]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_144_attr_mode_144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_144_attr_mode_144_we),
    .wd     (clicint_144_attr_mode_144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[144].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_144_attr_mode_144_qs)
  );


  // F[ctl_144]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_144_ctl_144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_144_ctl_144_we),
    .wd     (clicint_144_ctl_144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[144].ctl.q ),

    // to register interface (read)
    .qs     (clicint_144_ctl_144_qs)
  );


  // Subregister 145 of Multireg clicint
  // R[clicint_145]: V(False)

  // F[ip_145]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_145_ip_145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_145_ip_145_we),
    .wd     (clicint_145_ip_145_wd),

    // from internal hardware
    .de     (hw2reg.clicint[145].ip.de),
    .d      (hw2reg.clicint[145].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[145].ip.q ),

    // to register interface (read)
    .qs     (clicint_145_ip_145_qs)
  );


  // F[ie_145]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_145_ie_145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_145_ie_145_we),
    .wd     (clicint_145_ie_145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[145].ie.q ),

    // to register interface (read)
    .qs     (clicint_145_ie_145_qs)
  );


  // F[attr_shv_145]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_145_attr_shv_145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_145_attr_shv_145_we),
    .wd     (clicint_145_attr_shv_145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[145].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_145_attr_shv_145_qs)
  );


  // F[attr_trig_145]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_145_attr_trig_145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_145_attr_trig_145_we),
    .wd     (clicint_145_attr_trig_145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[145].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_145_attr_trig_145_qs)
  );


  // F[attr_mode_145]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_145_attr_mode_145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_145_attr_mode_145_we),
    .wd     (clicint_145_attr_mode_145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[145].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_145_attr_mode_145_qs)
  );


  // F[ctl_145]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_145_ctl_145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_145_ctl_145_we),
    .wd     (clicint_145_ctl_145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[145].ctl.q ),

    // to register interface (read)
    .qs     (clicint_145_ctl_145_qs)
  );


  // Subregister 146 of Multireg clicint
  // R[clicint_146]: V(False)

  // F[ip_146]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_146_ip_146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_146_ip_146_we),
    .wd     (clicint_146_ip_146_wd),

    // from internal hardware
    .de     (hw2reg.clicint[146].ip.de),
    .d      (hw2reg.clicint[146].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[146].ip.q ),

    // to register interface (read)
    .qs     (clicint_146_ip_146_qs)
  );


  // F[ie_146]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_146_ie_146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_146_ie_146_we),
    .wd     (clicint_146_ie_146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[146].ie.q ),

    // to register interface (read)
    .qs     (clicint_146_ie_146_qs)
  );


  // F[attr_shv_146]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_146_attr_shv_146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_146_attr_shv_146_we),
    .wd     (clicint_146_attr_shv_146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[146].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_146_attr_shv_146_qs)
  );


  // F[attr_trig_146]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_146_attr_trig_146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_146_attr_trig_146_we),
    .wd     (clicint_146_attr_trig_146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[146].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_146_attr_trig_146_qs)
  );


  // F[attr_mode_146]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_146_attr_mode_146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_146_attr_mode_146_we),
    .wd     (clicint_146_attr_mode_146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[146].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_146_attr_mode_146_qs)
  );


  // F[ctl_146]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_146_ctl_146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_146_ctl_146_we),
    .wd     (clicint_146_ctl_146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[146].ctl.q ),

    // to register interface (read)
    .qs     (clicint_146_ctl_146_qs)
  );


  // Subregister 147 of Multireg clicint
  // R[clicint_147]: V(False)

  // F[ip_147]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_147_ip_147 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_147_ip_147_we),
    .wd     (clicint_147_ip_147_wd),

    // from internal hardware
    .de     (hw2reg.clicint[147].ip.de),
    .d      (hw2reg.clicint[147].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[147].ip.q ),

    // to register interface (read)
    .qs     (clicint_147_ip_147_qs)
  );


  // F[ie_147]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_147_ie_147 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_147_ie_147_we),
    .wd     (clicint_147_ie_147_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[147].ie.q ),

    // to register interface (read)
    .qs     (clicint_147_ie_147_qs)
  );


  // F[attr_shv_147]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_147_attr_shv_147 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_147_attr_shv_147_we),
    .wd     (clicint_147_attr_shv_147_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[147].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_147_attr_shv_147_qs)
  );


  // F[attr_trig_147]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_147_attr_trig_147 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_147_attr_trig_147_we),
    .wd     (clicint_147_attr_trig_147_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[147].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_147_attr_trig_147_qs)
  );


  // F[attr_mode_147]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_147_attr_mode_147 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_147_attr_mode_147_we),
    .wd     (clicint_147_attr_mode_147_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[147].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_147_attr_mode_147_qs)
  );


  // F[ctl_147]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_147_ctl_147 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_147_ctl_147_we),
    .wd     (clicint_147_ctl_147_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[147].ctl.q ),

    // to register interface (read)
    .qs     (clicint_147_ctl_147_qs)
  );


  // Subregister 148 of Multireg clicint
  // R[clicint_148]: V(False)

  // F[ip_148]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_148_ip_148 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_148_ip_148_we),
    .wd     (clicint_148_ip_148_wd),

    // from internal hardware
    .de     (hw2reg.clicint[148].ip.de),
    .d      (hw2reg.clicint[148].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[148].ip.q ),

    // to register interface (read)
    .qs     (clicint_148_ip_148_qs)
  );


  // F[ie_148]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_148_ie_148 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_148_ie_148_we),
    .wd     (clicint_148_ie_148_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[148].ie.q ),

    // to register interface (read)
    .qs     (clicint_148_ie_148_qs)
  );


  // F[attr_shv_148]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_148_attr_shv_148 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_148_attr_shv_148_we),
    .wd     (clicint_148_attr_shv_148_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[148].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_148_attr_shv_148_qs)
  );


  // F[attr_trig_148]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_148_attr_trig_148 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_148_attr_trig_148_we),
    .wd     (clicint_148_attr_trig_148_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[148].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_148_attr_trig_148_qs)
  );


  // F[attr_mode_148]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_148_attr_mode_148 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_148_attr_mode_148_we),
    .wd     (clicint_148_attr_mode_148_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[148].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_148_attr_mode_148_qs)
  );


  // F[ctl_148]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_148_ctl_148 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_148_ctl_148_we),
    .wd     (clicint_148_ctl_148_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[148].ctl.q ),

    // to register interface (read)
    .qs     (clicint_148_ctl_148_qs)
  );


  // Subregister 149 of Multireg clicint
  // R[clicint_149]: V(False)

  // F[ip_149]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_149_ip_149 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_149_ip_149_we),
    .wd     (clicint_149_ip_149_wd),

    // from internal hardware
    .de     (hw2reg.clicint[149].ip.de),
    .d      (hw2reg.clicint[149].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[149].ip.q ),

    // to register interface (read)
    .qs     (clicint_149_ip_149_qs)
  );


  // F[ie_149]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_149_ie_149 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_149_ie_149_we),
    .wd     (clicint_149_ie_149_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[149].ie.q ),

    // to register interface (read)
    .qs     (clicint_149_ie_149_qs)
  );


  // F[attr_shv_149]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_149_attr_shv_149 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_149_attr_shv_149_we),
    .wd     (clicint_149_attr_shv_149_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[149].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_149_attr_shv_149_qs)
  );


  // F[attr_trig_149]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_149_attr_trig_149 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_149_attr_trig_149_we),
    .wd     (clicint_149_attr_trig_149_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[149].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_149_attr_trig_149_qs)
  );


  // F[attr_mode_149]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_149_attr_mode_149 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_149_attr_mode_149_we),
    .wd     (clicint_149_attr_mode_149_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[149].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_149_attr_mode_149_qs)
  );


  // F[ctl_149]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_149_ctl_149 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_149_ctl_149_we),
    .wd     (clicint_149_ctl_149_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[149].ctl.q ),

    // to register interface (read)
    .qs     (clicint_149_ctl_149_qs)
  );


  // Subregister 150 of Multireg clicint
  // R[clicint_150]: V(False)

  // F[ip_150]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_150_ip_150 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_150_ip_150_we),
    .wd     (clicint_150_ip_150_wd),

    // from internal hardware
    .de     (hw2reg.clicint[150].ip.de),
    .d      (hw2reg.clicint[150].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[150].ip.q ),

    // to register interface (read)
    .qs     (clicint_150_ip_150_qs)
  );


  // F[ie_150]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_150_ie_150 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_150_ie_150_we),
    .wd     (clicint_150_ie_150_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[150].ie.q ),

    // to register interface (read)
    .qs     (clicint_150_ie_150_qs)
  );


  // F[attr_shv_150]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_150_attr_shv_150 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_150_attr_shv_150_we),
    .wd     (clicint_150_attr_shv_150_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[150].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_150_attr_shv_150_qs)
  );


  // F[attr_trig_150]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_150_attr_trig_150 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_150_attr_trig_150_we),
    .wd     (clicint_150_attr_trig_150_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[150].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_150_attr_trig_150_qs)
  );


  // F[attr_mode_150]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_150_attr_mode_150 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_150_attr_mode_150_we),
    .wd     (clicint_150_attr_mode_150_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[150].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_150_attr_mode_150_qs)
  );


  // F[ctl_150]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_150_ctl_150 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_150_ctl_150_we),
    .wd     (clicint_150_ctl_150_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[150].ctl.q ),

    // to register interface (read)
    .qs     (clicint_150_ctl_150_qs)
  );


  // Subregister 151 of Multireg clicint
  // R[clicint_151]: V(False)

  // F[ip_151]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_151_ip_151 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_151_ip_151_we),
    .wd     (clicint_151_ip_151_wd),

    // from internal hardware
    .de     (hw2reg.clicint[151].ip.de),
    .d      (hw2reg.clicint[151].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[151].ip.q ),

    // to register interface (read)
    .qs     (clicint_151_ip_151_qs)
  );


  // F[ie_151]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_151_ie_151 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_151_ie_151_we),
    .wd     (clicint_151_ie_151_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[151].ie.q ),

    // to register interface (read)
    .qs     (clicint_151_ie_151_qs)
  );


  // F[attr_shv_151]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_151_attr_shv_151 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_151_attr_shv_151_we),
    .wd     (clicint_151_attr_shv_151_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[151].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_151_attr_shv_151_qs)
  );


  // F[attr_trig_151]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_151_attr_trig_151 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_151_attr_trig_151_we),
    .wd     (clicint_151_attr_trig_151_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[151].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_151_attr_trig_151_qs)
  );


  // F[attr_mode_151]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_151_attr_mode_151 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_151_attr_mode_151_we),
    .wd     (clicint_151_attr_mode_151_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[151].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_151_attr_mode_151_qs)
  );


  // F[ctl_151]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_151_ctl_151 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_151_ctl_151_we),
    .wd     (clicint_151_ctl_151_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[151].ctl.q ),

    // to register interface (read)
    .qs     (clicint_151_ctl_151_qs)
  );


  // Subregister 152 of Multireg clicint
  // R[clicint_152]: V(False)

  // F[ip_152]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_152_ip_152 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_152_ip_152_we),
    .wd     (clicint_152_ip_152_wd),

    // from internal hardware
    .de     (hw2reg.clicint[152].ip.de),
    .d      (hw2reg.clicint[152].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[152].ip.q ),

    // to register interface (read)
    .qs     (clicint_152_ip_152_qs)
  );


  // F[ie_152]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_152_ie_152 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_152_ie_152_we),
    .wd     (clicint_152_ie_152_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[152].ie.q ),

    // to register interface (read)
    .qs     (clicint_152_ie_152_qs)
  );


  // F[attr_shv_152]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_152_attr_shv_152 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_152_attr_shv_152_we),
    .wd     (clicint_152_attr_shv_152_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[152].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_152_attr_shv_152_qs)
  );


  // F[attr_trig_152]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_152_attr_trig_152 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_152_attr_trig_152_we),
    .wd     (clicint_152_attr_trig_152_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[152].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_152_attr_trig_152_qs)
  );


  // F[attr_mode_152]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_152_attr_mode_152 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_152_attr_mode_152_we),
    .wd     (clicint_152_attr_mode_152_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[152].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_152_attr_mode_152_qs)
  );


  // F[ctl_152]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_152_ctl_152 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_152_ctl_152_we),
    .wd     (clicint_152_ctl_152_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[152].ctl.q ),

    // to register interface (read)
    .qs     (clicint_152_ctl_152_qs)
  );


  // Subregister 153 of Multireg clicint
  // R[clicint_153]: V(False)

  // F[ip_153]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_153_ip_153 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_153_ip_153_we),
    .wd     (clicint_153_ip_153_wd),

    // from internal hardware
    .de     (hw2reg.clicint[153].ip.de),
    .d      (hw2reg.clicint[153].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[153].ip.q ),

    // to register interface (read)
    .qs     (clicint_153_ip_153_qs)
  );


  // F[ie_153]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_153_ie_153 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_153_ie_153_we),
    .wd     (clicint_153_ie_153_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[153].ie.q ),

    // to register interface (read)
    .qs     (clicint_153_ie_153_qs)
  );


  // F[attr_shv_153]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_153_attr_shv_153 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_153_attr_shv_153_we),
    .wd     (clicint_153_attr_shv_153_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[153].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_153_attr_shv_153_qs)
  );


  // F[attr_trig_153]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_153_attr_trig_153 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_153_attr_trig_153_we),
    .wd     (clicint_153_attr_trig_153_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[153].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_153_attr_trig_153_qs)
  );


  // F[attr_mode_153]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_153_attr_mode_153 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_153_attr_mode_153_we),
    .wd     (clicint_153_attr_mode_153_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[153].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_153_attr_mode_153_qs)
  );


  // F[ctl_153]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_153_ctl_153 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_153_ctl_153_we),
    .wd     (clicint_153_ctl_153_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[153].ctl.q ),

    // to register interface (read)
    .qs     (clicint_153_ctl_153_qs)
  );


  // Subregister 154 of Multireg clicint
  // R[clicint_154]: V(False)

  // F[ip_154]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_154_ip_154 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_154_ip_154_we),
    .wd     (clicint_154_ip_154_wd),

    // from internal hardware
    .de     (hw2reg.clicint[154].ip.de),
    .d      (hw2reg.clicint[154].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[154].ip.q ),

    // to register interface (read)
    .qs     (clicint_154_ip_154_qs)
  );


  // F[ie_154]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_154_ie_154 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_154_ie_154_we),
    .wd     (clicint_154_ie_154_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[154].ie.q ),

    // to register interface (read)
    .qs     (clicint_154_ie_154_qs)
  );


  // F[attr_shv_154]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_154_attr_shv_154 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_154_attr_shv_154_we),
    .wd     (clicint_154_attr_shv_154_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[154].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_154_attr_shv_154_qs)
  );


  // F[attr_trig_154]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_154_attr_trig_154 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_154_attr_trig_154_we),
    .wd     (clicint_154_attr_trig_154_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[154].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_154_attr_trig_154_qs)
  );


  // F[attr_mode_154]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_154_attr_mode_154 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_154_attr_mode_154_we),
    .wd     (clicint_154_attr_mode_154_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[154].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_154_attr_mode_154_qs)
  );


  // F[ctl_154]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_154_ctl_154 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_154_ctl_154_we),
    .wd     (clicint_154_ctl_154_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[154].ctl.q ),

    // to register interface (read)
    .qs     (clicint_154_ctl_154_qs)
  );


  // Subregister 155 of Multireg clicint
  // R[clicint_155]: V(False)

  // F[ip_155]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_155_ip_155 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_155_ip_155_we),
    .wd     (clicint_155_ip_155_wd),

    // from internal hardware
    .de     (hw2reg.clicint[155].ip.de),
    .d      (hw2reg.clicint[155].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[155].ip.q ),

    // to register interface (read)
    .qs     (clicint_155_ip_155_qs)
  );


  // F[ie_155]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_155_ie_155 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_155_ie_155_we),
    .wd     (clicint_155_ie_155_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[155].ie.q ),

    // to register interface (read)
    .qs     (clicint_155_ie_155_qs)
  );


  // F[attr_shv_155]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_155_attr_shv_155 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_155_attr_shv_155_we),
    .wd     (clicint_155_attr_shv_155_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[155].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_155_attr_shv_155_qs)
  );


  // F[attr_trig_155]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_155_attr_trig_155 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_155_attr_trig_155_we),
    .wd     (clicint_155_attr_trig_155_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[155].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_155_attr_trig_155_qs)
  );


  // F[attr_mode_155]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_155_attr_mode_155 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_155_attr_mode_155_we),
    .wd     (clicint_155_attr_mode_155_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[155].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_155_attr_mode_155_qs)
  );


  // F[ctl_155]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_155_ctl_155 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_155_ctl_155_we),
    .wd     (clicint_155_ctl_155_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[155].ctl.q ),

    // to register interface (read)
    .qs     (clicint_155_ctl_155_qs)
  );


  // Subregister 156 of Multireg clicint
  // R[clicint_156]: V(False)

  // F[ip_156]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_156_ip_156 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_156_ip_156_we),
    .wd     (clicint_156_ip_156_wd),

    // from internal hardware
    .de     (hw2reg.clicint[156].ip.de),
    .d      (hw2reg.clicint[156].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[156].ip.q ),

    // to register interface (read)
    .qs     (clicint_156_ip_156_qs)
  );


  // F[ie_156]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_156_ie_156 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_156_ie_156_we),
    .wd     (clicint_156_ie_156_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[156].ie.q ),

    // to register interface (read)
    .qs     (clicint_156_ie_156_qs)
  );


  // F[attr_shv_156]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_156_attr_shv_156 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_156_attr_shv_156_we),
    .wd     (clicint_156_attr_shv_156_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[156].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_156_attr_shv_156_qs)
  );


  // F[attr_trig_156]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_156_attr_trig_156 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_156_attr_trig_156_we),
    .wd     (clicint_156_attr_trig_156_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[156].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_156_attr_trig_156_qs)
  );


  // F[attr_mode_156]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_156_attr_mode_156 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_156_attr_mode_156_we),
    .wd     (clicint_156_attr_mode_156_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[156].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_156_attr_mode_156_qs)
  );


  // F[ctl_156]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_156_ctl_156 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_156_ctl_156_we),
    .wd     (clicint_156_ctl_156_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[156].ctl.q ),

    // to register interface (read)
    .qs     (clicint_156_ctl_156_qs)
  );


  // Subregister 157 of Multireg clicint
  // R[clicint_157]: V(False)

  // F[ip_157]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_157_ip_157 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_157_ip_157_we),
    .wd     (clicint_157_ip_157_wd),

    // from internal hardware
    .de     (hw2reg.clicint[157].ip.de),
    .d      (hw2reg.clicint[157].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[157].ip.q ),

    // to register interface (read)
    .qs     (clicint_157_ip_157_qs)
  );


  // F[ie_157]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_157_ie_157 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_157_ie_157_we),
    .wd     (clicint_157_ie_157_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[157].ie.q ),

    // to register interface (read)
    .qs     (clicint_157_ie_157_qs)
  );


  // F[attr_shv_157]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_157_attr_shv_157 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_157_attr_shv_157_we),
    .wd     (clicint_157_attr_shv_157_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[157].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_157_attr_shv_157_qs)
  );


  // F[attr_trig_157]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_157_attr_trig_157 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_157_attr_trig_157_we),
    .wd     (clicint_157_attr_trig_157_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[157].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_157_attr_trig_157_qs)
  );


  // F[attr_mode_157]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_157_attr_mode_157 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_157_attr_mode_157_we),
    .wd     (clicint_157_attr_mode_157_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[157].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_157_attr_mode_157_qs)
  );


  // F[ctl_157]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_157_ctl_157 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_157_ctl_157_we),
    .wd     (clicint_157_ctl_157_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[157].ctl.q ),

    // to register interface (read)
    .qs     (clicint_157_ctl_157_qs)
  );


  // Subregister 158 of Multireg clicint
  // R[clicint_158]: V(False)

  // F[ip_158]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_158_ip_158 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_158_ip_158_we),
    .wd     (clicint_158_ip_158_wd),

    // from internal hardware
    .de     (hw2reg.clicint[158].ip.de),
    .d      (hw2reg.clicint[158].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[158].ip.q ),

    // to register interface (read)
    .qs     (clicint_158_ip_158_qs)
  );


  // F[ie_158]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_158_ie_158 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_158_ie_158_we),
    .wd     (clicint_158_ie_158_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[158].ie.q ),

    // to register interface (read)
    .qs     (clicint_158_ie_158_qs)
  );


  // F[attr_shv_158]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_158_attr_shv_158 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_158_attr_shv_158_we),
    .wd     (clicint_158_attr_shv_158_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[158].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_158_attr_shv_158_qs)
  );


  // F[attr_trig_158]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_158_attr_trig_158 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_158_attr_trig_158_we),
    .wd     (clicint_158_attr_trig_158_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[158].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_158_attr_trig_158_qs)
  );


  // F[attr_mode_158]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_158_attr_mode_158 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_158_attr_mode_158_we),
    .wd     (clicint_158_attr_mode_158_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[158].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_158_attr_mode_158_qs)
  );


  // F[ctl_158]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_158_ctl_158 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_158_ctl_158_we),
    .wd     (clicint_158_ctl_158_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[158].ctl.q ),

    // to register interface (read)
    .qs     (clicint_158_ctl_158_qs)
  );


  // Subregister 159 of Multireg clicint
  // R[clicint_159]: V(False)

  // F[ip_159]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_159_ip_159 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_159_ip_159_we),
    .wd     (clicint_159_ip_159_wd),

    // from internal hardware
    .de     (hw2reg.clicint[159].ip.de),
    .d      (hw2reg.clicint[159].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[159].ip.q ),

    // to register interface (read)
    .qs     (clicint_159_ip_159_qs)
  );


  // F[ie_159]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_159_ie_159 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_159_ie_159_we),
    .wd     (clicint_159_ie_159_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[159].ie.q ),

    // to register interface (read)
    .qs     (clicint_159_ie_159_qs)
  );


  // F[attr_shv_159]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_159_attr_shv_159 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_159_attr_shv_159_we),
    .wd     (clicint_159_attr_shv_159_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[159].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_159_attr_shv_159_qs)
  );


  // F[attr_trig_159]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_159_attr_trig_159 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_159_attr_trig_159_we),
    .wd     (clicint_159_attr_trig_159_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[159].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_159_attr_trig_159_qs)
  );


  // F[attr_mode_159]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_159_attr_mode_159 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_159_attr_mode_159_we),
    .wd     (clicint_159_attr_mode_159_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[159].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_159_attr_mode_159_qs)
  );


  // F[ctl_159]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_159_ctl_159 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_159_ctl_159_we),
    .wd     (clicint_159_ctl_159_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[159].ctl.q ),

    // to register interface (read)
    .qs     (clicint_159_ctl_159_qs)
  );


  // Subregister 160 of Multireg clicint
  // R[clicint_160]: V(False)

  // F[ip_160]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_160_ip_160 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_160_ip_160_we),
    .wd     (clicint_160_ip_160_wd),

    // from internal hardware
    .de     (hw2reg.clicint[160].ip.de),
    .d      (hw2reg.clicint[160].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[160].ip.q ),

    // to register interface (read)
    .qs     (clicint_160_ip_160_qs)
  );


  // F[ie_160]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_160_ie_160 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_160_ie_160_we),
    .wd     (clicint_160_ie_160_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[160].ie.q ),

    // to register interface (read)
    .qs     (clicint_160_ie_160_qs)
  );


  // F[attr_shv_160]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_160_attr_shv_160 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_160_attr_shv_160_we),
    .wd     (clicint_160_attr_shv_160_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[160].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_160_attr_shv_160_qs)
  );


  // F[attr_trig_160]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_160_attr_trig_160 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_160_attr_trig_160_we),
    .wd     (clicint_160_attr_trig_160_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[160].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_160_attr_trig_160_qs)
  );


  // F[attr_mode_160]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_160_attr_mode_160 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_160_attr_mode_160_we),
    .wd     (clicint_160_attr_mode_160_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[160].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_160_attr_mode_160_qs)
  );


  // F[ctl_160]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_160_ctl_160 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_160_ctl_160_we),
    .wd     (clicint_160_ctl_160_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[160].ctl.q ),

    // to register interface (read)
    .qs     (clicint_160_ctl_160_qs)
  );


  // Subregister 161 of Multireg clicint
  // R[clicint_161]: V(False)

  // F[ip_161]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_161_ip_161 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_161_ip_161_we),
    .wd     (clicint_161_ip_161_wd),

    // from internal hardware
    .de     (hw2reg.clicint[161].ip.de),
    .d      (hw2reg.clicint[161].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[161].ip.q ),

    // to register interface (read)
    .qs     (clicint_161_ip_161_qs)
  );


  // F[ie_161]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_161_ie_161 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_161_ie_161_we),
    .wd     (clicint_161_ie_161_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[161].ie.q ),

    // to register interface (read)
    .qs     (clicint_161_ie_161_qs)
  );


  // F[attr_shv_161]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_161_attr_shv_161 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_161_attr_shv_161_we),
    .wd     (clicint_161_attr_shv_161_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[161].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_161_attr_shv_161_qs)
  );


  // F[attr_trig_161]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_161_attr_trig_161 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_161_attr_trig_161_we),
    .wd     (clicint_161_attr_trig_161_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[161].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_161_attr_trig_161_qs)
  );


  // F[attr_mode_161]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_161_attr_mode_161 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_161_attr_mode_161_we),
    .wd     (clicint_161_attr_mode_161_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[161].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_161_attr_mode_161_qs)
  );


  // F[ctl_161]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_161_ctl_161 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_161_ctl_161_we),
    .wd     (clicint_161_ctl_161_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[161].ctl.q ),

    // to register interface (read)
    .qs     (clicint_161_ctl_161_qs)
  );


  // Subregister 162 of Multireg clicint
  // R[clicint_162]: V(False)

  // F[ip_162]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_162_ip_162 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_162_ip_162_we),
    .wd     (clicint_162_ip_162_wd),

    // from internal hardware
    .de     (hw2reg.clicint[162].ip.de),
    .d      (hw2reg.clicint[162].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[162].ip.q ),

    // to register interface (read)
    .qs     (clicint_162_ip_162_qs)
  );


  // F[ie_162]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_162_ie_162 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_162_ie_162_we),
    .wd     (clicint_162_ie_162_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[162].ie.q ),

    // to register interface (read)
    .qs     (clicint_162_ie_162_qs)
  );


  // F[attr_shv_162]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_162_attr_shv_162 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_162_attr_shv_162_we),
    .wd     (clicint_162_attr_shv_162_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[162].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_162_attr_shv_162_qs)
  );


  // F[attr_trig_162]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_162_attr_trig_162 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_162_attr_trig_162_we),
    .wd     (clicint_162_attr_trig_162_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[162].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_162_attr_trig_162_qs)
  );


  // F[attr_mode_162]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_162_attr_mode_162 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_162_attr_mode_162_we),
    .wd     (clicint_162_attr_mode_162_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[162].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_162_attr_mode_162_qs)
  );


  // F[ctl_162]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_162_ctl_162 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_162_ctl_162_we),
    .wd     (clicint_162_ctl_162_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[162].ctl.q ),

    // to register interface (read)
    .qs     (clicint_162_ctl_162_qs)
  );


  // Subregister 163 of Multireg clicint
  // R[clicint_163]: V(False)

  // F[ip_163]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_163_ip_163 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_163_ip_163_we),
    .wd     (clicint_163_ip_163_wd),

    // from internal hardware
    .de     (hw2reg.clicint[163].ip.de),
    .d      (hw2reg.clicint[163].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[163].ip.q ),

    // to register interface (read)
    .qs     (clicint_163_ip_163_qs)
  );


  // F[ie_163]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_163_ie_163 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_163_ie_163_we),
    .wd     (clicint_163_ie_163_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[163].ie.q ),

    // to register interface (read)
    .qs     (clicint_163_ie_163_qs)
  );


  // F[attr_shv_163]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_163_attr_shv_163 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_163_attr_shv_163_we),
    .wd     (clicint_163_attr_shv_163_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[163].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_163_attr_shv_163_qs)
  );


  // F[attr_trig_163]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_163_attr_trig_163 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_163_attr_trig_163_we),
    .wd     (clicint_163_attr_trig_163_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[163].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_163_attr_trig_163_qs)
  );


  // F[attr_mode_163]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_163_attr_mode_163 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_163_attr_mode_163_we),
    .wd     (clicint_163_attr_mode_163_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[163].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_163_attr_mode_163_qs)
  );


  // F[ctl_163]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_163_ctl_163 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_163_ctl_163_we),
    .wd     (clicint_163_ctl_163_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[163].ctl.q ),

    // to register interface (read)
    .qs     (clicint_163_ctl_163_qs)
  );


  // Subregister 164 of Multireg clicint
  // R[clicint_164]: V(False)

  // F[ip_164]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_164_ip_164 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_164_ip_164_we),
    .wd     (clicint_164_ip_164_wd),

    // from internal hardware
    .de     (hw2reg.clicint[164].ip.de),
    .d      (hw2reg.clicint[164].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[164].ip.q ),

    // to register interface (read)
    .qs     (clicint_164_ip_164_qs)
  );


  // F[ie_164]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_164_ie_164 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_164_ie_164_we),
    .wd     (clicint_164_ie_164_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[164].ie.q ),

    // to register interface (read)
    .qs     (clicint_164_ie_164_qs)
  );


  // F[attr_shv_164]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_164_attr_shv_164 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_164_attr_shv_164_we),
    .wd     (clicint_164_attr_shv_164_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[164].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_164_attr_shv_164_qs)
  );


  // F[attr_trig_164]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_164_attr_trig_164 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_164_attr_trig_164_we),
    .wd     (clicint_164_attr_trig_164_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[164].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_164_attr_trig_164_qs)
  );


  // F[attr_mode_164]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_164_attr_mode_164 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_164_attr_mode_164_we),
    .wd     (clicint_164_attr_mode_164_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[164].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_164_attr_mode_164_qs)
  );


  // F[ctl_164]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_164_ctl_164 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_164_ctl_164_we),
    .wd     (clicint_164_ctl_164_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[164].ctl.q ),

    // to register interface (read)
    .qs     (clicint_164_ctl_164_qs)
  );


  // Subregister 165 of Multireg clicint
  // R[clicint_165]: V(False)

  // F[ip_165]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_165_ip_165 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_165_ip_165_we),
    .wd     (clicint_165_ip_165_wd),

    // from internal hardware
    .de     (hw2reg.clicint[165].ip.de),
    .d      (hw2reg.clicint[165].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[165].ip.q ),

    // to register interface (read)
    .qs     (clicint_165_ip_165_qs)
  );


  // F[ie_165]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_165_ie_165 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_165_ie_165_we),
    .wd     (clicint_165_ie_165_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[165].ie.q ),

    // to register interface (read)
    .qs     (clicint_165_ie_165_qs)
  );


  // F[attr_shv_165]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_165_attr_shv_165 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_165_attr_shv_165_we),
    .wd     (clicint_165_attr_shv_165_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[165].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_165_attr_shv_165_qs)
  );


  // F[attr_trig_165]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_165_attr_trig_165 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_165_attr_trig_165_we),
    .wd     (clicint_165_attr_trig_165_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[165].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_165_attr_trig_165_qs)
  );


  // F[attr_mode_165]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_165_attr_mode_165 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_165_attr_mode_165_we),
    .wd     (clicint_165_attr_mode_165_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[165].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_165_attr_mode_165_qs)
  );


  // F[ctl_165]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_165_ctl_165 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_165_ctl_165_we),
    .wd     (clicint_165_ctl_165_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[165].ctl.q ),

    // to register interface (read)
    .qs     (clicint_165_ctl_165_qs)
  );


  // Subregister 166 of Multireg clicint
  // R[clicint_166]: V(False)

  // F[ip_166]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_166_ip_166 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_166_ip_166_we),
    .wd     (clicint_166_ip_166_wd),

    // from internal hardware
    .de     (hw2reg.clicint[166].ip.de),
    .d      (hw2reg.clicint[166].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[166].ip.q ),

    // to register interface (read)
    .qs     (clicint_166_ip_166_qs)
  );


  // F[ie_166]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_166_ie_166 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_166_ie_166_we),
    .wd     (clicint_166_ie_166_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[166].ie.q ),

    // to register interface (read)
    .qs     (clicint_166_ie_166_qs)
  );


  // F[attr_shv_166]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_166_attr_shv_166 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_166_attr_shv_166_we),
    .wd     (clicint_166_attr_shv_166_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[166].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_166_attr_shv_166_qs)
  );


  // F[attr_trig_166]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_166_attr_trig_166 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_166_attr_trig_166_we),
    .wd     (clicint_166_attr_trig_166_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[166].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_166_attr_trig_166_qs)
  );


  // F[attr_mode_166]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_166_attr_mode_166 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_166_attr_mode_166_we),
    .wd     (clicint_166_attr_mode_166_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[166].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_166_attr_mode_166_qs)
  );


  // F[ctl_166]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_166_ctl_166 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_166_ctl_166_we),
    .wd     (clicint_166_ctl_166_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[166].ctl.q ),

    // to register interface (read)
    .qs     (clicint_166_ctl_166_qs)
  );


  // Subregister 167 of Multireg clicint
  // R[clicint_167]: V(False)

  // F[ip_167]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_167_ip_167 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_167_ip_167_we),
    .wd     (clicint_167_ip_167_wd),

    // from internal hardware
    .de     (hw2reg.clicint[167].ip.de),
    .d      (hw2reg.clicint[167].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[167].ip.q ),

    // to register interface (read)
    .qs     (clicint_167_ip_167_qs)
  );


  // F[ie_167]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_167_ie_167 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_167_ie_167_we),
    .wd     (clicint_167_ie_167_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[167].ie.q ),

    // to register interface (read)
    .qs     (clicint_167_ie_167_qs)
  );


  // F[attr_shv_167]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_167_attr_shv_167 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_167_attr_shv_167_we),
    .wd     (clicint_167_attr_shv_167_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[167].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_167_attr_shv_167_qs)
  );


  // F[attr_trig_167]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_167_attr_trig_167 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_167_attr_trig_167_we),
    .wd     (clicint_167_attr_trig_167_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[167].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_167_attr_trig_167_qs)
  );


  // F[attr_mode_167]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_167_attr_mode_167 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_167_attr_mode_167_we),
    .wd     (clicint_167_attr_mode_167_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[167].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_167_attr_mode_167_qs)
  );


  // F[ctl_167]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_167_ctl_167 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_167_ctl_167_we),
    .wd     (clicint_167_ctl_167_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[167].ctl.q ),

    // to register interface (read)
    .qs     (clicint_167_ctl_167_qs)
  );


  // Subregister 168 of Multireg clicint
  // R[clicint_168]: V(False)

  // F[ip_168]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_168_ip_168 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_168_ip_168_we),
    .wd     (clicint_168_ip_168_wd),

    // from internal hardware
    .de     (hw2reg.clicint[168].ip.de),
    .d      (hw2reg.clicint[168].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[168].ip.q ),

    // to register interface (read)
    .qs     (clicint_168_ip_168_qs)
  );


  // F[ie_168]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_168_ie_168 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_168_ie_168_we),
    .wd     (clicint_168_ie_168_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[168].ie.q ),

    // to register interface (read)
    .qs     (clicint_168_ie_168_qs)
  );


  // F[attr_shv_168]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_168_attr_shv_168 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_168_attr_shv_168_we),
    .wd     (clicint_168_attr_shv_168_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[168].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_168_attr_shv_168_qs)
  );


  // F[attr_trig_168]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_168_attr_trig_168 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_168_attr_trig_168_we),
    .wd     (clicint_168_attr_trig_168_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[168].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_168_attr_trig_168_qs)
  );


  // F[attr_mode_168]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_168_attr_mode_168 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_168_attr_mode_168_we),
    .wd     (clicint_168_attr_mode_168_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[168].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_168_attr_mode_168_qs)
  );


  // F[ctl_168]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_168_ctl_168 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_168_ctl_168_we),
    .wd     (clicint_168_ctl_168_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[168].ctl.q ),

    // to register interface (read)
    .qs     (clicint_168_ctl_168_qs)
  );


  // Subregister 169 of Multireg clicint
  // R[clicint_169]: V(False)

  // F[ip_169]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_169_ip_169 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_169_ip_169_we),
    .wd     (clicint_169_ip_169_wd),

    // from internal hardware
    .de     (hw2reg.clicint[169].ip.de),
    .d      (hw2reg.clicint[169].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[169].ip.q ),

    // to register interface (read)
    .qs     (clicint_169_ip_169_qs)
  );


  // F[ie_169]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_169_ie_169 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_169_ie_169_we),
    .wd     (clicint_169_ie_169_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[169].ie.q ),

    // to register interface (read)
    .qs     (clicint_169_ie_169_qs)
  );


  // F[attr_shv_169]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_169_attr_shv_169 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_169_attr_shv_169_we),
    .wd     (clicint_169_attr_shv_169_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[169].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_169_attr_shv_169_qs)
  );


  // F[attr_trig_169]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_169_attr_trig_169 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_169_attr_trig_169_we),
    .wd     (clicint_169_attr_trig_169_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[169].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_169_attr_trig_169_qs)
  );


  // F[attr_mode_169]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_169_attr_mode_169 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_169_attr_mode_169_we),
    .wd     (clicint_169_attr_mode_169_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[169].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_169_attr_mode_169_qs)
  );


  // F[ctl_169]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_169_ctl_169 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_169_ctl_169_we),
    .wd     (clicint_169_ctl_169_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[169].ctl.q ),

    // to register interface (read)
    .qs     (clicint_169_ctl_169_qs)
  );


  // Subregister 170 of Multireg clicint
  // R[clicint_170]: V(False)

  // F[ip_170]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_170_ip_170 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_170_ip_170_we),
    .wd     (clicint_170_ip_170_wd),

    // from internal hardware
    .de     (hw2reg.clicint[170].ip.de),
    .d      (hw2reg.clicint[170].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[170].ip.q ),

    // to register interface (read)
    .qs     (clicint_170_ip_170_qs)
  );


  // F[ie_170]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_170_ie_170 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_170_ie_170_we),
    .wd     (clicint_170_ie_170_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[170].ie.q ),

    // to register interface (read)
    .qs     (clicint_170_ie_170_qs)
  );


  // F[attr_shv_170]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_170_attr_shv_170 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_170_attr_shv_170_we),
    .wd     (clicint_170_attr_shv_170_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[170].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_170_attr_shv_170_qs)
  );


  // F[attr_trig_170]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_170_attr_trig_170 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_170_attr_trig_170_we),
    .wd     (clicint_170_attr_trig_170_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[170].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_170_attr_trig_170_qs)
  );


  // F[attr_mode_170]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_170_attr_mode_170 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_170_attr_mode_170_we),
    .wd     (clicint_170_attr_mode_170_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[170].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_170_attr_mode_170_qs)
  );


  // F[ctl_170]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_170_ctl_170 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_170_ctl_170_we),
    .wd     (clicint_170_ctl_170_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[170].ctl.q ),

    // to register interface (read)
    .qs     (clicint_170_ctl_170_qs)
  );


  // Subregister 171 of Multireg clicint
  // R[clicint_171]: V(False)

  // F[ip_171]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_171_ip_171 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_171_ip_171_we),
    .wd     (clicint_171_ip_171_wd),

    // from internal hardware
    .de     (hw2reg.clicint[171].ip.de),
    .d      (hw2reg.clicint[171].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[171].ip.q ),

    // to register interface (read)
    .qs     (clicint_171_ip_171_qs)
  );


  // F[ie_171]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_171_ie_171 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_171_ie_171_we),
    .wd     (clicint_171_ie_171_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[171].ie.q ),

    // to register interface (read)
    .qs     (clicint_171_ie_171_qs)
  );


  // F[attr_shv_171]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_171_attr_shv_171 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_171_attr_shv_171_we),
    .wd     (clicint_171_attr_shv_171_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[171].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_171_attr_shv_171_qs)
  );


  // F[attr_trig_171]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_171_attr_trig_171 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_171_attr_trig_171_we),
    .wd     (clicint_171_attr_trig_171_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[171].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_171_attr_trig_171_qs)
  );


  // F[attr_mode_171]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_171_attr_mode_171 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_171_attr_mode_171_we),
    .wd     (clicint_171_attr_mode_171_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[171].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_171_attr_mode_171_qs)
  );


  // F[ctl_171]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_171_ctl_171 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_171_ctl_171_we),
    .wd     (clicint_171_ctl_171_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[171].ctl.q ),

    // to register interface (read)
    .qs     (clicint_171_ctl_171_qs)
  );


  // Subregister 172 of Multireg clicint
  // R[clicint_172]: V(False)

  // F[ip_172]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_172_ip_172 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_172_ip_172_we),
    .wd     (clicint_172_ip_172_wd),

    // from internal hardware
    .de     (hw2reg.clicint[172].ip.de),
    .d      (hw2reg.clicint[172].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[172].ip.q ),

    // to register interface (read)
    .qs     (clicint_172_ip_172_qs)
  );


  // F[ie_172]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_172_ie_172 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_172_ie_172_we),
    .wd     (clicint_172_ie_172_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[172].ie.q ),

    // to register interface (read)
    .qs     (clicint_172_ie_172_qs)
  );


  // F[attr_shv_172]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_172_attr_shv_172 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_172_attr_shv_172_we),
    .wd     (clicint_172_attr_shv_172_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[172].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_172_attr_shv_172_qs)
  );


  // F[attr_trig_172]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_172_attr_trig_172 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_172_attr_trig_172_we),
    .wd     (clicint_172_attr_trig_172_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[172].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_172_attr_trig_172_qs)
  );


  // F[attr_mode_172]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_172_attr_mode_172 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_172_attr_mode_172_we),
    .wd     (clicint_172_attr_mode_172_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[172].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_172_attr_mode_172_qs)
  );


  // F[ctl_172]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_172_ctl_172 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_172_ctl_172_we),
    .wd     (clicint_172_ctl_172_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[172].ctl.q ),

    // to register interface (read)
    .qs     (clicint_172_ctl_172_qs)
  );


  // Subregister 173 of Multireg clicint
  // R[clicint_173]: V(False)

  // F[ip_173]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_173_ip_173 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_173_ip_173_we),
    .wd     (clicint_173_ip_173_wd),

    // from internal hardware
    .de     (hw2reg.clicint[173].ip.de),
    .d      (hw2reg.clicint[173].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[173].ip.q ),

    // to register interface (read)
    .qs     (clicint_173_ip_173_qs)
  );


  // F[ie_173]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_173_ie_173 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_173_ie_173_we),
    .wd     (clicint_173_ie_173_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[173].ie.q ),

    // to register interface (read)
    .qs     (clicint_173_ie_173_qs)
  );


  // F[attr_shv_173]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_173_attr_shv_173 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_173_attr_shv_173_we),
    .wd     (clicint_173_attr_shv_173_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[173].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_173_attr_shv_173_qs)
  );


  // F[attr_trig_173]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_173_attr_trig_173 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_173_attr_trig_173_we),
    .wd     (clicint_173_attr_trig_173_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[173].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_173_attr_trig_173_qs)
  );


  // F[attr_mode_173]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_173_attr_mode_173 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_173_attr_mode_173_we),
    .wd     (clicint_173_attr_mode_173_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[173].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_173_attr_mode_173_qs)
  );


  // F[ctl_173]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_173_ctl_173 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_173_ctl_173_we),
    .wd     (clicint_173_ctl_173_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[173].ctl.q ),

    // to register interface (read)
    .qs     (clicint_173_ctl_173_qs)
  );


  // Subregister 174 of Multireg clicint
  // R[clicint_174]: V(False)

  // F[ip_174]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_174_ip_174 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_174_ip_174_we),
    .wd     (clicint_174_ip_174_wd),

    // from internal hardware
    .de     (hw2reg.clicint[174].ip.de),
    .d      (hw2reg.clicint[174].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[174].ip.q ),

    // to register interface (read)
    .qs     (clicint_174_ip_174_qs)
  );


  // F[ie_174]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_174_ie_174 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_174_ie_174_we),
    .wd     (clicint_174_ie_174_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[174].ie.q ),

    // to register interface (read)
    .qs     (clicint_174_ie_174_qs)
  );


  // F[attr_shv_174]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_174_attr_shv_174 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_174_attr_shv_174_we),
    .wd     (clicint_174_attr_shv_174_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[174].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_174_attr_shv_174_qs)
  );


  // F[attr_trig_174]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_174_attr_trig_174 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_174_attr_trig_174_we),
    .wd     (clicint_174_attr_trig_174_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[174].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_174_attr_trig_174_qs)
  );


  // F[attr_mode_174]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_174_attr_mode_174 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_174_attr_mode_174_we),
    .wd     (clicint_174_attr_mode_174_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[174].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_174_attr_mode_174_qs)
  );


  // F[ctl_174]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_174_ctl_174 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_174_ctl_174_we),
    .wd     (clicint_174_ctl_174_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[174].ctl.q ),

    // to register interface (read)
    .qs     (clicint_174_ctl_174_qs)
  );


  // Subregister 175 of Multireg clicint
  // R[clicint_175]: V(False)

  // F[ip_175]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_175_ip_175 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_175_ip_175_we),
    .wd     (clicint_175_ip_175_wd),

    // from internal hardware
    .de     (hw2reg.clicint[175].ip.de),
    .d      (hw2reg.clicint[175].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[175].ip.q ),

    // to register interface (read)
    .qs     (clicint_175_ip_175_qs)
  );


  // F[ie_175]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_175_ie_175 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_175_ie_175_we),
    .wd     (clicint_175_ie_175_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[175].ie.q ),

    // to register interface (read)
    .qs     (clicint_175_ie_175_qs)
  );


  // F[attr_shv_175]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_175_attr_shv_175 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_175_attr_shv_175_we),
    .wd     (clicint_175_attr_shv_175_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[175].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_175_attr_shv_175_qs)
  );


  // F[attr_trig_175]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_175_attr_trig_175 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_175_attr_trig_175_we),
    .wd     (clicint_175_attr_trig_175_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[175].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_175_attr_trig_175_qs)
  );


  // F[attr_mode_175]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_175_attr_mode_175 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_175_attr_mode_175_we),
    .wd     (clicint_175_attr_mode_175_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[175].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_175_attr_mode_175_qs)
  );


  // F[ctl_175]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_175_ctl_175 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_175_ctl_175_we),
    .wd     (clicint_175_ctl_175_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[175].ctl.q ),

    // to register interface (read)
    .qs     (clicint_175_ctl_175_qs)
  );


  // Subregister 176 of Multireg clicint
  // R[clicint_176]: V(False)

  // F[ip_176]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_176_ip_176 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_176_ip_176_we),
    .wd     (clicint_176_ip_176_wd),

    // from internal hardware
    .de     (hw2reg.clicint[176].ip.de),
    .d      (hw2reg.clicint[176].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[176].ip.q ),

    // to register interface (read)
    .qs     (clicint_176_ip_176_qs)
  );


  // F[ie_176]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_176_ie_176 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_176_ie_176_we),
    .wd     (clicint_176_ie_176_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[176].ie.q ),

    // to register interface (read)
    .qs     (clicint_176_ie_176_qs)
  );


  // F[attr_shv_176]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_176_attr_shv_176 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_176_attr_shv_176_we),
    .wd     (clicint_176_attr_shv_176_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[176].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_176_attr_shv_176_qs)
  );


  // F[attr_trig_176]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_176_attr_trig_176 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_176_attr_trig_176_we),
    .wd     (clicint_176_attr_trig_176_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[176].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_176_attr_trig_176_qs)
  );


  // F[attr_mode_176]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_176_attr_mode_176 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_176_attr_mode_176_we),
    .wd     (clicint_176_attr_mode_176_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[176].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_176_attr_mode_176_qs)
  );


  // F[ctl_176]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_176_ctl_176 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_176_ctl_176_we),
    .wd     (clicint_176_ctl_176_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[176].ctl.q ),

    // to register interface (read)
    .qs     (clicint_176_ctl_176_qs)
  );


  // Subregister 177 of Multireg clicint
  // R[clicint_177]: V(False)

  // F[ip_177]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_177_ip_177 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_177_ip_177_we),
    .wd     (clicint_177_ip_177_wd),

    // from internal hardware
    .de     (hw2reg.clicint[177].ip.de),
    .d      (hw2reg.clicint[177].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[177].ip.q ),

    // to register interface (read)
    .qs     (clicint_177_ip_177_qs)
  );


  // F[ie_177]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_177_ie_177 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_177_ie_177_we),
    .wd     (clicint_177_ie_177_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[177].ie.q ),

    // to register interface (read)
    .qs     (clicint_177_ie_177_qs)
  );


  // F[attr_shv_177]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_177_attr_shv_177 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_177_attr_shv_177_we),
    .wd     (clicint_177_attr_shv_177_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[177].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_177_attr_shv_177_qs)
  );


  // F[attr_trig_177]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_177_attr_trig_177 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_177_attr_trig_177_we),
    .wd     (clicint_177_attr_trig_177_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[177].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_177_attr_trig_177_qs)
  );


  // F[attr_mode_177]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_177_attr_mode_177 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_177_attr_mode_177_we),
    .wd     (clicint_177_attr_mode_177_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[177].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_177_attr_mode_177_qs)
  );


  // F[ctl_177]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_177_ctl_177 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_177_ctl_177_we),
    .wd     (clicint_177_ctl_177_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[177].ctl.q ),

    // to register interface (read)
    .qs     (clicint_177_ctl_177_qs)
  );


  // Subregister 178 of Multireg clicint
  // R[clicint_178]: V(False)

  // F[ip_178]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_178_ip_178 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_178_ip_178_we),
    .wd     (clicint_178_ip_178_wd),

    // from internal hardware
    .de     (hw2reg.clicint[178].ip.de),
    .d      (hw2reg.clicint[178].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[178].ip.q ),

    // to register interface (read)
    .qs     (clicint_178_ip_178_qs)
  );


  // F[ie_178]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_178_ie_178 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_178_ie_178_we),
    .wd     (clicint_178_ie_178_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[178].ie.q ),

    // to register interface (read)
    .qs     (clicint_178_ie_178_qs)
  );


  // F[attr_shv_178]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_178_attr_shv_178 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_178_attr_shv_178_we),
    .wd     (clicint_178_attr_shv_178_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[178].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_178_attr_shv_178_qs)
  );


  // F[attr_trig_178]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_178_attr_trig_178 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_178_attr_trig_178_we),
    .wd     (clicint_178_attr_trig_178_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[178].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_178_attr_trig_178_qs)
  );


  // F[attr_mode_178]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_178_attr_mode_178 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_178_attr_mode_178_we),
    .wd     (clicint_178_attr_mode_178_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[178].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_178_attr_mode_178_qs)
  );


  // F[ctl_178]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_178_ctl_178 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_178_ctl_178_we),
    .wd     (clicint_178_ctl_178_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[178].ctl.q ),

    // to register interface (read)
    .qs     (clicint_178_ctl_178_qs)
  );


  // Subregister 179 of Multireg clicint
  // R[clicint_179]: V(False)

  // F[ip_179]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_179_ip_179 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_179_ip_179_we),
    .wd     (clicint_179_ip_179_wd),

    // from internal hardware
    .de     (hw2reg.clicint[179].ip.de),
    .d      (hw2reg.clicint[179].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[179].ip.q ),

    // to register interface (read)
    .qs     (clicint_179_ip_179_qs)
  );


  // F[ie_179]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_179_ie_179 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_179_ie_179_we),
    .wd     (clicint_179_ie_179_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[179].ie.q ),

    // to register interface (read)
    .qs     (clicint_179_ie_179_qs)
  );


  // F[attr_shv_179]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_179_attr_shv_179 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_179_attr_shv_179_we),
    .wd     (clicint_179_attr_shv_179_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[179].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_179_attr_shv_179_qs)
  );


  // F[attr_trig_179]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_179_attr_trig_179 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_179_attr_trig_179_we),
    .wd     (clicint_179_attr_trig_179_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[179].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_179_attr_trig_179_qs)
  );


  // F[attr_mode_179]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_179_attr_mode_179 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_179_attr_mode_179_we),
    .wd     (clicint_179_attr_mode_179_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[179].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_179_attr_mode_179_qs)
  );


  // F[ctl_179]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_179_ctl_179 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_179_ctl_179_we),
    .wd     (clicint_179_ctl_179_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[179].ctl.q ),

    // to register interface (read)
    .qs     (clicint_179_ctl_179_qs)
  );


  // Subregister 180 of Multireg clicint
  // R[clicint_180]: V(False)

  // F[ip_180]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_180_ip_180 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_180_ip_180_we),
    .wd     (clicint_180_ip_180_wd),

    // from internal hardware
    .de     (hw2reg.clicint[180].ip.de),
    .d      (hw2reg.clicint[180].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[180].ip.q ),

    // to register interface (read)
    .qs     (clicint_180_ip_180_qs)
  );


  // F[ie_180]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_180_ie_180 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_180_ie_180_we),
    .wd     (clicint_180_ie_180_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[180].ie.q ),

    // to register interface (read)
    .qs     (clicint_180_ie_180_qs)
  );


  // F[attr_shv_180]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_180_attr_shv_180 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_180_attr_shv_180_we),
    .wd     (clicint_180_attr_shv_180_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[180].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_180_attr_shv_180_qs)
  );


  // F[attr_trig_180]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_180_attr_trig_180 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_180_attr_trig_180_we),
    .wd     (clicint_180_attr_trig_180_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[180].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_180_attr_trig_180_qs)
  );


  // F[attr_mode_180]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_180_attr_mode_180 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_180_attr_mode_180_we),
    .wd     (clicint_180_attr_mode_180_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[180].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_180_attr_mode_180_qs)
  );


  // F[ctl_180]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_180_ctl_180 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_180_ctl_180_we),
    .wd     (clicint_180_ctl_180_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[180].ctl.q ),

    // to register interface (read)
    .qs     (clicint_180_ctl_180_qs)
  );


  // Subregister 181 of Multireg clicint
  // R[clicint_181]: V(False)

  // F[ip_181]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_181_ip_181 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_181_ip_181_we),
    .wd     (clicint_181_ip_181_wd),

    // from internal hardware
    .de     (hw2reg.clicint[181].ip.de),
    .d      (hw2reg.clicint[181].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[181].ip.q ),

    // to register interface (read)
    .qs     (clicint_181_ip_181_qs)
  );


  // F[ie_181]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_181_ie_181 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_181_ie_181_we),
    .wd     (clicint_181_ie_181_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[181].ie.q ),

    // to register interface (read)
    .qs     (clicint_181_ie_181_qs)
  );


  // F[attr_shv_181]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_181_attr_shv_181 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_181_attr_shv_181_we),
    .wd     (clicint_181_attr_shv_181_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[181].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_181_attr_shv_181_qs)
  );


  // F[attr_trig_181]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_181_attr_trig_181 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_181_attr_trig_181_we),
    .wd     (clicint_181_attr_trig_181_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[181].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_181_attr_trig_181_qs)
  );


  // F[attr_mode_181]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_181_attr_mode_181 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_181_attr_mode_181_we),
    .wd     (clicint_181_attr_mode_181_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[181].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_181_attr_mode_181_qs)
  );


  // F[ctl_181]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_181_ctl_181 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_181_ctl_181_we),
    .wd     (clicint_181_ctl_181_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[181].ctl.q ),

    // to register interface (read)
    .qs     (clicint_181_ctl_181_qs)
  );


  // Subregister 182 of Multireg clicint
  // R[clicint_182]: V(False)

  // F[ip_182]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_182_ip_182 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_182_ip_182_we),
    .wd     (clicint_182_ip_182_wd),

    // from internal hardware
    .de     (hw2reg.clicint[182].ip.de),
    .d      (hw2reg.clicint[182].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[182].ip.q ),

    // to register interface (read)
    .qs     (clicint_182_ip_182_qs)
  );


  // F[ie_182]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_182_ie_182 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_182_ie_182_we),
    .wd     (clicint_182_ie_182_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[182].ie.q ),

    // to register interface (read)
    .qs     (clicint_182_ie_182_qs)
  );


  // F[attr_shv_182]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_182_attr_shv_182 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_182_attr_shv_182_we),
    .wd     (clicint_182_attr_shv_182_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[182].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_182_attr_shv_182_qs)
  );


  // F[attr_trig_182]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_182_attr_trig_182 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_182_attr_trig_182_we),
    .wd     (clicint_182_attr_trig_182_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[182].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_182_attr_trig_182_qs)
  );


  // F[attr_mode_182]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_182_attr_mode_182 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_182_attr_mode_182_we),
    .wd     (clicint_182_attr_mode_182_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[182].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_182_attr_mode_182_qs)
  );


  // F[ctl_182]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_182_ctl_182 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_182_ctl_182_we),
    .wd     (clicint_182_ctl_182_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[182].ctl.q ),

    // to register interface (read)
    .qs     (clicint_182_ctl_182_qs)
  );


  // Subregister 183 of Multireg clicint
  // R[clicint_183]: V(False)

  // F[ip_183]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_183_ip_183 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_183_ip_183_we),
    .wd     (clicint_183_ip_183_wd),

    // from internal hardware
    .de     (hw2reg.clicint[183].ip.de),
    .d      (hw2reg.clicint[183].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[183].ip.q ),

    // to register interface (read)
    .qs     (clicint_183_ip_183_qs)
  );


  // F[ie_183]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_183_ie_183 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_183_ie_183_we),
    .wd     (clicint_183_ie_183_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[183].ie.q ),

    // to register interface (read)
    .qs     (clicint_183_ie_183_qs)
  );


  // F[attr_shv_183]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_183_attr_shv_183 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_183_attr_shv_183_we),
    .wd     (clicint_183_attr_shv_183_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[183].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_183_attr_shv_183_qs)
  );


  // F[attr_trig_183]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_183_attr_trig_183 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_183_attr_trig_183_we),
    .wd     (clicint_183_attr_trig_183_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[183].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_183_attr_trig_183_qs)
  );


  // F[attr_mode_183]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_183_attr_mode_183 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_183_attr_mode_183_we),
    .wd     (clicint_183_attr_mode_183_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[183].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_183_attr_mode_183_qs)
  );


  // F[ctl_183]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_183_ctl_183 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_183_ctl_183_we),
    .wd     (clicint_183_ctl_183_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[183].ctl.q ),

    // to register interface (read)
    .qs     (clicint_183_ctl_183_qs)
  );


  // Subregister 184 of Multireg clicint
  // R[clicint_184]: V(False)

  // F[ip_184]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_184_ip_184 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_184_ip_184_we),
    .wd     (clicint_184_ip_184_wd),

    // from internal hardware
    .de     (hw2reg.clicint[184].ip.de),
    .d      (hw2reg.clicint[184].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[184].ip.q ),

    // to register interface (read)
    .qs     (clicint_184_ip_184_qs)
  );


  // F[ie_184]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_184_ie_184 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_184_ie_184_we),
    .wd     (clicint_184_ie_184_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[184].ie.q ),

    // to register interface (read)
    .qs     (clicint_184_ie_184_qs)
  );


  // F[attr_shv_184]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_184_attr_shv_184 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_184_attr_shv_184_we),
    .wd     (clicint_184_attr_shv_184_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[184].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_184_attr_shv_184_qs)
  );


  // F[attr_trig_184]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_184_attr_trig_184 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_184_attr_trig_184_we),
    .wd     (clicint_184_attr_trig_184_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[184].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_184_attr_trig_184_qs)
  );


  // F[attr_mode_184]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_184_attr_mode_184 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_184_attr_mode_184_we),
    .wd     (clicint_184_attr_mode_184_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[184].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_184_attr_mode_184_qs)
  );


  // F[ctl_184]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_184_ctl_184 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_184_ctl_184_we),
    .wd     (clicint_184_ctl_184_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[184].ctl.q ),

    // to register interface (read)
    .qs     (clicint_184_ctl_184_qs)
  );


  // Subregister 185 of Multireg clicint
  // R[clicint_185]: V(False)

  // F[ip_185]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_185_ip_185 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_185_ip_185_we),
    .wd     (clicint_185_ip_185_wd),

    // from internal hardware
    .de     (hw2reg.clicint[185].ip.de),
    .d      (hw2reg.clicint[185].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[185].ip.q ),

    // to register interface (read)
    .qs     (clicint_185_ip_185_qs)
  );


  // F[ie_185]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_185_ie_185 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_185_ie_185_we),
    .wd     (clicint_185_ie_185_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[185].ie.q ),

    // to register interface (read)
    .qs     (clicint_185_ie_185_qs)
  );


  // F[attr_shv_185]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_185_attr_shv_185 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_185_attr_shv_185_we),
    .wd     (clicint_185_attr_shv_185_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[185].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_185_attr_shv_185_qs)
  );


  // F[attr_trig_185]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_185_attr_trig_185 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_185_attr_trig_185_we),
    .wd     (clicint_185_attr_trig_185_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[185].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_185_attr_trig_185_qs)
  );


  // F[attr_mode_185]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_185_attr_mode_185 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_185_attr_mode_185_we),
    .wd     (clicint_185_attr_mode_185_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[185].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_185_attr_mode_185_qs)
  );


  // F[ctl_185]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_185_ctl_185 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_185_ctl_185_we),
    .wd     (clicint_185_ctl_185_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[185].ctl.q ),

    // to register interface (read)
    .qs     (clicint_185_ctl_185_qs)
  );


  // Subregister 186 of Multireg clicint
  // R[clicint_186]: V(False)

  // F[ip_186]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_186_ip_186 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_186_ip_186_we),
    .wd     (clicint_186_ip_186_wd),

    // from internal hardware
    .de     (hw2reg.clicint[186].ip.de),
    .d      (hw2reg.clicint[186].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[186].ip.q ),

    // to register interface (read)
    .qs     (clicint_186_ip_186_qs)
  );


  // F[ie_186]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_186_ie_186 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_186_ie_186_we),
    .wd     (clicint_186_ie_186_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[186].ie.q ),

    // to register interface (read)
    .qs     (clicint_186_ie_186_qs)
  );


  // F[attr_shv_186]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_186_attr_shv_186 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_186_attr_shv_186_we),
    .wd     (clicint_186_attr_shv_186_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[186].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_186_attr_shv_186_qs)
  );


  // F[attr_trig_186]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_186_attr_trig_186 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_186_attr_trig_186_we),
    .wd     (clicint_186_attr_trig_186_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[186].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_186_attr_trig_186_qs)
  );


  // F[attr_mode_186]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_186_attr_mode_186 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_186_attr_mode_186_we),
    .wd     (clicint_186_attr_mode_186_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[186].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_186_attr_mode_186_qs)
  );


  // F[ctl_186]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_186_ctl_186 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_186_ctl_186_we),
    .wd     (clicint_186_ctl_186_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[186].ctl.q ),

    // to register interface (read)
    .qs     (clicint_186_ctl_186_qs)
  );


  // Subregister 187 of Multireg clicint
  // R[clicint_187]: V(False)

  // F[ip_187]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_187_ip_187 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_187_ip_187_we),
    .wd     (clicint_187_ip_187_wd),

    // from internal hardware
    .de     (hw2reg.clicint[187].ip.de),
    .d      (hw2reg.clicint[187].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[187].ip.q ),

    // to register interface (read)
    .qs     (clicint_187_ip_187_qs)
  );


  // F[ie_187]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_187_ie_187 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_187_ie_187_we),
    .wd     (clicint_187_ie_187_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[187].ie.q ),

    // to register interface (read)
    .qs     (clicint_187_ie_187_qs)
  );


  // F[attr_shv_187]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_187_attr_shv_187 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_187_attr_shv_187_we),
    .wd     (clicint_187_attr_shv_187_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[187].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_187_attr_shv_187_qs)
  );


  // F[attr_trig_187]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_187_attr_trig_187 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_187_attr_trig_187_we),
    .wd     (clicint_187_attr_trig_187_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[187].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_187_attr_trig_187_qs)
  );


  // F[attr_mode_187]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_187_attr_mode_187 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_187_attr_mode_187_we),
    .wd     (clicint_187_attr_mode_187_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[187].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_187_attr_mode_187_qs)
  );


  // F[ctl_187]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_187_ctl_187 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_187_ctl_187_we),
    .wd     (clicint_187_ctl_187_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[187].ctl.q ),

    // to register interface (read)
    .qs     (clicint_187_ctl_187_qs)
  );


  // Subregister 188 of Multireg clicint
  // R[clicint_188]: V(False)

  // F[ip_188]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_188_ip_188 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_188_ip_188_we),
    .wd     (clicint_188_ip_188_wd),

    // from internal hardware
    .de     (hw2reg.clicint[188].ip.de),
    .d      (hw2reg.clicint[188].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[188].ip.q ),

    // to register interface (read)
    .qs     (clicint_188_ip_188_qs)
  );


  // F[ie_188]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_188_ie_188 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_188_ie_188_we),
    .wd     (clicint_188_ie_188_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[188].ie.q ),

    // to register interface (read)
    .qs     (clicint_188_ie_188_qs)
  );


  // F[attr_shv_188]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_188_attr_shv_188 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_188_attr_shv_188_we),
    .wd     (clicint_188_attr_shv_188_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[188].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_188_attr_shv_188_qs)
  );


  // F[attr_trig_188]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_188_attr_trig_188 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_188_attr_trig_188_we),
    .wd     (clicint_188_attr_trig_188_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[188].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_188_attr_trig_188_qs)
  );


  // F[attr_mode_188]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_188_attr_mode_188 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_188_attr_mode_188_we),
    .wd     (clicint_188_attr_mode_188_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[188].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_188_attr_mode_188_qs)
  );


  // F[ctl_188]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_188_ctl_188 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_188_ctl_188_we),
    .wd     (clicint_188_ctl_188_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[188].ctl.q ),

    // to register interface (read)
    .qs     (clicint_188_ctl_188_qs)
  );


  // Subregister 189 of Multireg clicint
  // R[clicint_189]: V(False)

  // F[ip_189]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_189_ip_189 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_189_ip_189_we),
    .wd     (clicint_189_ip_189_wd),

    // from internal hardware
    .de     (hw2reg.clicint[189].ip.de),
    .d      (hw2reg.clicint[189].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[189].ip.q ),

    // to register interface (read)
    .qs     (clicint_189_ip_189_qs)
  );


  // F[ie_189]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_189_ie_189 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_189_ie_189_we),
    .wd     (clicint_189_ie_189_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[189].ie.q ),

    // to register interface (read)
    .qs     (clicint_189_ie_189_qs)
  );


  // F[attr_shv_189]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_189_attr_shv_189 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_189_attr_shv_189_we),
    .wd     (clicint_189_attr_shv_189_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[189].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_189_attr_shv_189_qs)
  );


  // F[attr_trig_189]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_189_attr_trig_189 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_189_attr_trig_189_we),
    .wd     (clicint_189_attr_trig_189_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[189].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_189_attr_trig_189_qs)
  );


  // F[attr_mode_189]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_189_attr_mode_189 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_189_attr_mode_189_we),
    .wd     (clicint_189_attr_mode_189_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[189].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_189_attr_mode_189_qs)
  );


  // F[ctl_189]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_189_ctl_189 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_189_ctl_189_we),
    .wd     (clicint_189_ctl_189_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[189].ctl.q ),

    // to register interface (read)
    .qs     (clicint_189_ctl_189_qs)
  );


  // Subregister 190 of Multireg clicint
  // R[clicint_190]: V(False)

  // F[ip_190]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_190_ip_190 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_190_ip_190_we),
    .wd     (clicint_190_ip_190_wd),

    // from internal hardware
    .de     (hw2reg.clicint[190].ip.de),
    .d      (hw2reg.clicint[190].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[190].ip.q ),

    // to register interface (read)
    .qs     (clicint_190_ip_190_qs)
  );


  // F[ie_190]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_190_ie_190 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_190_ie_190_we),
    .wd     (clicint_190_ie_190_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[190].ie.q ),

    // to register interface (read)
    .qs     (clicint_190_ie_190_qs)
  );


  // F[attr_shv_190]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_190_attr_shv_190 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_190_attr_shv_190_we),
    .wd     (clicint_190_attr_shv_190_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[190].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_190_attr_shv_190_qs)
  );


  // F[attr_trig_190]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_190_attr_trig_190 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_190_attr_trig_190_we),
    .wd     (clicint_190_attr_trig_190_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[190].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_190_attr_trig_190_qs)
  );


  // F[attr_mode_190]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_190_attr_mode_190 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_190_attr_mode_190_we),
    .wd     (clicint_190_attr_mode_190_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[190].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_190_attr_mode_190_qs)
  );


  // F[ctl_190]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_190_ctl_190 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_190_ctl_190_we),
    .wd     (clicint_190_ctl_190_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[190].ctl.q ),

    // to register interface (read)
    .qs     (clicint_190_ctl_190_qs)
  );


  // Subregister 191 of Multireg clicint
  // R[clicint_191]: V(False)

  // F[ip_191]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_191_ip_191 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_191_ip_191_we),
    .wd     (clicint_191_ip_191_wd),

    // from internal hardware
    .de     (hw2reg.clicint[191].ip.de),
    .d      (hw2reg.clicint[191].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[191].ip.q ),

    // to register interface (read)
    .qs     (clicint_191_ip_191_qs)
  );


  // F[ie_191]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_191_ie_191 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_191_ie_191_we),
    .wd     (clicint_191_ie_191_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[191].ie.q ),

    // to register interface (read)
    .qs     (clicint_191_ie_191_qs)
  );


  // F[attr_shv_191]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_191_attr_shv_191 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_191_attr_shv_191_we),
    .wd     (clicint_191_attr_shv_191_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[191].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_191_attr_shv_191_qs)
  );


  // F[attr_trig_191]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_191_attr_trig_191 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_191_attr_trig_191_we),
    .wd     (clicint_191_attr_trig_191_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[191].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_191_attr_trig_191_qs)
  );


  // F[attr_mode_191]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_191_attr_mode_191 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_191_attr_mode_191_we),
    .wd     (clicint_191_attr_mode_191_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[191].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_191_attr_mode_191_qs)
  );


  // F[ctl_191]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_191_ctl_191 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_191_ctl_191_we),
    .wd     (clicint_191_ctl_191_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[191].ctl.q ),

    // to register interface (read)
    .qs     (clicint_191_ctl_191_qs)
  );


  // Subregister 192 of Multireg clicint
  // R[clicint_192]: V(False)

  // F[ip_192]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_192_ip_192 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_192_ip_192_we),
    .wd     (clicint_192_ip_192_wd),

    // from internal hardware
    .de     (hw2reg.clicint[192].ip.de),
    .d      (hw2reg.clicint[192].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[192].ip.q ),

    // to register interface (read)
    .qs     (clicint_192_ip_192_qs)
  );


  // F[ie_192]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_192_ie_192 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_192_ie_192_we),
    .wd     (clicint_192_ie_192_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[192].ie.q ),

    // to register interface (read)
    .qs     (clicint_192_ie_192_qs)
  );


  // F[attr_shv_192]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_192_attr_shv_192 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_192_attr_shv_192_we),
    .wd     (clicint_192_attr_shv_192_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[192].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_192_attr_shv_192_qs)
  );


  // F[attr_trig_192]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_192_attr_trig_192 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_192_attr_trig_192_we),
    .wd     (clicint_192_attr_trig_192_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[192].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_192_attr_trig_192_qs)
  );


  // F[attr_mode_192]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_192_attr_mode_192 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_192_attr_mode_192_we),
    .wd     (clicint_192_attr_mode_192_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[192].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_192_attr_mode_192_qs)
  );


  // F[ctl_192]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_192_ctl_192 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_192_ctl_192_we),
    .wd     (clicint_192_ctl_192_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[192].ctl.q ),

    // to register interface (read)
    .qs     (clicint_192_ctl_192_qs)
  );


  // Subregister 193 of Multireg clicint
  // R[clicint_193]: V(False)

  // F[ip_193]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_193_ip_193 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_193_ip_193_we),
    .wd     (clicint_193_ip_193_wd),

    // from internal hardware
    .de     (hw2reg.clicint[193].ip.de),
    .d      (hw2reg.clicint[193].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[193].ip.q ),

    // to register interface (read)
    .qs     (clicint_193_ip_193_qs)
  );


  // F[ie_193]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_193_ie_193 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_193_ie_193_we),
    .wd     (clicint_193_ie_193_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[193].ie.q ),

    // to register interface (read)
    .qs     (clicint_193_ie_193_qs)
  );


  // F[attr_shv_193]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_193_attr_shv_193 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_193_attr_shv_193_we),
    .wd     (clicint_193_attr_shv_193_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[193].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_193_attr_shv_193_qs)
  );


  // F[attr_trig_193]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_193_attr_trig_193 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_193_attr_trig_193_we),
    .wd     (clicint_193_attr_trig_193_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[193].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_193_attr_trig_193_qs)
  );


  // F[attr_mode_193]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_193_attr_mode_193 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_193_attr_mode_193_we),
    .wd     (clicint_193_attr_mode_193_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[193].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_193_attr_mode_193_qs)
  );


  // F[ctl_193]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_193_ctl_193 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_193_ctl_193_we),
    .wd     (clicint_193_ctl_193_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[193].ctl.q ),

    // to register interface (read)
    .qs     (clicint_193_ctl_193_qs)
  );


  // Subregister 194 of Multireg clicint
  // R[clicint_194]: V(False)

  // F[ip_194]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_194_ip_194 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_194_ip_194_we),
    .wd     (clicint_194_ip_194_wd),

    // from internal hardware
    .de     (hw2reg.clicint[194].ip.de),
    .d      (hw2reg.clicint[194].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[194].ip.q ),

    // to register interface (read)
    .qs     (clicint_194_ip_194_qs)
  );


  // F[ie_194]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_194_ie_194 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_194_ie_194_we),
    .wd     (clicint_194_ie_194_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[194].ie.q ),

    // to register interface (read)
    .qs     (clicint_194_ie_194_qs)
  );


  // F[attr_shv_194]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_194_attr_shv_194 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_194_attr_shv_194_we),
    .wd     (clicint_194_attr_shv_194_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[194].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_194_attr_shv_194_qs)
  );


  // F[attr_trig_194]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_194_attr_trig_194 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_194_attr_trig_194_we),
    .wd     (clicint_194_attr_trig_194_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[194].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_194_attr_trig_194_qs)
  );


  // F[attr_mode_194]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_194_attr_mode_194 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_194_attr_mode_194_we),
    .wd     (clicint_194_attr_mode_194_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[194].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_194_attr_mode_194_qs)
  );


  // F[ctl_194]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_194_ctl_194 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_194_ctl_194_we),
    .wd     (clicint_194_ctl_194_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[194].ctl.q ),

    // to register interface (read)
    .qs     (clicint_194_ctl_194_qs)
  );


  // Subregister 195 of Multireg clicint
  // R[clicint_195]: V(False)

  // F[ip_195]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_195_ip_195 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_195_ip_195_we),
    .wd     (clicint_195_ip_195_wd),

    // from internal hardware
    .de     (hw2reg.clicint[195].ip.de),
    .d      (hw2reg.clicint[195].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[195].ip.q ),

    // to register interface (read)
    .qs     (clicint_195_ip_195_qs)
  );


  // F[ie_195]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_195_ie_195 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_195_ie_195_we),
    .wd     (clicint_195_ie_195_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[195].ie.q ),

    // to register interface (read)
    .qs     (clicint_195_ie_195_qs)
  );


  // F[attr_shv_195]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_195_attr_shv_195 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_195_attr_shv_195_we),
    .wd     (clicint_195_attr_shv_195_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[195].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_195_attr_shv_195_qs)
  );


  // F[attr_trig_195]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_195_attr_trig_195 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_195_attr_trig_195_we),
    .wd     (clicint_195_attr_trig_195_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[195].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_195_attr_trig_195_qs)
  );


  // F[attr_mode_195]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_195_attr_mode_195 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_195_attr_mode_195_we),
    .wd     (clicint_195_attr_mode_195_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[195].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_195_attr_mode_195_qs)
  );


  // F[ctl_195]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_195_ctl_195 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_195_ctl_195_we),
    .wd     (clicint_195_ctl_195_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[195].ctl.q ),

    // to register interface (read)
    .qs     (clicint_195_ctl_195_qs)
  );


  // Subregister 196 of Multireg clicint
  // R[clicint_196]: V(False)

  // F[ip_196]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_196_ip_196 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_196_ip_196_we),
    .wd     (clicint_196_ip_196_wd),

    // from internal hardware
    .de     (hw2reg.clicint[196].ip.de),
    .d      (hw2reg.clicint[196].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[196].ip.q ),

    // to register interface (read)
    .qs     (clicint_196_ip_196_qs)
  );


  // F[ie_196]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_196_ie_196 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_196_ie_196_we),
    .wd     (clicint_196_ie_196_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[196].ie.q ),

    // to register interface (read)
    .qs     (clicint_196_ie_196_qs)
  );


  // F[attr_shv_196]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_196_attr_shv_196 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_196_attr_shv_196_we),
    .wd     (clicint_196_attr_shv_196_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[196].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_196_attr_shv_196_qs)
  );


  // F[attr_trig_196]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_196_attr_trig_196 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_196_attr_trig_196_we),
    .wd     (clicint_196_attr_trig_196_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[196].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_196_attr_trig_196_qs)
  );


  // F[attr_mode_196]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_196_attr_mode_196 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_196_attr_mode_196_we),
    .wd     (clicint_196_attr_mode_196_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[196].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_196_attr_mode_196_qs)
  );


  // F[ctl_196]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_196_ctl_196 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_196_ctl_196_we),
    .wd     (clicint_196_ctl_196_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[196].ctl.q ),

    // to register interface (read)
    .qs     (clicint_196_ctl_196_qs)
  );


  // Subregister 197 of Multireg clicint
  // R[clicint_197]: V(False)

  // F[ip_197]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_197_ip_197 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_197_ip_197_we),
    .wd     (clicint_197_ip_197_wd),

    // from internal hardware
    .de     (hw2reg.clicint[197].ip.de),
    .d      (hw2reg.clicint[197].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[197].ip.q ),

    // to register interface (read)
    .qs     (clicint_197_ip_197_qs)
  );


  // F[ie_197]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_197_ie_197 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_197_ie_197_we),
    .wd     (clicint_197_ie_197_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[197].ie.q ),

    // to register interface (read)
    .qs     (clicint_197_ie_197_qs)
  );


  // F[attr_shv_197]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_197_attr_shv_197 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_197_attr_shv_197_we),
    .wd     (clicint_197_attr_shv_197_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[197].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_197_attr_shv_197_qs)
  );


  // F[attr_trig_197]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_197_attr_trig_197 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_197_attr_trig_197_we),
    .wd     (clicint_197_attr_trig_197_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[197].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_197_attr_trig_197_qs)
  );


  // F[attr_mode_197]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_197_attr_mode_197 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_197_attr_mode_197_we),
    .wd     (clicint_197_attr_mode_197_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[197].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_197_attr_mode_197_qs)
  );


  // F[ctl_197]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_197_ctl_197 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_197_ctl_197_we),
    .wd     (clicint_197_ctl_197_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[197].ctl.q ),

    // to register interface (read)
    .qs     (clicint_197_ctl_197_qs)
  );


  // Subregister 198 of Multireg clicint
  // R[clicint_198]: V(False)

  // F[ip_198]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_198_ip_198 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_198_ip_198_we),
    .wd     (clicint_198_ip_198_wd),

    // from internal hardware
    .de     (hw2reg.clicint[198].ip.de),
    .d      (hw2reg.clicint[198].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[198].ip.q ),

    // to register interface (read)
    .qs     (clicint_198_ip_198_qs)
  );


  // F[ie_198]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_198_ie_198 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_198_ie_198_we),
    .wd     (clicint_198_ie_198_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[198].ie.q ),

    // to register interface (read)
    .qs     (clicint_198_ie_198_qs)
  );


  // F[attr_shv_198]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_198_attr_shv_198 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_198_attr_shv_198_we),
    .wd     (clicint_198_attr_shv_198_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[198].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_198_attr_shv_198_qs)
  );


  // F[attr_trig_198]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_198_attr_trig_198 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_198_attr_trig_198_we),
    .wd     (clicint_198_attr_trig_198_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[198].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_198_attr_trig_198_qs)
  );


  // F[attr_mode_198]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_198_attr_mode_198 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_198_attr_mode_198_we),
    .wd     (clicint_198_attr_mode_198_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[198].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_198_attr_mode_198_qs)
  );


  // F[ctl_198]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_198_ctl_198 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_198_ctl_198_we),
    .wd     (clicint_198_ctl_198_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[198].ctl.q ),

    // to register interface (read)
    .qs     (clicint_198_ctl_198_qs)
  );


  // Subregister 199 of Multireg clicint
  // R[clicint_199]: V(False)

  // F[ip_199]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_199_ip_199 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_199_ip_199_we),
    .wd     (clicint_199_ip_199_wd),

    // from internal hardware
    .de     (hw2reg.clicint[199].ip.de),
    .d      (hw2reg.clicint[199].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[199].ip.q ),

    // to register interface (read)
    .qs     (clicint_199_ip_199_qs)
  );


  // F[ie_199]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_199_ie_199 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_199_ie_199_we),
    .wd     (clicint_199_ie_199_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[199].ie.q ),

    // to register interface (read)
    .qs     (clicint_199_ie_199_qs)
  );


  // F[attr_shv_199]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_199_attr_shv_199 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_199_attr_shv_199_we),
    .wd     (clicint_199_attr_shv_199_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[199].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_199_attr_shv_199_qs)
  );


  // F[attr_trig_199]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_199_attr_trig_199 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_199_attr_trig_199_we),
    .wd     (clicint_199_attr_trig_199_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[199].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_199_attr_trig_199_qs)
  );


  // F[attr_mode_199]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_199_attr_mode_199 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_199_attr_mode_199_we),
    .wd     (clicint_199_attr_mode_199_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[199].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_199_attr_mode_199_qs)
  );


  // F[ctl_199]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_199_ctl_199 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_199_ctl_199_we),
    .wd     (clicint_199_ctl_199_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[199].ctl.q ),

    // to register interface (read)
    .qs     (clicint_199_ctl_199_qs)
  );


  // Subregister 200 of Multireg clicint
  // R[clicint_200]: V(False)

  // F[ip_200]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_200_ip_200 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_200_ip_200_we),
    .wd     (clicint_200_ip_200_wd),

    // from internal hardware
    .de     (hw2reg.clicint[200].ip.de),
    .d      (hw2reg.clicint[200].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[200].ip.q ),

    // to register interface (read)
    .qs     (clicint_200_ip_200_qs)
  );


  // F[ie_200]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_200_ie_200 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_200_ie_200_we),
    .wd     (clicint_200_ie_200_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[200].ie.q ),

    // to register interface (read)
    .qs     (clicint_200_ie_200_qs)
  );


  // F[attr_shv_200]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_200_attr_shv_200 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_200_attr_shv_200_we),
    .wd     (clicint_200_attr_shv_200_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[200].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_200_attr_shv_200_qs)
  );


  // F[attr_trig_200]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_200_attr_trig_200 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_200_attr_trig_200_we),
    .wd     (clicint_200_attr_trig_200_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[200].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_200_attr_trig_200_qs)
  );


  // F[attr_mode_200]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_200_attr_mode_200 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_200_attr_mode_200_we),
    .wd     (clicint_200_attr_mode_200_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[200].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_200_attr_mode_200_qs)
  );


  // F[ctl_200]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_200_ctl_200 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_200_ctl_200_we),
    .wd     (clicint_200_ctl_200_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[200].ctl.q ),

    // to register interface (read)
    .qs     (clicint_200_ctl_200_qs)
  );


  // Subregister 201 of Multireg clicint
  // R[clicint_201]: V(False)

  // F[ip_201]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_201_ip_201 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_201_ip_201_we),
    .wd     (clicint_201_ip_201_wd),

    // from internal hardware
    .de     (hw2reg.clicint[201].ip.de),
    .d      (hw2reg.clicint[201].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[201].ip.q ),

    // to register interface (read)
    .qs     (clicint_201_ip_201_qs)
  );


  // F[ie_201]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_201_ie_201 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_201_ie_201_we),
    .wd     (clicint_201_ie_201_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[201].ie.q ),

    // to register interface (read)
    .qs     (clicint_201_ie_201_qs)
  );


  // F[attr_shv_201]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_201_attr_shv_201 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_201_attr_shv_201_we),
    .wd     (clicint_201_attr_shv_201_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[201].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_201_attr_shv_201_qs)
  );


  // F[attr_trig_201]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_201_attr_trig_201 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_201_attr_trig_201_we),
    .wd     (clicint_201_attr_trig_201_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[201].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_201_attr_trig_201_qs)
  );


  // F[attr_mode_201]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_201_attr_mode_201 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_201_attr_mode_201_we),
    .wd     (clicint_201_attr_mode_201_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[201].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_201_attr_mode_201_qs)
  );


  // F[ctl_201]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_201_ctl_201 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_201_ctl_201_we),
    .wd     (clicint_201_ctl_201_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[201].ctl.q ),

    // to register interface (read)
    .qs     (clicint_201_ctl_201_qs)
  );


  // Subregister 202 of Multireg clicint
  // R[clicint_202]: V(False)

  // F[ip_202]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_202_ip_202 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_202_ip_202_we),
    .wd     (clicint_202_ip_202_wd),

    // from internal hardware
    .de     (hw2reg.clicint[202].ip.de),
    .d      (hw2reg.clicint[202].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[202].ip.q ),

    // to register interface (read)
    .qs     (clicint_202_ip_202_qs)
  );


  // F[ie_202]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_202_ie_202 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_202_ie_202_we),
    .wd     (clicint_202_ie_202_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[202].ie.q ),

    // to register interface (read)
    .qs     (clicint_202_ie_202_qs)
  );


  // F[attr_shv_202]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_202_attr_shv_202 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_202_attr_shv_202_we),
    .wd     (clicint_202_attr_shv_202_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[202].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_202_attr_shv_202_qs)
  );


  // F[attr_trig_202]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_202_attr_trig_202 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_202_attr_trig_202_we),
    .wd     (clicint_202_attr_trig_202_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[202].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_202_attr_trig_202_qs)
  );


  // F[attr_mode_202]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_202_attr_mode_202 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_202_attr_mode_202_we),
    .wd     (clicint_202_attr_mode_202_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[202].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_202_attr_mode_202_qs)
  );


  // F[ctl_202]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_202_ctl_202 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_202_ctl_202_we),
    .wd     (clicint_202_ctl_202_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[202].ctl.q ),

    // to register interface (read)
    .qs     (clicint_202_ctl_202_qs)
  );


  // Subregister 203 of Multireg clicint
  // R[clicint_203]: V(False)

  // F[ip_203]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_203_ip_203 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_203_ip_203_we),
    .wd     (clicint_203_ip_203_wd),

    // from internal hardware
    .de     (hw2reg.clicint[203].ip.de),
    .d      (hw2reg.clicint[203].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[203].ip.q ),

    // to register interface (read)
    .qs     (clicint_203_ip_203_qs)
  );


  // F[ie_203]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_203_ie_203 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_203_ie_203_we),
    .wd     (clicint_203_ie_203_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[203].ie.q ),

    // to register interface (read)
    .qs     (clicint_203_ie_203_qs)
  );


  // F[attr_shv_203]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_203_attr_shv_203 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_203_attr_shv_203_we),
    .wd     (clicint_203_attr_shv_203_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[203].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_203_attr_shv_203_qs)
  );


  // F[attr_trig_203]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_203_attr_trig_203 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_203_attr_trig_203_we),
    .wd     (clicint_203_attr_trig_203_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[203].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_203_attr_trig_203_qs)
  );


  // F[attr_mode_203]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_203_attr_mode_203 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_203_attr_mode_203_we),
    .wd     (clicint_203_attr_mode_203_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[203].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_203_attr_mode_203_qs)
  );


  // F[ctl_203]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_203_ctl_203 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_203_ctl_203_we),
    .wd     (clicint_203_ctl_203_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[203].ctl.q ),

    // to register interface (read)
    .qs     (clicint_203_ctl_203_qs)
  );


  // Subregister 204 of Multireg clicint
  // R[clicint_204]: V(False)

  // F[ip_204]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_204_ip_204 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_204_ip_204_we),
    .wd     (clicint_204_ip_204_wd),

    // from internal hardware
    .de     (hw2reg.clicint[204].ip.de),
    .d      (hw2reg.clicint[204].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[204].ip.q ),

    // to register interface (read)
    .qs     (clicint_204_ip_204_qs)
  );


  // F[ie_204]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_204_ie_204 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_204_ie_204_we),
    .wd     (clicint_204_ie_204_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[204].ie.q ),

    // to register interface (read)
    .qs     (clicint_204_ie_204_qs)
  );


  // F[attr_shv_204]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_204_attr_shv_204 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_204_attr_shv_204_we),
    .wd     (clicint_204_attr_shv_204_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[204].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_204_attr_shv_204_qs)
  );


  // F[attr_trig_204]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_204_attr_trig_204 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_204_attr_trig_204_we),
    .wd     (clicint_204_attr_trig_204_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[204].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_204_attr_trig_204_qs)
  );


  // F[attr_mode_204]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_204_attr_mode_204 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_204_attr_mode_204_we),
    .wd     (clicint_204_attr_mode_204_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[204].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_204_attr_mode_204_qs)
  );


  // F[ctl_204]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_204_ctl_204 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_204_ctl_204_we),
    .wd     (clicint_204_ctl_204_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[204].ctl.q ),

    // to register interface (read)
    .qs     (clicint_204_ctl_204_qs)
  );


  // Subregister 205 of Multireg clicint
  // R[clicint_205]: V(False)

  // F[ip_205]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_205_ip_205 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_205_ip_205_we),
    .wd     (clicint_205_ip_205_wd),

    // from internal hardware
    .de     (hw2reg.clicint[205].ip.de),
    .d      (hw2reg.clicint[205].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[205].ip.q ),

    // to register interface (read)
    .qs     (clicint_205_ip_205_qs)
  );


  // F[ie_205]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_205_ie_205 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_205_ie_205_we),
    .wd     (clicint_205_ie_205_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[205].ie.q ),

    // to register interface (read)
    .qs     (clicint_205_ie_205_qs)
  );


  // F[attr_shv_205]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_205_attr_shv_205 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_205_attr_shv_205_we),
    .wd     (clicint_205_attr_shv_205_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[205].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_205_attr_shv_205_qs)
  );


  // F[attr_trig_205]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_205_attr_trig_205 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_205_attr_trig_205_we),
    .wd     (clicint_205_attr_trig_205_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[205].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_205_attr_trig_205_qs)
  );


  // F[attr_mode_205]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_205_attr_mode_205 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_205_attr_mode_205_we),
    .wd     (clicint_205_attr_mode_205_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[205].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_205_attr_mode_205_qs)
  );


  // F[ctl_205]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_205_ctl_205 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_205_ctl_205_we),
    .wd     (clicint_205_ctl_205_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[205].ctl.q ),

    // to register interface (read)
    .qs     (clicint_205_ctl_205_qs)
  );


  // Subregister 206 of Multireg clicint
  // R[clicint_206]: V(False)

  // F[ip_206]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_206_ip_206 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_206_ip_206_we),
    .wd     (clicint_206_ip_206_wd),

    // from internal hardware
    .de     (hw2reg.clicint[206].ip.de),
    .d      (hw2reg.clicint[206].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[206].ip.q ),

    // to register interface (read)
    .qs     (clicint_206_ip_206_qs)
  );


  // F[ie_206]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_206_ie_206 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_206_ie_206_we),
    .wd     (clicint_206_ie_206_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[206].ie.q ),

    // to register interface (read)
    .qs     (clicint_206_ie_206_qs)
  );


  // F[attr_shv_206]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_206_attr_shv_206 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_206_attr_shv_206_we),
    .wd     (clicint_206_attr_shv_206_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[206].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_206_attr_shv_206_qs)
  );


  // F[attr_trig_206]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_206_attr_trig_206 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_206_attr_trig_206_we),
    .wd     (clicint_206_attr_trig_206_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[206].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_206_attr_trig_206_qs)
  );


  // F[attr_mode_206]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_206_attr_mode_206 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_206_attr_mode_206_we),
    .wd     (clicint_206_attr_mode_206_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[206].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_206_attr_mode_206_qs)
  );


  // F[ctl_206]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_206_ctl_206 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_206_ctl_206_we),
    .wd     (clicint_206_ctl_206_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[206].ctl.q ),

    // to register interface (read)
    .qs     (clicint_206_ctl_206_qs)
  );


  // Subregister 207 of Multireg clicint
  // R[clicint_207]: V(False)

  // F[ip_207]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_207_ip_207 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_207_ip_207_we),
    .wd     (clicint_207_ip_207_wd),

    // from internal hardware
    .de     (hw2reg.clicint[207].ip.de),
    .d      (hw2reg.clicint[207].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[207].ip.q ),

    // to register interface (read)
    .qs     (clicint_207_ip_207_qs)
  );


  // F[ie_207]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_207_ie_207 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_207_ie_207_we),
    .wd     (clicint_207_ie_207_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[207].ie.q ),

    // to register interface (read)
    .qs     (clicint_207_ie_207_qs)
  );


  // F[attr_shv_207]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_207_attr_shv_207 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_207_attr_shv_207_we),
    .wd     (clicint_207_attr_shv_207_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[207].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_207_attr_shv_207_qs)
  );


  // F[attr_trig_207]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_207_attr_trig_207 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_207_attr_trig_207_we),
    .wd     (clicint_207_attr_trig_207_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[207].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_207_attr_trig_207_qs)
  );


  // F[attr_mode_207]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_207_attr_mode_207 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_207_attr_mode_207_we),
    .wd     (clicint_207_attr_mode_207_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[207].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_207_attr_mode_207_qs)
  );


  // F[ctl_207]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_207_ctl_207 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_207_ctl_207_we),
    .wd     (clicint_207_ctl_207_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[207].ctl.q ),

    // to register interface (read)
    .qs     (clicint_207_ctl_207_qs)
  );


  // Subregister 208 of Multireg clicint
  // R[clicint_208]: V(False)

  // F[ip_208]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_208_ip_208 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_208_ip_208_we),
    .wd     (clicint_208_ip_208_wd),

    // from internal hardware
    .de     (hw2reg.clicint[208].ip.de),
    .d      (hw2reg.clicint[208].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[208].ip.q ),

    // to register interface (read)
    .qs     (clicint_208_ip_208_qs)
  );


  // F[ie_208]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_208_ie_208 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_208_ie_208_we),
    .wd     (clicint_208_ie_208_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[208].ie.q ),

    // to register interface (read)
    .qs     (clicint_208_ie_208_qs)
  );


  // F[attr_shv_208]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_208_attr_shv_208 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_208_attr_shv_208_we),
    .wd     (clicint_208_attr_shv_208_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[208].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_208_attr_shv_208_qs)
  );


  // F[attr_trig_208]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_208_attr_trig_208 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_208_attr_trig_208_we),
    .wd     (clicint_208_attr_trig_208_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[208].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_208_attr_trig_208_qs)
  );


  // F[attr_mode_208]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_208_attr_mode_208 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_208_attr_mode_208_we),
    .wd     (clicint_208_attr_mode_208_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[208].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_208_attr_mode_208_qs)
  );


  // F[ctl_208]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_208_ctl_208 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_208_ctl_208_we),
    .wd     (clicint_208_ctl_208_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[208].ctl.q ),

    // to register interface (read)
    .qs     (clicint_208_ctl_208_qs)
  );


  // Subregister 209 of Multireg clicint
  // R[clicint_209]: V(False)

  // F[ip_209]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_209_ip_209 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_209_ip_209_we),
    .wd     (clicint_209_ip_209_wd),

    // from internal hardware
    .de     (hw2reg.clicint[209].ip.de),
    .d      (hw2reg.clicint[209].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[209].ip.q ),

    // to register interface (read)
    .qs     (clicint_209_ip_209_qs)
  );


  // F[ie_209]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_209_ie_209 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_209_ie_209_we),
    .wd     (clicint_209_ie_209_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[209].ie.q ),

    // to register interface (read)
    .qs     (clicint_209_ie_209_qs)
  );


  // F[attr_shv_209]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_209_attr_shv_209 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_209_attr_shv_209_we),
    .wd     (clicint_209_attr_shv_209_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[209].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_209_attr_shv_209_qs)
  );


  // F[attr_trig_209]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_209_attr_trig_209 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_209_attr_trig_209_we),
    .wd     (clicint_209_attr_trig_209_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[209].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_209_attr_trig_209_qs)
  );


  // F[attr_mode_209]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_209_attr_mode_209 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_209_attr_mode_209_we),
    .wd     (clicint_209_attr_mode_209_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[209].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_209_attr_mode_209_qs)
  );


  // F[ctl_209]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_209_ctl_209 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_209_ctl_209_we),
    .wd     (clicint_209_ctl_209_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[209].ctl.q ),

    // to register interface (read)
    .qs     (clicint_209_ctl_209_qs)
  );


  // Subregister 210 of Multireg clicint
  // R[clicint_210]: V(False)

  // F[ip_210]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_210_ip_210 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_210_ip_210_we),
    .wd     (clicint_210_ip_210_wd),

    // from internal hardware
    .de     (hw2reg.clicint[210].ip.de),
    .d      (hw2reg.clicint[210].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[210].ip.q ),

    // to register interface (read)
    .qs     (clicint_210_ip_210_qs)
  );


  // F[ie_210]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_210_ie_210 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_210_ie_210_we),
    .wd     (clicint_210_ie_210_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[210].ie.q ),

    // to register interface (read)
    .qs     (clicint_210_ie_210_qs)
  );


  // F[attr_shv_210]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_210_attr_shv_210 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_210_attr_shv_210_we),
    .wd     (clicint_210_attr_shv_210_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[210].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_210_attr_shv_210_qs)
  );


  // F[attr_trig_210]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_210_attr_trig_210 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_210_attr_trig_210_we),
    .wd     (clicint_210_attr_trig_210_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[210].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_210_attr_trig_210_qs)
  );


  // F[attr_mode_210]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_210_attr_mode_210 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_210_attr_mode_210_we),
    .wd     (clicint_210_attr_mode_210_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[210].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_210_attr_mode_210_qs)
  );


  // F[ctl_210]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_210_ctl_210 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_210_ctl_210_we),
    .wd     (clicint_210_ctl_210_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[210].ctl.q ),

    // to register interface (read)
    .qs     (clicint_210_ctl_210_qs)
  );


  // Subregister 211 of Multireg clicint
  // R[clicint_211]: V(False)

  // F[ip_211]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_211_ip_211 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_211_ip_211_we),
    .wd     (clicint_211_ip_211_wd),

    // from internal hardware
    .de     (hw2reg.clicint[211].ip.de),
    .d      (hw2reg.clicint[211].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[211].ip.q ),

    // to register interface (read)
    .qs     (clicint_211_ip_211_qs)
  );


  // F[ie_211]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_211_ie_211 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_211_ie_211_we),
    .wd     (clicint_211_ie_211_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[211].ie.q ),

    // to register interface (read)
    .qs     (clicint_211_ie_211_qs)
  );


  // F[attr_shv_211]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_211_attr_shv_211 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_211_attr_shv_211_we),
    .wd     (clicint_211_attr_shv_211_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[211].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_211_attr_shv_211_qs)
  );


  // F[attr_trig_211]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_211_attr_trig_211 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_211_attr_trig_211_we),
    .wd     (clicint_211_attr_trig_211_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[211].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_211_attr_trig_211_qs)
  );


  // F[attr_mode_211]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_211_attr_mode_211 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_211_attr_mode_211_we),
    .wd     (clicint_211_attr_mode_211_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[211].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_211_attr_mode_211_qs)
  );


  // F[ctl_211]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_211_ctl_211 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_211_ctl_211_we),
    .wd     (clicint_211_ctl_211_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[211].ctl.q ),

    // to register interface (read)
    .qs     (clicint_211_ctl_211_qs)
  );


  // Subregister 212 of Multireg clicint
  // R[clicint_212]: V(False)

  // F[ip_212]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_212_ip_212 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_212_ip_212_we),
    .wd     (clicint_212_ip_212_wd),

    // from internal hardware
    .de     (hw2reg.clicint[212].ip.de),
    .d      (hw2reg.clicint[212].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[212].ip.q ),

    // to register interface (read)
    .qs     (clicint_212_ip_212_qs)
  );


  // F[ie_212]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_212_ie_212 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_212_ie_212_we),
    .wd     (clicint_212_ie_212_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[212].ie.q ),

    // to register interface (read)
    .qs     (clicint_212_ie_212_qs)
  );


  // F[attr_shv_212]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_212_attr_shv_212 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_212_attr_shv_212_we),
    .wd     (clicint_212_attr_shv_212_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[212].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_212_attr_shv_212_qs)
  );


  // F[attr_trig_212]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_212_attr_trig_212 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_212_attr_trig_212_we),
    .wd     (clicint_212_attr_trig_212_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[212].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_212_attr_trig_212_qs)
  );


  // F[attr_mode_212]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_212_attr_mode_212 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_212_attr_mode_212_we),
    .wd     (clicint_212_attr_mode_212_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[212].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_212_attr_mode_212_qs)
  );


  // F[ctl_212]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_212_ctl_212 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_212_ctl_212_we),
    .wd     (clicint_212_ctl_212_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[212].ctl.q ),

    // to register interface (read)
    .qs     (clicint_212_ctl_212_qs)
  );


  // Subregister 213 of Multireg clicint
  // R[clicint_213]: V(False)

  // F[ip_213]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_213_ip_213 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_213_ip_213_we),
    .wd     (clicint_213_ip_213_wd),

    // from internal hardware
    .de     (hw2reg.clicint[213].ip.de),
    .d      (hw2reg.clicint[213].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[213].ip.q ),

    // to register interface (read)
    .qs     (clicint_213_ip_213_qs)
  );


  // F[ie_213]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_213_ie_213 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_213_ie_213_we),
    .wd     (clicint_213_ie_213_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[213].ie.q ),

    // to register interface (read)
    .qs     (clicint_213_ie_213_qs)
  );


  // F[attr_shv_213]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_213_attr_shv_213 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_213_attr_shv_213_we),
    .wd     (clicint_213_attr_shv_213_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[213].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_213_attr_shv_213_qs)
  );


  // F[attr_trig_213]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_213_attr_trig_213 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_213_attr_trig_213_we),
    .wd     (clicint_213_attr_trig_213_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[213].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_213_attr_trig_213_qs)
  );


  // F[attr_mode_213]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_213_attr_mode_213 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_213_attr_mode_213_we),
    .wd     (clicint_213_attr_mode_213_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[213].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_213_attr_mode_213_qs)
  );


  // F[ctl_213]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_213_ctl_213 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_213_ctl_213_we),
    .wd     (clicint_213_ctl_213_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[213].ctl.q ),

    // to register interface (read)
    .qs     (clicint_213_ctl_213_qs)
  );


  // Subregister 214 of Multireg clicint
  // R[clicint_214]: V(False)

  // F[ip_214]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_214_ip_214 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_214_ip_214_we),
    .wd     (clicint_214_ip_214_wd),

    // from internal hardware
    .de     (hw2reg.clicint[214].ip.de),
    .d      (hw2reg.clicint[214].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[214].ip.q ),

    // to register interface (read)
    .qs     (clicint_214_ip_214_qs)
  );


  // F[ie_214]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_214_ie_214 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_214_ie_214_we),
    .wd     (clicint_214_ie_214_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[214].ie.q ),

    // to register interface (read)
    .qs     (clicint_214_ie_214_qs)
  );


  // F[attr_shv_214]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_214_attr_shv_214 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_214_attr_shv_214_we),
    .wd     (clicint_214_attr_shv_214_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[214].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_214_attr_shv_214_qs)
  );


  // F[attr_trig_214]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_214_attr_trig_214 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_214_attr_trig_214_we),
    .wd     (clicint_214_attr_trig_214_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[214].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_214_attr_trig_214_qs)
  );


  // F[attr_mode_214]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_214_attr_mode_214 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_214_attr_mode_214_we),
    .wd     (clicint_214_attr_mode_214_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[214].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_214_attr_mode_214_qs)
  );


  // F[ctl_214]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_214_ctl_214 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_214_ctl_214_we),
    .wd     (clicint_214_ctl_214_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[214].ctl.q ),

    // to register interface (read)
    .qs     (clicint_214_ctl_214_qs)
  );


  // Subregister 215 of Multireg clicint
  // R[clicint_215]: V(False)

  // F[ip_215]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_215_ip_215 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_215_ip_215_we),
    .wd     (clicint_215_ip_215_wd),

    // from internal hardware
    .de     (hw2reg.clicint[215].ip.de),
    .d      (hw2reg.clicint[215].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[215].ip.q ),

    // to register interface (read)
    .qs     (clicint_215_ip_215_qs)
  );


  // F[ie_215]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_215_ie_215 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_215_ie_215_we),
    .wd     (clicint_215_ie_215_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[215].ie.q ),

    // to register interface (read)
    .qs     (clicint_215_ie_215_qs)
  );


  // F[attr_shv_215]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_215_attr_shv_215 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_215_attr_shv_215_we),
    .wd     (clicint_215_attr_shv_215_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[215].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_215_attr_shv_215_qs)
  );


  // F[attr_trig_215]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_215_attr_trig_215 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_215_attr_trig_215_we),
    .wd     (clicint_215_attr_trig_215_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[215].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_215_attr_trig_215_qs)
  );


  // F[attr_mode_215]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_215_attr_mode_215 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_215_attr_mode_215_we),
    .wd     (clicint_215_attr_mode_215_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[215].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_215_attr_mode_215_qs)
  );


  // F[ctl_215]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_215_ctl_215 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_215_ctl_215_we),
    .wd     (clicint_215_ctl_215_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[215].ctl.q ),

    // to register interface (read)
    .qs     (clicint_215_ctl_215_qs)
  );


  // Subregister 216 of Multireg clicint
  // R[clicint_216]: V(False)

  // F[ip_216]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_216_ip_216 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_216_ip_216_we),
    .wd     (clicint_216_ip_216_wd),

    // from internal hardware
    .de     (hw2reg.clicint[216].ip.de),
    .d      (hw2reg.clicint[216].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[216].ip.q ),

    // to register interface (read)
    .qs     (clicint_216_ip_216_qs)
  );


  // F[ie_216]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_216_ie_216 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_216_ie_216_we),
    .wd     (clicint_216_ie_216_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[216].ie.q ),

    // to register interface (read)
    .qs     (clicint_216_ie_216_qs)
  );


  // F[attr_shv_216]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_216_attr_shv_216 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_216_attr_shv_216_we),
    .wd     (clicint_216_attr_shv_216_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[216].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_216_attr_shv_216_qs)
  );


  // F[attr_trig_216]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_216_attr_trig_216 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_216_attr_trig_216_we),
    .wd     (clicint_216_attr_trig_216_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[216].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_216_attr_trig_216_qs)
  );


  // F[attr_mode_216]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_216_attr_mode_216 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_216_attr_mode_216_we),
    .wd     (clicint_216_attr_mode_216_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[216].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_216_attr_mode_216_qs)
  );


  // F[ctl_216]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_216_ctl_216 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_216_ctl_216_we),
    .wd     (clicint_216_ctl_216_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[216].ctl.q ),

    // to register interface (read)
    .qs     (clicint_216_ctl_216_qs)
  );


  // Subregister 217 of Multireg clicint
  // R[clicint_217]: V(False)

  // F[ip_217]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_217_ip_217 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_217_ip_217_we),
    .wd     (clicint_217_ip_217_wd),

    // from internal hardware
    .de     (hw2reg.clicint[217].ip.de),
    .d      (hw2reg.clicint[217].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[217].ip.q ),

    // to register interface (read)
    .qs     (clicint_217_ip_217_qs)
  );


  // F[ie_217]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_217_ie_217 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_217_ie_217_we),
    .wd     (clicint_217_ie_217_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[217].ie.q ),

    // to register interface (read)
    .qs     (clicint_217_ie_217_qs)
  );


  // F[attr_shv_217]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_217_attr_shv_217 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_217_attr_shv_217_we),
    .wd     (clicint_217_attr_shv_217_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[217].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_217_attr_shv_217_qs)
  );


  // F[attr_trig_217]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_217_attr_trig_217 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_217_attr_trig_217_we),
    .wd     (clicint_217_attr_trig_217_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[217].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_217_attr_trig_217_qs)
  );


  // F[attr_mode_217]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_217_attr_mode_217 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_217_attr_mode_217_we),
    .wd     (clicint_217_attr_mode_217_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[217].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_217_attr_mode_217_qs)
  );


  // F[ctl_217]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_217_ctl_217 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_217_ctl_217_we),
    .wd     (clicint_217_ctl_217_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[217].ctl.q ),

    // to register interface (read)
    .qs     (clicint_217_ctl_217_qs)
  );


  // Subregister 218 of Multireg clicint
  // R[clicint_218]: V(False)

  // F[ip_218]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_218_ip_218 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_218_ip_218_we),
    .wd     (clicint_218_ip_218_wd),

    // from internal hardware
    .de     (hw2reg.clicint[218].ip.de),
    .d      (hw2reg.clicint[218].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[218].ip.q ),

    // to register interface (read)
    .qs     (clicint_218_ip_218_qs)
  );


  // F[ie_218]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_218_ie_218 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_218_ie_218_we),
    .wd     (clicint_218_ie_218_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[218].ie.q ),

    // to register interface (read)
    .qs     (clicint_218_ie_218_qs)
  );


  // F[attr_shv_218]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_218_attr_shv_218 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_218_attr_shv_218_we),
    .wd     (clicint_218_attr_shv_218_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[218].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_218_attr_shv_218_qs)
  );


  // F[attr_trig_218]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_218_attr_trig_218 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_218_attr_trig_218_we),
    .wd     (clicint_218_attr_trig_218_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[218].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_218_attr_trig_218_qs)
  );


  // F[attr_mode_218]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_218_attr_mode_218 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_218_attr_mode_218_we),
    .wd     (clicint_218_attr_mode_218_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[218].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_218_attr_mode_218_qs)
  );


  // F[ctl_218]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_218_ctl_218 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_218_ctl_218_we),
    .wd     (clicint_218_ctl_218_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[218].ctl.q ),

    // to register interface (read)
    .qs     (clicint_218_ctl_218_qs)
  );


  // Subregister 219 of Multireg clicint
  // R[clicint_219]: V(False)

  // F[ip_219]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_219_ip_219 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_219_ip_219_we),
    .wd     (clicint_219_ip_219_wd),

    // from internal hardware
    .de     (hw2reg.clicint[219].ip.de),
    .d      (hw2reg.clicint[219].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[219].ip.q ),

    // to register interface (read)
    .qs     (clicint_219_ip_219_qs)
  );


  // F[ie_219]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_219_ie_219 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_219_ie_219_we),
    .wd     (clicint_219_ie_219_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[219].ie.q ),

    // to register interface (read)
    .qs     (clicint_219_ie_219_qs)
  );


  // F[attr_shv_219]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_219_attr_shv_219 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_219_attr_shv_219_we),
    .wd     (clicint_219_attr_shv_219_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[219].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_219_attr_shv_219_qs)
  );


  // F[attr_trig_219]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_219_attr_trig_219 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_219_attr_trig_219_we),
    .wd     (clicint_219_attr_trig_219_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[219].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_219_attr_trig_219_qs)
  );


  // F[attr_mode_219]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_219_attr_mode_219 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_219_attr_mode_219_we),
    .wd     (clicint_219_attr_mode_219_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[219].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_219_attr_mode_219_qs)
  );


  // F[ctl_219]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_219_ctl_219 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_219_ctl_219_we),
    .wd     (clicint_219_ctl_219_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[219].ctl.q ),

    // to register interface (read)
    .qs     (clicint_219_ctl_219_qs)
  );


  // Subregister 220 of Multireg clicint
  // R[clicint_220]: V(False)

  // F[ip_220]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_220_ip_220 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_220_ip_220_we),
    .wd     (clicint_220_ip_220_wd),

    // from internal hardware
    .de     (hw2reg.clicint[220].ip.de),
    .d      (hw2reg.clicint[220].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[220].ip.q ),

    // to register interface (read)
    .qs     (clicint_220_ip_220_qs)
  );


  // F[ie_220]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_220_ie_220 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_220_ie_220_we),
    .wd     (clicint_220_ie_220_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[220].ie.q ),

    // to register interface (read)
    .qs     (clicint_220_ie_220_qs)
  );


  // F[attr_shv_220]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_220_attr_shv_220 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_220_attr_shv_220_we),
    .wd     (clicint_220_attr_shv_220_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[220].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_220_attr_shv_220_qs)
  );


  // F[attr_trig_220]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_220_attr_trig_220 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_220_attr_trig_220_we),
    .wd     (clicint_220_attr_trig_220_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[220].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_220_attr_trig_220_qs)
  );


  // F[attr_mode_220]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_220_attr_mode_220 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_220_attr_mode_220_we),
    .wd     (clicint_220_attr_mode_220_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[220].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_220_attr_mode_220_qs)
  );


  // F[ctl_220]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_220_ctl_220 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_220_ctl_220_we),
    .wd     (clicint_220_ctl_220_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[220].ctl.q ),

    // to register interface (read)
    .qs     (clicint_220_ctl_220_qs)
  );


  // Subregister 221 of Multireg clicint
  // R[clicint_221]: V(False)

  // F[ip_221]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_221_ip_221 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_221_ip_221_we),
    .wd     (clicint_221_ip_221_wd),

    // from internal hardware
    .de     (hw2reg.clicint[221].ip.de),
    .d      (hw2reg.clicint[221].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[221].ip.q ),

    // to register interface (read)
    .qs     (clicint_221_ip_221_qs)
  );


  // F[ie_221]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_221_ie_221 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_221_ie_221_we),
    .wd     (clicint_221_ie_221_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[221].ie.q ),

    // to register interface (read)
    .qs     (clicint_221_ie_221_qs)
  );


  // F[attr_shv_221]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_221_attr_shv_221 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_221_attr_shv_221_we),
    .wd     (clicint_221_attr_shv_221_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[221].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_221_attr_shv_221_qs)
  );


  // F[attr_trig_221]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_221_attr_trig_221 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_221_attr_trig_221_we),
    .wd     (clicint_221_attr_trig_221_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[221].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_221_attr_trig_221_qs)
  );


  // F[attr_mode_221]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_221_attr_mode_221 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_221_attr_mode_221_we),
    .wd     (clicint_221_attr_mode_221_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[221].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_221_attr_mode_221_qs)
  );


  // F[ctl_221]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_221_ctl_221 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_221_ctl_221_we),
    .wd     (clicint_221_ctl_221_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[221].ctl.q ),

    // to register interface (read)
    .qs     (clicint_221_ctl_221_qs)
  );


  // Subregister 222 of Multireg clicint
  // R[clicint_222]: V(False)

  // F[ip_222]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_222_ip_222 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_222_ip_222_we),
    .wd     (clicint_222_ip_222_wd),

    // from internal hardware
    .de     (hw2reg.clicint[222].ip.de),
    .d      (hw2reg.clicint[222].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[222].ip.q ),

    // to register interface (read)
    .qs     (clicint_222_ip_222_qs)
  );


  // F[ie_222]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_222_ie_222 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_222_ie_222_we),
    .wd     (clicint_222_ie_222_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[222].ie.q ),

    // to register interface (read)
    .qs     (clicint_222_ie_222_qs)
  );


  // F[attr_shv_222]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_222_attr_shv_222 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_222_attr_shv_222_we),
    .wd     (clicint_222_attr_shv_222_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[222].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_222_attr_shv_222_qs)
  );


  // F[attr_trig_222]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_222_attr_trig_222 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_222_attr_trig_222_we),
    .wd     (clicint_222_attr_trig_222_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[222].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_222_attr_trig_222_qs)
  );


  // F[attr_mode_222]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_222_attr_mode_222 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_222_attr_mode_222_we),
    .wd     (clicint_222_attr_mode_222_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[222].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_222_attr_mode_222_qs)
  );


  // F[ctl_222]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_222_ctl_222 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_222_ctl_222_we),
    .wd     (clicint_222_ctl_222_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[222].ctl.q ),

    // to register interface (read)
    .qs     (clicint_222_ctl_222_qs)
  );


  // Subregister 223 of Multireg clicint
  // R[clicint_223]: V(False)

  // F[ip_223]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_223_ip_223 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_223_ip_223_we),
    .wd     (clicint_223_ip_223_wd),

    // from internal hardware
    .de     (hw2reg.clicint[223].ip.de),
    .d      (hw2reg.clicint[223].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[223].ip.q ),

    // to register interface (read)
    .qs     (clicint_223_ip_223_qs)
  );


  // F[ie_223]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_223_ie_223 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_223_ie_223_we),
    .wd     (clicint_223_ie_223_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[223].ie.q ),

    // to register interface (read)
    .qs     (clicint_223_ie_223_qs)
  );


  // F[attr_shv_223]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_223_attr_shv_223 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_223_attr_shv_223_we),
    .wd     (clicint_223_attr_shv_223_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[223].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_223_attr_shv_223_qs)
  );


  // F[attr_trig_223]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_223_attr_trig_223 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_223_attr_trig_223_we),
    .wd     (clicint_223_attr_trig_223_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[223].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_223_attr_trig_223_qs)
  );


  // F[attr_mode_223]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_223_attr_mode_223 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_223_attr_mode_223_we),
    .wd     (clicint_223_attr_mode_223_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[223].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_223_attr_mode_223_qs)
  );


  // F[ctl_223]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_223_ctl_223 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_223_ctl_223_we),
    .wd     (clicint_223_ctl_223_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[223].ctl.q ),

    // to register interface (read)
    .qs     (clicint_223_ctl_223_qs)
  );


  // Subregister 224 of Multireg clicint
  // R[clicint_224]: V(False)

  // F[ip_224]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_224_ip_224 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_224_ip_224_we),
    .wd     (clicint_224_ip_224_wd),

    // from internal hardware
    .de     (hw2reg.clicint[224].ip.de),
    .d      (hw2reg.clicint[224].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[224].ip.q ),

    // to register interface (read)
    .qs     (clicint_224_ip_224_qs)
  );


  // F[ie_224]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_224_ie_224 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_224_ie_224_we),
    .wd     (clicint_224_ie_224_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[224].ie.q ),

    // to register interface (read)
    .qs     (clicint_224_ie_224_qs)
  );


  // F[attr_shv_224]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_224_attr_shv_224 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_224_attr_shv_224_we),
    .wd     (clicint_224_attr_shv_224_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[224].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_224_attr_shv_224_qs)
  );


  // F[attr_trig_224]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_224_attr_trig_224 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_224_attr_trig_224_we),
    .wd     (clicint_224_attr_trig_224_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[224].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_224_attr_trig_224_qs)
  );


  // F[attr_mode_224]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_224_attr_mode_224 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_224_attr_mode_224_we),
    .wd     (clicint_224_attr_mode_224_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[224].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_224_attr_mode_224_qs)
  );


  // F[ctl_224]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_224_ctl_224 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_224_ctl_224_we),
    .wd     (clicint_224_ctl_224_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[224].ctl.q ),

    // to register interface (read)
    .qs     (clicint_224_ctl_224_qs)
  );


  // Subregister 225 of Multireg clicint
  // R[clicint_225]: V(False)

  // F[ip_225]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_225_ip_225 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_225_ip_225_we),
    .wd     (clicint_225_ip_225_wd),

    // from internal hardware
    .de     (hw2reg.clicint[225].ip.de),
    .d      (hw2reg.clicint[225].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[225].ip.q ),

    // to register interface (read)
    .qs     (clicint_225_ip_225_qs)
  );


  // F[ie_225]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_225_ie_225 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_225_ie_225_we),
    .wd     (clicint_225_ie_225_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[225].ie.q ),

    // to register interface (read)
    .qs     (clicint_225_ie_225_qs)
  );


  // F[attr_shv_225]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_225_attr_shv_225 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_225_attr_shv_225_we),
    .wd     (clicint_225_attr_shv_225_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[225].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_225_attr_shv_225_qs)
  );


  // F[attr_trig_225]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_225_attr_trig_225 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_225_attr_trig_225_we),
    .wd     (clicint_225_attr_trig_225_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[225].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_225_attr_trig_225_qs)
  );


  // F[attr_mode_225]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_225_attr_mode_225 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_225_attr_mode_225_we),
    .wd     (clicint_225_attr_mode_225_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[225].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_225_attr_mode_225_qs)
  );


  // F[ctl_225]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_225_ctl_225 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_225_ctl_225_we),
    .wd     (clicint_225_ctl_225_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[225].ctl.q ),

    // to register interface (read)
    .qs     (clicint_225_ctl_225_qs)
  );


  // Subregister 226 of Multireg clicint
  // R[clicint_226]: V(False)

  // F[ip_226]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_226_ip_226 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_226_ip_226_we),
    .wd     (clicint_226_ip_226_wd),

    // from internal hardware
    .de     (hw2reg.clicint[226].ip.de),
    .d      (hw2reg.clicint[226].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[226].ip.q ),

    // to register interface (read)
    .qs     (clicint_226_ip_226_qs)
  );


  // F[ie_226]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_226_ie_226 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_226_ie_226_we),
    .wd     (clicint_226_ie_226_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[226].ie.q ),

    // to register interface (read)
    .qs     (clicint_226_ie_226_qs)
  );


  // F[attr_shv_226]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_226_attr_shv_226 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_226_attr_shv_226_we),
    .wd     (clicint_226_attr_shv_226_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[226].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_226_attr_shv_226_qs)
  );


  // F[attr_trig_226]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_226_attr_trig_226 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_226_attr_trig_226_we),
    .wd     (clicint_226_attr_trig_226_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[226].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_226_attr_trig_226_qs)
  );


  // F[attr_mode_226]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_226_attr_mode_226 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_226_attr_mode_226_we),
    .wd     (clicint_226_attr_mode_226_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[226].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_226_attr_mode_226_qs)
  );


  // F[ctl_226]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_226_ctl_226 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_226_ctl_226_we),
    .wd     (clicint_226_ctl_226_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[226].ctl.q ),

    // to register interface (read)
    .qs     (clicint_226_ctl_226_qs)
  );


  // Subregister 227 of Multireg clicint
  // R[clicint_227]: V(False)

  // F[ip_227]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_227_ip_227 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_227_ip_227_we),
    .wd     (clicint_227_ip_227_wd),

    // from internal hardware
    .de     (hw2reg.clicint[227].ip.de),
    .d      (hw2reg.clicint[227].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[227].ip.q ),

    // to register interface (read)
    .qs     (clicint_227_ip_227_qs)
  );


  // F[ie_227]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_227_ie_227 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_227_ie_227_we),
    .wd     (clicint_227_ie_227_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[227].ie.q ),

    // to register interface (read)
    .qs     (clicint_227_ie_227_qs)
  );


  // F[attr_shv_227]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_227_attr_shv_227 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_227_attr_shv_227_we),
    .wd     (clicint_227_attr_shv_227_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[227].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_227_attr_shv_227_qs)
  );


  // F[attr_trig_227]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_227_attr_trig_227 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_227_attr_trig_227_we),
    .wd     (clicint_227_attr_trig_227_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[227].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_227_attr_trig_227_qs)
  );


  // F[attr_mode_227]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_227_attr_mode_227 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_227_attr_mode_227_we),
    .wd     (clicint_227_attr_mode_227_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[227].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_227_attr_mode_227_qs)
  );


  // F[ctl_227]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_227_ctl_227 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_227_ctl_227_we),
    .wd     (clicint_227_ctl_227_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[227].ctl.q ),

    // to register interface (read)
    .qs     (clicint_227_ctl_227_qs)
  );


  // Subregister 228 of Multireg clicint
  // R[clicint_228]: V(False)

  // F[ip_228]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_228_ip_228 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_228_ip_228_we),
    .wd     (clicint_228_ip_228_wd),

    // from internal hardware
    .de     (hw2reg.clicint[228].ip.de),
    .d      (hw2reg.clicint[228].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[228].ip.q ),

    // to register interface (read)
    .qs     (clicint_228_ip_228_qs)
  );


  // F[ie_228]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_228_ie_228 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_228_ie_228_we),
    .wd     (clicint_228_ie_228_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[228].ie.q ),

    // to register interface (read)
    .qs     (clicint_228_ie_228_qs)
  );


  // F[attr_shv_228]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_228_attr_shv_228 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_228_attr_shv_228_we),
    .wd     (clicint_228_attr_shv_228_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[228].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_228_attr_shv_228_qs)
  );


  // F[attr_trig_228]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_228_attr_trig_228 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_228_attr_trig_228_we),
    .wd     (clicint_228_attr_trig_228_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[228].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_228_attr_trig_228_qs)
  );


  // F[attr_mode_228]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_228_attr_mode_228 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_228_attr_mode_228_we),
    .wd     (clicint_228_attr_mode_228_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[228].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_228_attr_mode_228_qs)
  );


  // F[ctl_228]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_228_ctl_228 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_228_ctl_228_we),
    .wd     (clicint_228_ctl_228_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[228].ctl.q ),

    // to register interface (read)
    .qs     (clicint_228_ctl_228_qs)
  );


  // Subregister 229 of Multireg clicint
  // R[clicint_229]: V(False)

  // F[ip_229]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_229_ip_229 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_229_ip_229_we),
    .wd     (clicint_229_ip_229_wd),

    // from internal hardware
    .de     (hw2reg.clicint[229].ip.de),
    .d      (hw2reg.clicint[229].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[229].ip.q ),

    // to register interface (read)
    .qs     (clicint_229_ip_229_qs)
  );


  // F[ie_229]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_229_ie_229 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_229_ie_229_we),
    .wd     (clicint_229_ie_229_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[229].ie.q ),

    // to register interface (read)
    .qs     (clicint_229_ie_229_qs)
  );


  // F[attr_shv_229]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_229_attr_shv_229 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_229_attr_shv_229_we),
    .wd     (clicint_229_attr_shv_229_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[229].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_229_attr_shv_229_qs)
  );


  // F[attr_trig_229]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_229_attr_trig_229 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_229_attr_trig_229_we),
    .wd     (clicint_229_attr_trig_229_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[229].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_229_attr_trig_229_qs)
  );


  // F[attr_mode_229]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_229_attr_mode_229 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_229_attr_mode_229_we),
    .wd     (clicint_229_attr_mode_229_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[229].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_229_attr_mode_229_qs)
  );


  // F[ctl_229]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_229_ctl_229 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_229_ctl_229_we),
    .wd     (clicint_229_ctl_229_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[229].ctl.q ),

    // to register interface (read)
    .qs     (clicint_229_ctl_229_qs)
  );


  // Subregister 230 of Multireg clicint
  // R[clicint_230]: V(False)

  // F[ip_230]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_230_ip_230 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_230_ip_230_we),
    .wd     (clicint_230_ip_230_wd),

    // from internal hardware
    .de     (hw2reg.clicint[230].ip.de),
    .d      (hw2reg.clicint[230].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[230].ip.q ),

    // to register interface (read)
    .qs     (clicint_230_ip_230_qs)
  );


  // F[ie_230]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_230_ie_230 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_230_ie_230_we),
    .wd     (clicint_230_ie_230_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[230].ie.q ),

    // to register interface (read)
    .qs     (clicint_230_ie_230_qs)
  );


  // F[attr_shv_230]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_230_attr_shv_230 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_230_attr_shv_230_we),
    .wd     (clicint_230_attr_shv_230_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[230].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_230_attr_shv_230_qs)
  );


  // F[attr_trig_230]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_230_attr_trig_230 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_230_attr_trig_230_we),
    .wd     (clicint_230_attr_trig_230_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[230].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_230_attr_trig_230_qs)
  );


  // F[attr_mode_230]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_230_attr_mode_230 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_230_attr_mode_230_we),
    .wd     (clicint_230_attr_mode_230_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[230].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_230_attr_mode_230_qs)
  );


  // F[ctl_230]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_230_ctl_230 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_230_ctl_230_we),
    .wd     (clicint_230_ctl_230_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[230].ctl.q ),

    // to register interface (read)
    .qs     (clicint_230_ctl_230_qs)
  );


  // Subregister 231 of Multireg clicint
  // R[clicint_231]: V(False)

  // F[ip_231]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_231_ip_231 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_231_ip_231_we),
    .wd     (clicint_231_ip_231_wd),

    // from internal hardware
    .de     (hw2reg.clicint[231].ip.de),
    .d      (hw2reg.clicint[231].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[231].ip.q ),

    // to register interface (read)
    .qs     (clicint_231_ip_231_qs)
  );


  // F[ie_231]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_231_ie_231 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_231_ie_231_we),
    .wd     (clicint_231_ie_231_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[231].ie.q ),

    // to register interface (read)
    .qs     (clicint_231_ie_231_qs)
  );


  // F[attr_shv_231]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_231_attr_shv_231 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_231_attr_shv_231_we),
    .wd     (clicint_231_attr_shv_231_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[231].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_231_attr_shv_231_qs)
  );


  // F[attr_trig_231]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_231_attr_trig_231 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_231_attr_trig_231_we),
    .wd     (clicint_231_attr_trig_231_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[231].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_231_attr_trig_231_qs)
  );


  // F[attr_mode_231]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_231_attr_mode_231 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_231_attr_mode_231_we),
    .wd     (clicint_231_attr_mode_231_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[231].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_231_attr_mode_231_qs)
  );


  // F[ctl_231]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_231_ctl_231 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_231_ctl_231_we),
    .wd     (clicint_231_ctl_231_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[231].ctl.q ),

    // to register interface (read)
    .qs     (clicint_231_ctl_231_qs)
  );


  // Subregister 232 of Multireg clicint
  // R[clicint_232]: V(False)

  // F[ip_232]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_232_ip_232 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_232_ip_232_we),
    .wd     (clicint_232_ip_232_wd),

    // from internal hardware
    .de     (hw2reg.clicint[232].ip.de),
    .d      (hw2reg.clicint[232].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[232].ip.q ),

    // to register interface (read)
    .qs     (clicint_232_ip_232_qs)
  );


  // F[ie_232]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_232_ie_232 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_232_ie_232_we),
    .wd     (clicint_232_ie_232_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[232].ie.q ),

    // to register interface (read)
    .qs     (clicint_232_ie_232_qs)
  );


  // F[attr_shv_232]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_232_attr_shv_232 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_232_attr_shv_232_we),
    .wd     (clicint_232_attr_shv_232_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[232].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_232_attr_shv_232_qs)
  );


  // F[attr_trig_232]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_232_attr_trig_232 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_232_attr_trig_232_we),
    .wd     (clicint_232_attr_trig_232_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[232].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_232_attr_trig_232_qs)
  );


  // F[attr_mode_232]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_232_attr_mode_232 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_232_attr_mode_232_we),
    .wd     (clicint_232_attr_mode_232_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[232].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_232_attr_mode_232_qs)
  );


  // F[ctl_232]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_232_ctl_232 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_232_ctl_232_we),
    .wd     (clicint_232_ctl_232_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[232].ctl.q ),

    // to register interface (read)
    .qs     (clicint_232_ctl_232_qs)
  );


  // Subregister 233 of Multireg clicint
  // R[clicint_233]: V(False)

  // F[ip_233]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_233_ip_233 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_233_ip_233_we),
    .wd     (clicint_233_ip_233_wd),

    // from internal hardware
    .de     (hw2reg.clicint[233].ip.de),
    .d      (hw2reg.clicint[233].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[233].ip.q ),

    // to register interface (read)
    .qs     (clicint_233_ip_233_qs)
  );


  // F[ie_233]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_233_ie_233 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_233_ie_233_we),
    .wd     (clicint_233_ie_233_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[233].ie.q ),

    // to register interface (read)
    .qs     (clicint_233_ie_233_qs)
  );


  // F[attr_shv_233]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_233_attr_shv_233 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_233_attr_shv_233_we),
    .wd     (clicint_233_attr_shv_233_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[233].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_233_attr_shv_233_qs)
  );


  // F[attr_trig_233]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_233_attr_trig_233 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_233_attr_trig_233_we),
    .wd     (clicint_233_attr_trig_233_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[233].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_233_attr_trig_233_qs)
  );


  // F[attr_mode_233]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_233_attr_mode_233 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_233_attr_mode_233_we),
    .wd     (clicint_233_attr_mode_233_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[233].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_233_attr_mode_233_qs)
  );


  // F[ctl_233]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_233_ctl_233 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_233_ctl_233_we),
    .wd     (clicint_233_ctl_233_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[233].ctl.q ),

    // to register interface (read)
    .qs     (clicint_233_ctl_233_qs)
  );


  // Subregister 234 of Multireg clicint
  // R[clicint_234]: V(False)

  // F[ip_234]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_234_ip_234 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_234_ip_234_we),
    .wd     (clicint_234_ip_234_wd),

    // from internal hardware
    .de     (hw2reg.clicint[234].ip.de),
    .d      (hw2reg.clicint[234].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[234].ip.q ),

    // to register interface (read)
    .qs     (clicint_234_ip_234_qs)
  );


  // F[ie_234]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_234_ie_234 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_234_ie_234_we),
    .wd     (clicint_234_ie_234_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[234].ie.q ),

    // to register interface (read)
    .qs     (clicint_234_ie_234_qs)
  );


  // F[attr_shv_234]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_234_attr_shv_234 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_234_attr_shv_234_we),
    .wd     (clicint_234_attr_shv_234_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[234].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_234_attr_shv_234_qs)
  );


  // F[attr_trig_234]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_234_attr_trig_234 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_234_attr_trig_234_we),
    .wd     (clicint_234_attr_trig_234_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[234].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_234_attr_trig_234_qs)
  );


  // F[attr_mode_234]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_234_attr_mode_234 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_234_attr_mode_234_we),
    .wd     (clicint_234_attr_mode_234_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[234].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_234_attr_mode_234_qs)
  );


  // F[ctl_234]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_234_ctl_234 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_234_ctl_234_we),
    .wd     (clicint_234_ctl_234_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[234].ctl.q ),

    // to register interface (read)
    .qs     (clicint_234_ctl_234_qs)
  );


  // Subregister 235 of Multireg clicint
  // R[clicint_235]: V(False)

  // F[ip_235]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_235_ip_235 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_235_ip_235_we),
    .wd     (clicint_235_ip_235_wd),

    // from internal hardware
    .de     (hw2reg.clicint[235].ip.de),
    .d      (hw2reg.clicint[235].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[235].ip.q ),

    // to register interface (read)
    .qs     (clicint_235_ip_235_qs)
  );


  // F[ie_235]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_235_ie_235 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_235_ie_235_we),
    .wd     (clicint_235_ie_235_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[235].ie.q ),

    // to register interface (read)
    .qs     (clicint_235_ie_235_qs)
  );


  // F[attr_shv_235]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_235_attr_shv_235 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_235_attr_shv_235_we),
    .wd     (clicint_235_attr_shv_235_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[235].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_235_attr_shv_235_qs)
  );


  // F[attr_trig_235]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_235_attr_trig_235 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_235_attr_trig_235_we),
    .wd     (clicint_235_attr_trig_235_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[235].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_235_attr_trig_235_qs)
  );


  // F[attr_mode_235]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_235_attr_mode_235 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_235_attr_mode_235_we),
    .wd     (clicint_235_attr_mode_235_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[235].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_235_attr_mode_235_qs)
  );


  // F[ctl_235]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_235_ctl_235 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_235_ctl_235_we),
    .wd     (clicint_235_ctl_235_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[235].ctl.q ),

    // to register interface (read)
    .qs     (clicint_235_ctl_235_qs)
  );


  // Subregister 236 of Multireg clicint
  // R[clicint_236]: V(False)

  // F[ip_236]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_236_ip_236 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_236_ip_236_we),
    .wd     (clicint_236_ip_236_wd),

    // from internal hardware
    .de     (hw2reg.clicint[236].ip.de),
    .d      (hw2reg.clicint[236].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[236].ip.q ),

    // to register interface (read)
    .qs     (clicint_236_ip_236_qs)
  );


  // F[ie_236]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_236_ie_236 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_236_ie_236_we),
    .wd     (clicint_236_ie_236_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[236].ie.q ),

    // to register interface (read)
    .qs     (clicint_236_ie_236_qs)
  );


  // F[attr_shv_236]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_236_attr_shv_236 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_236_attr_shv_236_we),
    .wd     (clicint_236_attr_shv_236_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[236].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_236_attr_shv_236_qs)
  );


  // F[attr_trig_236]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_236_attr_trig_236 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_236_attr_trig_236_we),
    .wd     (clicint_236_attr_trig_236_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[236].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_236_attr_trig_236_qs)
  );


  // F[attr_mode_236]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_236_attr_mode_236 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_236_attr_mode_236_we),
    .wd     (clicint_236_attr_mode_236_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[236].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_236_attr_mode_236_qs)
  );


  // F[ctl_236]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_236_ctl_236 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_236_ctl_236_we),
    .wd     (clicint_236_ctl_236_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[236].ctl.q ),

    // to register interface (read)
    .qs     (clicint_236_ctl_236_qs)
  );


  // Subregister 237 of Multireg clicint
  // R[clicint_237]: V(False)

  // F[ip_237]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_237_ip_237 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_237_ip_237_we),
    .wd     (clicint_237_ip_237_wd),

    // from internal hardware
    .de     (hw2reg.clicint[237].ip.de),
    .d      (hw2reg.clicint[237].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[237].ip.q ),

    // to register interface (read)
    .qs     (clicint_237_ip_237_qs)
  );


  // F[ie_237]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_237_ie_237 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_237_ie_237_we),
    .wd     (clicint_237_ie_237_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[237].ie.q ),

    // to register interface (read)
    .qs     (clicint_237_ie_237_qs)
  );


  // F[attr_shv_237]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_237_attr_shv_237 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_237_attr_shv_237_we),
    .wd     (clicint_237_attr_shv_237_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[237].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_237_attr_shv_237_qs)
  );


  // F[attr_trig_237]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_237_attr_trig_237 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_237_attr_trig_237_we),
    .wd     (clicint_237_attr_trig_237_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[237].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_237_attr_trig_237_qs)
  );


  // F[attr_mode_237]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_237_attr_mode_237 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_237_attr_mode_237_we),
    .wd     (clicint_237_attr_mode_237_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[237].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_237_attr_mode_237_qs)
  );


  // F[ctl_237]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_237_ctl_237 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_237_ctl_237_we),
    .wd     (clicint_237_ctl_237_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[237].ctl.q ),

    // to register interface (read)
    .qs     (clicint_237_ctl_237_qs)
  );


  // Subregister 238 of Multireg clicint
  // R[clicint_238]: V(False)

  // F[ip_238]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_238_ip_238 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_238_ip_238_we),
    .wd     (clicint_238_ip_238_wd),

    // from internal hardware
    .de     (hw2reg.clicint[238].ip.de),
    .d      (hw2reg.clicint[238].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[238].ip.q ),

    // to register interface (read)
    .qs     (clicint_238_ip_238_qs)
  );


  // F[ie_238]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_238_ie_238 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_238_ie_238_we),
    .wd     (clicint_238_ie_238_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[238].ie.q ),

    // to register interface (read)
    .qs     (clicint_238_ie_238_qs)
  );


  // F[attr_shv_238]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_238_attr_shv_238 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_238_attr_shv_238_we),
    .wd     (clicint_238_attr_shv_238_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[238].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_238_attr_shv_238_qs)
  );


  // F[attr_trig_238]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_238_attr_trig_238 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_238_attr_trig_238_we),
    .wd     (clicint_238_attr_trig_238_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[238].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_238_attr_trig_238_qs)
  );


  // F[attr_mode_238]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_238_attr_mode_238 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_238_attr_mode_238_we),
    .wd     (clicint_238_attr_mode_238_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[238].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_238_attr_mode_238_qs)
  );


  // F[ctl_238]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_238_ctl_238 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_238_ctl_238_we),
    .wd     (clicint_238_ctl_238_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[238].ctl.q ),

    // to register interface (read)
    .qs     (clicint_238_ctl_238_qs)
  );


  // Subregister 239 of Multireg clicint
  // R[clicint_239]: V(False)

  // F[ip_239]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_239_ip_239 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_239_ip_239_we),
    .wd     (clicint_239_ip_239_wd),

    // from internal hardware
    .de     (hw2reg.clicint[239].ip.de),
    .d      (hw2reg.clicint[239].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[239].ip.q ),

    // to register interface (read)
    .qs     (clicint_239_ip_239_qs)
  );


  // F[ie_239]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_239_ie_239 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_239_ie_239_we),
    .wd     (clicint_239_ie_239_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[239].ie.q ),

    // to register interface (read)
    .qs     (clicint_239_ie_239_qs)
  );


  // F[attr_shv_239]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_239_attr_shv_239 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_239_attr_shv_239_we),
    .wd     (clicint_239_attr_shv_239_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[239].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_239_attr_shv_239_qs)
  );


  // F[attr_trig_239]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_239_attr_trig_239 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_239_attr_trig_239_we),
    .wd     (clicint_239_attr_trig_239_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[239].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_239_attr_trig_239_qs)
  );


  // F[attr_mode_239]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_239_attr_mode_239 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_239_attr_mode_239_we),
    .wd     (clicint_239_attr_mode_239_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[239].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_239_attr_mode_239_qs)
  );


  // F[ctl_239]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_239_ctl_239 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_239_ctl_239_we),
    .wd     (clicint_239_ctl_239_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[239].ctl.q ),

    // to register interface (read)
    .qs     (clicint_239_ctl_239_qs)
  );


  // Subregister 240 of Multireg clicint
  // R[clicint_240]: V(False)

  // F[ip_240]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_240_ip_240 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_240_ip_240_we),
    .wd     (clicint_240_ip_240_wd),

    // from internal hardware
    .de     (hw2reg.clicint[240].ip.de),
    .d      (hw2reg.clicint[240].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[240].ip.q ),

    // to register interface (read)
    .qs     (clicint_240_ip_240_qs)
  );


  // F[ie_240]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_240_ie_240 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_240_ie_240_we),
    .wd     (clicint_240_ie_240_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[240].ie.q ),

    // to register interface (read)
    .qs     (clicint_240_ie_240_qs)
  );


  // F[attr_shv_240]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_240_attr_shv_240 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_240_attr_shv_240_we),
    .wd     (clicint_240_attr_shv_240_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[240].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_240_attr_shv_240_qs)
  );


  // F[attr_trig_240]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_240_attr_trig_240 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_240_attr_trig_240_we),
    .wd     (clicint_240_attr_trig_240_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[240].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_240_attr_trig_240_qs)
  );


  // F[attr_mode_240]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_240_attr_mode_240 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_240_attr_mode_240_we),
    .wd     (clicint_240_attr_mode_240_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[240].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_240_attr_mode_240_qs)
  );


  // F[ctl_240]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_240_ctl_240 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_240_ctl_240_we),
    .wd     (clicint_240_ctl_240_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[240].ctl.q ),

    // to register interface (read)
    .qs     (clicint_240_ctl_240_qs)
  );


  // Subregister 241 of Multireg clicint
  // R[clicint_241]: V(False)

  // F[ip_241]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_241_ip_241 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_241_ip_241_we),
    .wd     (clicint_241_ip_241_wd),

    // from internal hardware
    .de     (hw2reg.clicint[241].ip.de),
    .d      (hw2reg.clicint[241].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[241].ip.q ),

    // to register interface (read)
    .qs     (clicint_241_ip_241_qs)
  );


  // F[ie_241]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_241_ie_241 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_241_ie_241_we),
    .wd     (clicint_241_ie_241_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[241].ie.q ),

    // to register interface (read)
    .qs     (clicint_241_ie_241_qs)
  );


  // F[attr_shv_241]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_241_attr_shv_241 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_241_attr_shv_241_we),
    .wd     (clicint_241_attr_shv_241_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[241].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_241_attr_shv_241_qs)
  );


  // F[attr_trig_241]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_241_attr_trig_241 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_241_attr_trig_241_we),
    .wd     (clicint_241_attr_trig_241_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[241].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_241_attr_trig_241_qs)
  );


  // F[attr_mode_241]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_241_attr_mode_241 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_241_attr_mode_241_we),
    .wd     (clicint_241_attr_mode_241_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[241].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_241_attr_mode_241_qs)
  );


  // F[ctl_241]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_241_ctl_241 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_241_ctl_241_we),
    .wd     (clicint_241_ctl_241_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[241].ctl.q ),

    // to register interface (read)
    .qs     (clicint_241_ctl_241_qs)
  );


  // Subregister 242 of Multireg clicint
  // R[clicint_242]: V(False)

  // F[ip_242]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_242_ip_242 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_242_ip_242_we),
    .wd     (clicint_242_ip_242_wd),

    // from internal hardware
    .de     (hw2reg.clicint[242].ip.de),
    .d      (hw2reg.clicint[242].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[242].ip.q ),

    // to register interface (read)
    .qs     (clicint_242_ip_242_qs)
  );


  // F[ie_242]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_242_ie_242 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_242_ie_242_we),
    .wd     (clicint_242_ie_242_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[242].ie.q ),

    // to register interface (read)
    .qs     (clicint_242_ie_242_qs)
  );


  // F[attr_shv_242]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_242_attr_shv_242 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_242_attr_shv_242_we),
    .wd     (clicint_242_attr_shv_242_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[242].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_242_attr_shv_242_qs)
  );


  // F[attr_trig_242]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_242_attr_trig_242 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_242_attr_trig_242_we),
    .wd     (clicint_242_attr_trig_242_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[242].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_242_attr_trig_242_qs)
  );


  // F[attr_mode_242]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_242_attr_mode_242 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_242_attr_mode_242_we),
    .wd     (clicint_242_attr_mode_242_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[242].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_242_attr_mode_242_qs)
  );


  // F[ctl_242]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_242_ctl_242 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_242_ctl_242_we),
    .wd     (clicint_242_ctl_242_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[242].ctl.q ),

    // to register interface (read)
    .qs     (clicint_242_ctl_242_qs)
  );


  // Subregister 243 of Multireg clicint
  // R[clicint_243]: V(False)

  // F[ip_243]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_243_ip_243 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_243_ip_243_we),
    .wd     (clicint_243_ip_243_wd),

    // from internal hardware
    .de     (hw2reg.clicint[243].ip.de),
    .d      (hw2reg.clicint[243].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[243].ip.q ),

    // to register interface (read)
    .qs     (clicint_243_ip_243_qs)
  );


  // F[ie_243]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_243_ie_243 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_243_ie_243_we),
    .wd     (clicint_243_ie_243_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[243].ie.q ),

    // to register interface (read)
    .qs     (clicint_243_ie_243_qs)
  );


  // F[attr_shv_243]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_243_attr_shv_243 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_243_attr_shv_243_we),
    .wd     (clicint_243_attr_shv_243_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[243].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_243_attr_shv_243_qs)
  );


  // F[attr_trig_243]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_243_attr_trig_243 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_243_attr_trig_243_we),
    .wd     (clicint_243_attr_trig_243_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[243].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_243_attr_trig_243_qs)
  );


  // F[attr_mode_243]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_243_attr_mode_243 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_243_attr_mode_243_we),
    .wd     (clicint_243_attr_mode_243_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[243].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_243_attr_mode_243_qs)
  );


  // F[ctl_243]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_243_ctl_243 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_243_ctl_243_we),
    .wd     (clicint_243_ctl_243_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[243].ctl.q ),

    // to register interface (read)
    .qs     (clicint_243_ctl_243_qs)
  );


  // Subregister 244 of Multireg clicint
  // R[clicint_244]: V(False)

  // F[ip_244]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_244_ip_244 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_244_ip_244_we),
    .wd     (clicint_244_ip_244_wd),

    // from internal hardware
    .de     (hw2reg.clicint[244].ip.de),
    .d      (hw2reg.clicint[244].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[244].ip.q ),

    // to register interface (read)
    .qs     (clicint_244_ip_244_qs)
  );


  // F[ie_244]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_244_ie_244 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_244_ie_244_we),
    .wd     (clicint_244_ie_244_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[244].ie.q ),

    // to register interface (read)
    .qs     (clicint_244_ie_244_qs)
  );


  // F[attr_shv_244]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_244_attr_shv_244 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_244_attr_shv_244_we),
    .wd     (clicint_244_attr_shv_244_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[244].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_244_attr_shv_244_qs)
  );


  // F[attr_trig_244]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_244_attr_trig_244 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_244_attr_trig_244_we),
    .wd     (clicint_244_attr_trig_244_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[244].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_244_attr_trig_244_qs)
  );


  // F[attr_mode_244]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_244_attr_mode_244 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_244_attr_mode_244_we),
    .wd     (clicint_244_attr_mode_244_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[244].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_244_attr_mode_244_qs)
  );


  // F[ctl_244]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_244_ctl_244 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_244_ctl_244_we),
    .wd     (clicint_244_ctl_244_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[244].ctl.q ),

    // to register interface (read)
    .qs     (clicint_244_ctl_244_qs)
  );


  // Subregister 245 of Multireg clicint
  // R[clicint_245]: V(False)

  // F[ip_245]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_245_ip_245 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_245_ip_245_we),
    .wd     (clicint_245_ip_245_wd),

    // from internal hardware
    .de     (hw2reg.clicint[245].ip.de),
    .d      (hw2reg.clicint[245].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[245].ip.q ),

    // to register interface (read)
    .qs     (clicint_245_ip_245_qs)
  );


  // F[ie_245]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_245_ie_245 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_245_ie_245_we),
    .wd     (clicint_245_ie_245_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[245].ie.q ),

    // to register interface (read)
    .qs     (clicint_245_ie_245_qs)
  );


  // F[attr_shv_245]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_245_attr_shv_245 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_245_attr_shv_245_we),
    .wd     (clicint_245_attr_shv_245_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[245].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_245_attr_shv_245_qs)
  );


  // F[attr_trig_245]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_245_attr_trig_245 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_245_attr_trig_245_we),
    .wd     (clicint_245_attr_trig_245_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[245].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_245_attr_trig_245_qs)
  );


  // F[attr_mode_245]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_245_attr_mode_245 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_245_attr_mode_245_we),
    .wd     (clicint_245_attr_mode_245_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[245].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_245_attr_mode_245_qs)
  );


  // F[ctl_245]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_245_ctl_245 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_245_ctl_245_we),
    .wd     (clicint_245_ctl_245_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[245].ctl.q ),

    // to register interface (read)
    .qs     (clicint_245_ctl_245_qs)
  );


  // Subregister 246 of Multireg clicint
  // R[clicint_246]: V(False)

  // F[ip_246]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_246_ip_246 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_246_ip_246_we),
    .wd     (clicint_246_ip_246_wd),

    // from internal hardware
    .de     (hw2reg.clicint[246].ip.de),
    .d      (hw2reg.clicint[246].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[246].ip.q ),

    // to register interface (read)
    .qs     (clicint_246_ip_246_qs)
  );


  // F[ie_246]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_246_ie_246 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_246_ie_246_we),
    .wd     (clicint_246_ie_246_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[246].ie.q ),

    // to register interface (read)
    .qs     (clicint_246_ie_246_qs)
  );


  // F[attr_shv_246]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_246_attr_shv_246 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_246_attr_shv_246_we),
    .wd     (clicint_246_attr_shv_246_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[246].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_246_attr_shv_246_qs)
  );


  // F[attr_trig_246]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_246_attr_trig_246 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_246_attr_trig_246_we),
    .wd     (clicint_246_attr_trig_246_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[246].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_246_attr_trig_246_qs)
  );


  // F[attr_mode_246]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_246_attr_mode_246 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_246_attr_mode_246_we),
    .wd     (clicint_246_attr_mode_246_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[246].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_246_attr_mode_246_qs)
  );


  // F[ctl_246]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_246_ctl_246 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_246_ctl_246_we),
    .wd     (clicint_246_ctl_246_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[246].ctl.q ),

    // to register interface (read)
    .qs     (clicint_246_ctl_246_qs)
  );


  // Subregister 247 of Multireg clicint
  // R[clicint_247]: V(False)

  // F[ip_247]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_247_ip_247 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_247_ip_247_we),
    .wd     (clicint_247_ip_247_wd),

    // from internal hardware
    .de     (hw2reg.clicint[247].ip.de),
    .d      (hw2reg.clicint[247].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[247].ip.q ),

    // to register interface (read)
    .qs     (clicint_247_ip_247_qs)
  );


  // F[ie_247]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_247_ie_247 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_247_ie_247_we),
    .wd     (clicint_247_ie_247_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[247].ie.q ),

    // to register interface (read)
    .qs     (clicint_247_ie_247_qs)
  );


  // F[attr_shv_247]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_247_attr_shv_247 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_247_attr_shv_247_we),
    .wd     (clicint_247_attr_shv_247_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[247].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_247_attr_shv_247_qs)
  );


  // F[attr_trig_247]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_247_attr_trig_247 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_247_attr_trig_247_we),
    .wd     (clicint_247_attr_trig_247_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[247].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_247_attr_trig_247_qs)
  );


  // F[attr_mode_247]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_247_attr_mode_247 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_247_attr_mode_247_we),
    .wd     (clicint_247_attr_mode_247_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[247].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_247_attr_mode_247_qs)
  );


  // F[ctl_247]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_247_ctl_247 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_247_ctl_247_we),
    .wd     (clicint_247_ctl_247_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[247].ctl.q ),

    // to register interface (read)
    .qs     (clicint_247_ctl_247_qs)
  );


  // Subregister 248 of Multireg clicint
  // R[clicint_248]: V(False)

  // F[ip_248]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_248_ip_248 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_248_ip_248_we),
    .wd     (clicint_248_ip_248_wd),

    // from internal hardware
    .de     (hw2reg.clicint[248].ip.de),
    .d      (hw2reg.clicint[248].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[248].ip.q ),

    // to register interface (read)
    .qs     (clicint_248_ip_248_qs)
  );


  // F[ie_248]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_248_ie_248 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_248_ie_248_we),
    .wd     (clicint_248_ie_248_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[248].ie.q ),

    // to register interface (read)
    .qs     (clicint_248_ie_248_qs)
  );


  // F[attr_shv_248]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_248_attr_shv_248 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_248_attr_shv_248_we),
    .wd     (clicint_248_attr_shv_248_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[248].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_248_attr_shv_248_qs)
  );


  // F[attr_trig_248]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_248_attr_trig_248 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_248_attr_trig_248_we),
    .wd     (clicint_248_attr_trig_248_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[248].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_248_attr_trig_248_qs)
  );


  // F[attr_mode_248]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_248_attr_mode_248 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_248_attr_mode_248_we),
    .wd     (clicint_248_attr_mode_248_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[248].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_248_attr_mode_248_qs)
  );


  // F[ctl_248]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_248_ctl_248 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_248_ctl_248_we),
    .wd     (clicint_248_ctl_248_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[248].ctl.q ),

    // to register interface (read)
    .qs     (clicint_248_ctl_248_qs)
  );


  // Subregister 249 of Multireg clicint
  // R[clicint_249]: V(False)

  // F[ip_249]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_249_ip_249 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_249_ip_249_we),
    .wd     (clicint_249_ip_249_wd),

    // from internal hardware
    .de     (hw2reg.clicint[249].ip.de),
    .d      (hw2reg.clicint[249].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[249].ip.q ),

    // to register interface (read)
    .qs     (clicint_249_ip_249_qs)
  );


  // F[ie_249]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_249_ie_249 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_249_ie_249_we),
    .wd     (clicint_249_ie_249_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[249].ie.q ),

    // to register interface (read)
    .qs     (clicint_249_ie_249_qs)
  );


  // F[attr_shv_249]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_249_attr_shv_249 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_249_attr_shv_249_we),
    .wd     (clicint_249_attr_shv_249_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[249].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_249_attr_shv_249_qs)
  );


  // F[attr_trig_249]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_249_attr_trig_249 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_249_attr_trig_249_we),
    .wd     (clicint_249_attr_trig_249_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[249].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_249_attr_trig_249_qs)
  );


  // F[attr_mode_249]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_249_attr_mode_249 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_249_attr_mode_249_we),
    .wd     (clicint_249_attr_mode_249_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[249].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_249_attr_mode_249_qs)
  );


  // F[ctl_249]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_249_ctl_249 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_249_ctl_249_we),
    .wd     (clicint_249_ctl_249_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[249].ctl.q ),

    // to register interface (read)
    .qs     (clicint_249_ctl_249_qs)
  );


  // Subregister 250 of Multireg clicint
  // R[clicint_250]: V(False)

  // F[ip_250]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_250_ip_250 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_250_ip_250_we),
    .wd     (clicint_250_ip_250_wd),

    // from internal hardware
    .de     (hw2reg.clicint[250].ip.de),
    .d      (hw2reg.clicint[250].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[250].ip.q ),

    // to register interface (read)
    .qs     (clicint_250_ip_250_qs)
  );


  // F[ie_250]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_250_ie_250 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_250_ie_250_we),
    .wd     (clicint_250_ie_250_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[250].ie.q ),

    // to register interface (read)
    .qs     (clicint_250_ie_250_qs)
  );


  // F[attr_shv_250]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_250_attr_shv_250 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_250_attr_shv_250_we),
    .wd     (clicint_250_attr_shv_250_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[250].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_250_attr_shv_250_qs)
  );


  // F[attr_trig_250]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_250_attr_trig_250 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_250_attr_trig_250_we),
    .wd     (clicint_250_attr_trig_250_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[250].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_250_attr_trig_250_qs)
  );


  // F[attr_mode_250]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_250_attr_mode_250 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_250_attr_mode_250_we),
    .wd     (clicint_250_attr_mode_250_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[250].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_250_attr_mode_250_qs)
  );


  // F[ctl_250]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_250_ctl_250 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_250_ctl_250_we),
    .wd     (clicint_250_ctl_250_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[250].ctl.q ),

    // to register interface (read)
    .qs     (clicint_250_ctl_250_qs)
  );


  // Subregister 251 of Multireg clicint
  // R[clicint_251]: V(False)

  // F[ip_251]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_251_ip_251 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_251_ip_251_we),
    .wd     (clicint_251_ip_251_wd),

    // from internal hardware
    .de     (hw2reg.clicint[251].ip.de),
    .d      (hw2reg.clicint[251].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[251].ip.q ),

    // to register interface (read)
    .qs     (clicint_251_ip_251_qs)
  );


  // F[ie_251]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_251_ie_251 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_251_ie_251_we),
    .wd     (clicint_251_ie_251_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[251].ie.q ),

    // to register interface (read)
    .qs     (clicint_251_ie_251_qs)
  );


  // F[attr_shv_251]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_251_attr_shv_251 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_251_attr_shv_251_we),
    .wd     (clicint_251_attr_shv_251_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[251].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_251_attr_shv_251_qs)
  );


  // F[attr_trig_251]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_251_attr_trig_251 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_251_attr_trig_251_we),
    .wd     (clicint_251_attr_trig_251_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[251].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_251_attr_trig_251_qs)
  );


  // F[attr_mode_251]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_251_attr_mode_251 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_251_attr_mode_251_we),
    .wd     (clicint_251_attr_mode_251_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[251].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_251_attr_mode_251_qs)
  );


  // F[ctl_251]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_251_ctl_251 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_251_ctl_251_we),
    .wd     (clicint_251_ctl_251_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[251].ctl.q ),

    // to register interface (read)
    .qs     (clicint_251_ctl_251_qs)
  );


  // Subregister 252 of Multireg clicint
  // R[clicint_252]: V(False)

  // F[ip_252]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_252_ip_252 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_252_ip_252_we),
    .wd     (clicint_252_ip_252_wd),

    // from internal hardware
    .de     (hw2reg.clicint[252].ip.de),
    .d      (hw2reg.clicint[252].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[252].ip.q ),

    // to register interface (read)
    .qs     (clicint_252_ip_252_qs)
  );


  // F[ie_252]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_252_ie_252 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_252_ie_252_we),
    .wd     (clicint_252_ie_252_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[252].ie.q ),

    // to register interface (read)
    .qs     (clicint_252_ie_252_qs)
  );


  // F[attr_shv_252]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_252_attr_shv_252 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_252_attr_shv_252_we),
    .wd     (clicint_252_attr_shv_252_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[252].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_252_attr_shv_252_qs)
  );


  // F[attr_trig_252]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_252_attr_trig_252 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_252_attr_trig_252_we),
    .wd     (clicint_252_attr_trig_252_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[252].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_252_attr_trig_252_qs)
  );


  // F[attr_mode_252]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_252_attr_mode_252 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_252_attr_mode_252_we),
    .wd     (clicint_252_attr_mode_252_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[252].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_252_attr_mode_252_qs)
  );


  // F[ctl_252]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_252_ctl_252 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_252_ctl_252_we),
    .wd     (clicint_252_ctl_252_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[252].ctl.q ),

    // to register interface (read)
    .qs     (clicint_252_ctl_252_qs)
  );


  // Subregister 253 of Multireg clicint
  // R[clicint_253]: V(False)

  // F[ip_253]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_253_ip_253 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_253_ip_253_we),
    .wd     (clicint_253_ip_253_wd),

    // from internal hardware
    .de     (hw2reg.clicint[253].ip.de),
    .d      (hw2reg.clicint[253].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[253].ip.q ),

    // to register interface (read)
    .qs     (clicint_253_ip_253_qs)
  );


  // F[ie_253]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_253_ie_253 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_253_ie_253_we),
    .wd     (clicint_253_ie_253_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[253].ie.q ),

    // to register interface (read)
    .qs     (clicint_253_ie_253_qs)
  );


  // F[attr_shv_253]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_253_attr_shv_253 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_253_attr_shv_253_we),
    .wd     (clicint_253_attr_shv_253_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[253].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_253_attr_shv_253_qs)
  );


  // F[attr_trig_253]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_253_attr_trig_253 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_253_attr_trig_253_we),
    .wd     (clicint_253_attr_trig_253_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[253].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_253_attr_trig_253_qs)
  );


  // F[attr_mode_253]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_253_attr_mode_253 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_253_attr_mode_253_we),
    .wd     (clicint_253_attr_mode_253_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[253].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_253_attr_mode_253_qs)
  );


  // F[ctl_253]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_253_ctl_253 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_253_ctl_253_we),
    .wd     (clicint_253_ctl_253_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[253].ctl.q ),

    // to register interface (read)
    .qs     (clicint_253_ctl_253_qs)
  );


  // Subregister 254 of Multireg clicint
  // R[clicint_254]: V(False)

  // F[ip_254]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_254_ip_254 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_254_ip_254_we),
    .wd     (clicint_254_ip_254_wd),

    // from internal hardware
    .de     (hw2reg.clicint[254].ip.de),
    .d      (hw2reg.clicint[254].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[254].ip.q ),

    // to register interface (read)
    .qs     (clicint_254_ip_254_qs)
  );


  // F[ie_254]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_254_ie_254 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_254_ie_254_we),
    .wd     (clicint_254_ie_254_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[254].ie.q ),

    // to register interface (read)
    .qs     (clicint_254_ie_254_qs)
  );


  // F[attr_shv_254]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_254_attr_shv_254 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_254_attr_shv_254_we),
    .wd     (clicint_254_attr_shv_254_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[254].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_254_attr_shv_254_qs)
  );


  // F[attr_trig_254]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_254_attr_trig_254 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_254_attr_trig_254_we),
    .wd     (clicint_254_attr_trig_254_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[254].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_254_attr_trig_254_qs)
  );


  // F[attr_mode_254]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_254_attr_mode_254 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_254_attr_mode_254_we),
    .wd     (clicint_254_attr_mode_254_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[254].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_254_attr_mode_254_qs)
  );


  // F[ctl_254]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_254_ctl_254 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_254_ctl_254_we),
    .wd     (clicint_254_ctl_254_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[254].ctl.q ),

    // to register interface (read)
    .qs     (clicint_254_ctl_254_qs)
  );


  // Subregister 255 of Multireg clicint
  // R[clicint_255]: V(False)

  // F[ip_255]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_255_ip_255 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_255_ip_255_we),
    .wd     (clicint_255_ip_255_wd),

    // from internal hardware
    .de     (hw2reg.clicint[255].ip.de),
    .d      (hw2reg.clicint[255].ip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[255].ip.q ),

    // to register interface (read)
    .qs     (clicint_255_ip_255_qs)
  );


  // F[ie_255]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_255_ie_255 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_255_ie_255_we),
    .wd     (clicint_255_ie_255_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[255].ie.q ),

    // to register interface (read)
    .qs     (clicint_255_ie_255_qs)
  );


  // F[attr_shv_255]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicint_255_attr_shv_255 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_255_attr_shv_255_we),
    .wd     (clicint_255_attr_shv_255_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[255].attr_shv.q ),

    // to register interface (read)
    .qs     (clicint_255_attr_shv_255_qs)
  );


  // F[attr_trig_255]: 18:17
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_255_attr_trig_255 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_255_attr_trig_255_we),
    .wd     (clicint_255_attr_trig_255_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[255].attr_trig.q ),

    // to register interface (read)
    .qs     (clicint_255_attr_trig_255_qs)
  );


  // F[attr_mode_255]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_clicint_255_attr_mode_255 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_255_attr_mode_255_we),
    .wd     (clicint_255_attr_mode_255_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[255].attr_mode.q ),

    // to register interface (read)
    .qs     (clicint_255_attr_mode_255_qs)
  );


  // F[ctl_255]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clicint_255_ctl_255 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicint_255_ctl_255_we),
    .wd     (clicint_255_ctl_255_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicint[255].ctl.q ),

    // to register interface (read)
    .qs     (clicint_255_ctl_255_qs)
  );





  logic [256:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == CLIC_MCLICCFG_OFFSET);
    addr_hit[  1] = (reg_addr == CLIC_CLICINT_0_OFFSET);
    addr_hit[  2] = (reg_addr == CLIC_CLICINT_1_OFFSET);
    addr_hit[  3] = (reg_addr == CLIC_CLICINT_2_OFFSET);
    addr_hit[  4] = (reg_addr == CLIC_CLICINT_3_OFFSET);
    addr_hit[  5] = (reg_addr == CLIC_CLICINT_4_OFFSET);
    addr_hit[  6] = (reg_addr == CLIC_CLICINT_5_OFFSET);
    addr_hit[  7] = (reg_addr == CLIC_CLICINT_6_OFFSET);
    addr_hit[  8] = (reg_addr == CLIC_CLICINT_7_OFFSET);
    addr_hit[  9] = (reg_addr == CLIC_CLICINT_8_OFFSET);
    addr_hit[ 10] = (reg_addr == CLIC_CLICINT_9_OFFSET);
    addr_hit[ 11] = (reg_addr == CLIC_CLICINT_10_OFFSET);
    addr_hit[ 12] = (reg_addr == CLIC_CLICINT_11_OFFSET);
    addr_hit[ 13] = (reg_addr == CLIC_CLICINT_12_OFFSET);
    addr_hit[ 14] = (reg_addr == CLIC_CLICINT_13_OFFSET);
    addr_hit[ 15] = (reg_addr == CLIC_CLICINT_14_OFFSET);
    addr_hit[ 16] = (reg_addr == CLIC_CLICINT_15_OFFSET);
    addr_hit[ 17] = (reg_addr == CLIC_CLICINT_16_OFFSET);
    addr_hit[ 18] = (reg_addr == CLIC_CLICINT_17_OFFSET);
    addr_hit[ 19] = (reg_addr == CLIC_CLICINT_18_OFFSET);
    addr_hit[ 20] = (reg_addr == CLIC_CLICINT_19_OFFSET);
    addr_hit[ 21] = (reg_addr == CLIC_CLICINT_20_OFFSET);
    addr_hit[ 22] = (reg_addr == CLIC_CLICINT_21_OFFSET);
    addr_hit[ 23] = (reg_addr == CLIC_CLICINT_22_OFFSET);
    addr_hit[ 24] = (reg_addr == CLIC_CLICINT_23_OFFSET);
    addr_hit[ 25] = (reg_addr == CLIC_CLICINT_24_OFFSET);
    addr_hit[ 26] = (reg_addr == CLIC_CLICINT_25_OFFSET);
    addr_hit[ 27] = (reg_addr == CLIC_CLICINT_26_OFFSET);
    addr_hit[ 28] = (reg_addr == CLIC_CLICINT_27_OFFSET);
    addr_hit[ 29] = (reg_addr == CLIC_CLICINT_28_OFFSET);
    addr_hit[ 30] = (reg_addr == CLIC_CLICINT_29_OFFSET);
    addr_hit[ 31] = (reg_addr == CLIC_CLICINT_30_OFFSET);
    addr_hit[ 32] = (reg_addr == CLIC_CLICINT_31_OFFSET);
    addr_hit[ 33] = (reg_addr == CLIC_CLICINT_32_OFFSET);
    addr_hit[ 34] = (reg_addr == CLIC_CLICINT_33_OFFSET);
    addr_hit[ 35] = (reg_addr == CLIC_CLICINT_34_OFFSET);
    addr_hit[ 36] = (reg_addr == CLIC_CLICINT_35_OFFSET);
    addr_hit[ 37] = (reg_addr == CLIC_CLICINT_36_OFFSET);
    addr_hit[ 38] = (reg_addr == CLIC_CLICINT_37_OFFSET);
    addr_hit[ 39] = (reg_addr == CLIC_CLICINT_38_OFFSET);
    addr_hit[ 40] = (reg_addr == CLIC_CLICINT_39_OFFSET);
    addr_hit[ 41] = (reg_addr == CLIC_CLICINT_40_OFFSET);
    addr_hit[ 42] = (reg_addr == CLIC_CLICINT_41_OFFSET);
    addr_hit[ 43] = (reg_addr == CLIC_CLICINT_42_OFFSET);
    addr_hit[ 44] = (reg_addr == CLIC_CLICINT_43_OFFSET);
    addr_hit[ 45] = (reg_addr == CLIC_CLICINT_44_OFFSET);
    addr_hit[ 46] = (reg_addr == CLIC_CLICINT_45_OFFSET);
    addr_hit[ 47] = (reg_addr == CLIC_CLICINT_46_OFFSET);
    addr_hit[ 48] = (reg_addr == CLIC_CLICINT_47_OFFSET);
    addr_hit[ 49] = (reg_addr == CLIC_CLICINT_48_OFFSET);
    addr_hit[ 50] = (reg_addr == CLIC_CLICINT_49_OFFSET);
    addr_hit[ 51] = (reg_addr == CLIC_CLICINT_50_OFFSET);
    addr_hit[ 52] = (reg_addr == CLIC_CLICINT_51_OFFSET);
    addr_hit[ 53] = (reg_addr == CLIC_CLICINT_52_OFFSET);
    addr_hit[ 54] = (reg_addr == CLIC_CLICINT_53_OFFSET);
    addr_hit[ 55] = (reg_addr == CLIC_CLICINT_54_OFFSET);
    addr_hit[ 56] = (reg_addr == CLIC_CLICINT_55_OFFSET);
    addr_hit[ 57] = (reg_addr == CLIC_CLICINT_56_OFFSET);
    addr_hit[ 58] = (reg_addr == CLIC_CLICINT_57_OFFSET);
    addr_hit[ 59] = (reg_addr == CLIC_CLICINT_58_OFFSET);
    addr_hit[ 60] = (reg_addr == CLIC_CLICINT_59_OFFSET);
    addr_hit[ 61] = (reg_addr == CLIC_CLICINT_60_OFFSET);
    addr_hit[ 62] = (reg_addr == CLIC_CLICINT_61_OFFSET);
    addr_hit[ 63] = (reg_addr == CLIC_CLICINT_62_OFFSET);
    addr_hit[ 64] = (reg_addr == CLIC_CLICINT_63_OFFSET);
    addr_hit[ 65] = (reg_addr == CLIC_CLICINT_64_OFFSET);
    addr_hit[ 66] = (reg_addr == CLIC_CLICINT_65_OFFSET);
    addr_hit[ 67] = (reg_addr == CLIC_CLICINT_66_OFFSET);
    addr_hit[ 68] = (reg_addr == CLIC_CLICINT_67_OFFSET);
    addr_hit[ 69] = (reg_addr == CLIC_CLICINT_68_OFFSET);
    addr_hit[ 70] = (reg_addr == CLIC_CLICINT_69_OFFSET);
    addr_hit[ 71] = (reg_addr == CLIC_CLICINT_70_OFFSET);
    addr_hit[ 72] = (reg_addr == CLIC_CLICINT_71_OFFSET);
    addr_hit[ 73] = (reg_addr == CLIC_CLICINT_72_OFFSET);
    addr_hit[ 74] = (reg_addr == CLIC_CLICINT_73_OFFSET);
    addr_hit[ 75] = (reg_addr == CLIC_CLICINT_74_OFFSET);
    addr_hit[ 76] = (reg_addr == CLIC_CLICINT_75_OFFSET);
    addr_hit[ 77] = (reg_addr == CLIC_CLICINT_76_OFFSET);
    addr_hit[ 78] = (reg_addr == CLIC_CLICINT_77_OFFSET);
    addr_hit[ 79] = (reg_addr == CLIC_CLICINT_78_OFFSET);
    addr_hit[ 80] = (reg_addr == CLIC_CLICINT_79_OFFSET);
    addr_hit[ 81] = (reg_addr == CLIC_CLICINT_80_OFFSET);
    addr_hit[ 82] = (reg_addr == CLIC_CLICINT_81_OFFSET);
    addr_hit[ 83] = (reg_addr == CLIC_CLICINT_82_OFFSET);
    addr_hit[ 84] = (reg_addr == CLIC_CLICINT_83_OFFSET);
    addr_hit[ 85] = (reg_addr == CLIC_CLICINT_84_OFFSET);
    addr_hit[ 86] = (reg_addr == CLIC_CLICINT_85_OFFSET);
    addr_hit[ 87] = (reg_addr == CLIC_CLICINT_86_OFFSET);
    addr_hit[ 88] = (reg_addr == CLIC_CLICINT_87_OFFSET);
    addr_hit[ 89] = (reg_addr == CLIC_CLICINT_88_OFFSET);
    addr_hit[ 90] = (reg_addr == CLIC_CLICINT_89_OFFSET);
    addr_hit[ 91] = (reg_addr == CLIC_CLICINT_90_OFFSET);
    addr_hit[ 92] = (reg_addr == CLIC_CLICINT_91_OFFSET);
    addr_hit[ 93] = (reg_addr == CLIC_CLICINT_92_OFFSET);
    addr_hit[ 94] = (reg_addr == CLIC_CLICINT_93_OFFSET);
    addr_hit[ 95] = (reg_addr == CLIC_CLICINT_94_OFFSET);
    addr_hit[ 96] = (reg_addr == CLIC_CLICINT_95_OFFSET);
    addr_hit[ 97] = (reg_addr == CLIC_CLICINT_96_OFFSET);
    addr_hit[ 98] = (reg_addr == CLIC_CLICINT_97_OFFSET);
    addr_hit[ 99] = (reg_addr == CLIC_CLICINT_98_OFFSET);
    addr_hit[100] = (reg_addr == CLIC_CLICINT_99_OFFSET);
    addr_hit[101] = (reg_addr == CLIC_CLICINT_100_OFFSET);
    addr_hit[102] = (reg_addr == CLIC_CLICINT_101_OFFSET);
    addr_hit[103] = (reg_addr == CLIC_CLICINT_102_OFFSET);
    addr_hit[104] = (reg_addr == CLIC_CLICINT_103_OFFSET);
    addr_hit[105] = (reg_addr == CLIC_CLICINT_104_OFFSET);
    addr_hit[106] = (reg_addr == CLIC_CLICINT_105_OFFSET);
    addr_hit[107] = (reg_addr == CLIC_CLICINT_106_OFFSET);
    addr_hit[108] = (reg_addr == CLIC_CLICINT_107_OFFSET);
    addr_hit[109] = (reg_addr == CLIC_CLICINT_108_OFFSET);
    addr_hit[110] = (reg_addr == CLIC_CLICINT_109_OFFSET);
    addr_hit[111] = (reg_addr == CLIC_CLICINT_110_OFFSET);
    addr_hit[112] = (reg_addr == CLIC_CLICINT_111_OFFSET);
    addr_hit[113] = (reg_addr == CLIC_CLICINT_112_OFFSET);
    addr_hit[114] = (reg_addr == CLIC_CLICINT_113_OFFSET);
    addr_hit[115] = (reg_addr == CLIC_CLICINT_114_OFFSET);
    addr_hit[116] = (reg_addr == CLIC_CLICINT_115_OFFSET);
    addr_hit[117] = (reg_addr == CLIC_CLICINT_116_OFFSET);
    addr_hit[118] = (reg_addr == CLIC_CLICINT_117_OFFSET);
    addr_hit[119] = (reg_addr == CLIC_CLICINT_118_OFFSET);
    addr_hit[120] = (reg_addr == CLIC_CLICINT_119_OFFSET);
    addr_hit[121] = (reg_addr == CLIC_CLICINT_120_OFFSET);
    addr_hit[122] = (reg_addr == CLIC_CLICINT_121_OFFSET);
    addr_hit[123] = (reg_addr == CLIC_CLICINT_122_OFFSET);
    addr_hit[124] = (reg_addr == CLIC_CLICINT_123_OFFSET);
    addr_hit[125] = (reg_addr == CLIC_CLICINT_124_OFFSET);
    addr_hit[126] = (reg_addr == CLIC_CLICINT_125_OFFSET);
    addr_hit[127] = (reg_addr == CLIC_CLICINT_126_OFFSET);
    addr_hit[128] = (reg_addr == CLIC_CLICINT_127_OFFSET);
    addr_hit[129] = (reg_addr == CLIC_CLICINT_128_OFFSET);
    addr_hit[130] = (reg_addr == CLIC_CLICINT_129_OFFSET);
    addr_hit[131] = (reg_addr == CLIC_CLICINT_130_OFFSET);
    addr_hit[132] = (reg_addr == CLIC_CLICINT_131_OFFSET);
    addr_hit[133] = (reg_addr == CLIC_CLICINT_132_OFFSET);
    addr_hit[134] = (reg_addr == CLIC_CLICINT_133_OFFSET);
    addr_hit[135] = (reg_addr == CLIC_CLICINT_134_OFFSET);
    addr_hit[136] = (reg_addr == CLIC_CLICINT_135_OFFSET);
    addr_hit[137] = (reg_addr == CLIC_CLICINT_136_OFFSET);
    addr_hit[138] = (reg_addr == CLIC_CLICINT_137_OFFSET);
    addr_hit[139] = (reg_addr == CLIC_CLICINT_138_OFFSET);
    addr_hit[140] = (reg_addr == CLIC_CLICINT_139_OFFSET);
    addr_hit[141] = (reg_addr == CLIC_CLICINT_140_OFFSET);
    addr_hit[142] = (reg_addr == CLIC_CLICINT_141_OFFSET);
    addr_hit[143] = (reg_addr == CLIC_CLICINT_142_OFFSET);
    addr_hit[144] = (reg_addr == CLIC_CLICINT_143_OFFSET);
    addr_hit[145] = (reg_addr == CLIC_CLICINT_144_OFFSET);
    addr_hit[146] = (reg_addr == CLIC_CLICINT_145_OFFSET);
    addr_hit[147] = (reg_addr == CLIC_CLICINT_146_OFFSET);
    addr_hit[148] = (reg_addr == CLIC_CLICINT_147_OFFSET);
    addr_hit[149] = (reg_addr == CLIC_CLICINT_148_OFFSET);
    addr_hit[150] = (reg_addr == CLIC_CLICINT_149_OFFSET);
    addr_hit[151] = (reg_addr == CLIC_CLICINT_150_OFFSET);
    addr_hit[152] = (reg_addr == CLIC_CLICINT_151_OFFSET);
    addr_hit[153] = (reg_addr == CLIC_CLICINT_152_OFFSET);
    addr_hit[154] = (reg_addr == CLIC_CLICINT_153_OFFSET);
    addr_hit[155] = (reg_addr == CLIC_CLICINT_154_OFFSET);
    addr_hit[156] = (reg_addr == CLIC_CLICINT_155_OFFSET);
    addr_hit[157] = (reg_addr == CLIC_CLICINT_156_OFFSET);
    addr_hit[158] = (reg_addr == CLIC_CLICINT_157_OFFSET);
    addr_hit[159] = (reg_addr == CLIC_CLICINT_158_OFFSET);
    addr_hit[160] = (reg_addr == CLIC_CLICINT_159_OFFSET);
    addr_hit[161] = (reg_addr == CLIC_CLICINT_160_OFFSET);
    addr_hit[162] = (reg_addr == CLIC_CLICINT_161_OFFSET);
    addr_hit[163] = (reg_addr == CLIC_CLICINT_162_OFFSET);
    addr_hit[164] = (reg_addr == CLIC_CLICINT_163_OFFSET);
    addr_hit[165] = (reg_addr == CLIC_CLICINT_164_OFFSET);
    addr_hit[166] = (reg_addr == CLIC_CLICINT_165_OFFSET);
    addr_hit[167] = (reg_addr == CLIC_CLICINT_166_OFFSET);
    addr_hit[168] = (reg_addr == CLIC_CLICINT_167_OFFSET);
    addr_hit[169] = (reg_addr == CLIC_CLICINT_168_OFFSET);
    addr_hit[170] = (reg_addr == CLIC_CLICINT_169_OFFSET);
    addr_hit[171] = (reg_addr == CLIC_CLICINT_170_OFFSET);
    addr_hit[172] = (reg_addr == CLIC_CLICINT_171_OFFSET);
    addr_hit[173] = (reg_addr == CLIC_CLICINT_172_OFFSET);
    addr_hit[174] = (reg_addr == CLIC_CLICINT_173_OFFSET);
    addr_hit[175] = (reg_addr == CLIC_CLICINT_174_OFFSET);
    addr_hit[176] = (reg_addr == CLIC_CLICINT_175_OFFSET);
    addr_hit[177] = (reg_addr == CLIC_CLICINT_176_OFFSET);
    addr_hit[178] = (reg_addr == CLIC_CLICINT_177_OFFSET);
    addr_hit[179] = (reg_addr == CLIC_CLICINT_178_OFFSET);
    addr_hit[180] = (reg_addr == CLIC_CLICINT_179_OFFSET);
    addr_hit[181] = (reg_addr == CLIC_CLICINT_180_OFFSET);
    addr_hit[182] = (reg_addr == CLIC_CLICINT_181_OFFSET);
    addr_hit[183] = (reg_addr == CLIC_CLICINT_182_OFFSET);
    addr_hit[184] = (reg_addr == CLIC_CLICINT_183_OFFSET);
    addr_hit[185] = (reg_addr == CLIC_CLICINT_184_OFFSET);
    addr_hit[186] = (reg_addr == CLIC_CLICINT_185_OFFSET);
    addr_hit[187] = (reg_addr == CLIC_CLICINT_186_OFFSET);
    addr_hit[188] = (reg_addr == CLIC_CLICINT_187_OFFSET);
    addr_hit[189] = (reg_addr == CLIC_CLICINT_188_OFFSET);
    addr_hit[190] = (reg_addr == CLIC_CLICINT_189_OFFSET);
    addr_hit[191] = (reg_addr == CLIC_CLICINT_190_OFFSET);
    addr_hit[192] = (reg_addr == CLIC_CLICINT_191_OFFSET);
    addr_hit[193] = (reg_addr == CLIC_CLICINT_192_OFFSET);
    addr_hit[194] = (reg_addr == CLIC_CLICINT_193_OFFSET);
    addr_hit[195] = (reg_addr == CLIC_CLICINT_194_OFFSET);
    addr_hit[196] = (reg_addr == CLIC_CLICINT_195_OFFSET);
    addr_hit[197] = (reg_addr == CLIC_CLICINT_196_OFFSET);
    addr_hit[198] = (reg_addr == CLIC_CLICINT_197_OFFSET);
    addr_hit[199] = (reg_addr == CLIC_CLICINT_198_OFFSET);
    addr_hit[200] = (reg_addr == CLIC_CLICINT_199_OFFSET);
    addr_hit[201] = (reg_addr == CLIC_CLICINT_200_OFFSET);
    addr_hit[202] = (reg_addr == CLIC_CLICINT_201_OFFSET);
    addr_hit[203] = (reg_addr == CLIC_CLICINT_202_OFFSET);
    addr_hit[204] = (reg_addr == CLIC_CLICINT_203_OFFSET);
    addr_hit[205] = (reg_addr == CLIC_CLICINT_204_OFFSET);
    addr_hit[206] = (reg_addr == CLIC_CLICINT_205_OFFSET);
    addr_hit[207] = (reg_addr == CLIC_CLICINT_206_OFFSET);
    addr_hit[208] = (reg_addr == CLIC_CLICINT_207_OFFSET);
    addr_hit[209] = (reg_addr == CLIC_CLICINT_208_OFFSET);
    addr_hit[210] = (reg_addr == CLIC_CLICINT_209_OFFSET);
    addr_hit[211] = (reg_addr == CLIC_CLICINT_210_OFFSET);
    addr_hit[212] = (reg_addr == CLIC_CLICINT_211_OFFSET);
    addr_hit[213] = (reg_addr == CLIC_CLICINT_212_OFFSET);
    addr_hit[214] = (reg_addr == CLIC_CLICINT_213_OFFSET);
    addr_hit[215] = (reg_addr == CLIC_CLICINT_214_OFFSET);
    addr_hit[216] = (reg_addr == CLIC_CLICINT_215_OFFSET);
    addr_hit[217] = (reg_addr == CLIC_CLICINT_216_OFFSET);
    addr_hit[218] = (reg_addr == CLIC_CLICINT_217_OFFSET);
    addr_hit[219] = (reg_addr == CLIC_CLICINT_218_OFFSET);
    addr_hit[220] = (reg_addr == CLIC_CLICINT_219_OFFSET);
    addr_hit[221] = (reg_addr == CLIC_CLICINT_220_OFFSET);
    addr_hit[222] = (reg_addr == CLIC_CLICINT_221_OFFSET);
    addr_hit[223] = (reg_addr == CLIC_CLICINT_222_OFFSET);
    addr_hit[224] = (reg_addr == CLIC_CLICINT_223_OFFSET);
    addr_hit[225] = (reg_addr == CLIC_CLICINT_224_OFFSET);
    addr_hit[226] = (reg_addr == CLIC_CLICINT_225_OFFSET);
    addr_hit[227] = (reg_addr == CLIC_CLICINT_226_OFFSET);
    addr_hit[228] = (reg_addr == CLIC_CLICINT_227_OFFSET);
    addr_hit[229] = (reg_addr == CLIC_CLICINT_228_OFFSET);
    addr_hit[230] = (reg_addr == CLIC_CLICINT_229_OFFSET);
    addr_hit[231] = (reg_addr == CLIC_CLICINT_230_OFFSET);
    addr_hit[232] = (reg_addr == CLIC_CLICINT_231_OFFSET);
    addr_hit[233] = (reg_addr == CLIC_CLICINT_232_OFFSET);
    addr_hit[234] = (reg_addr == CLIC_CLICINT_233_OFFSET);
    addr_hit[235] = (reg_addr == CLIC_CLICINT_234_OFFSET);
    addr_hit[236] = (reg_addr == CLIC_CLICINT_235_OFFSET);
    addr_hit[237] = (reg_addr == CLIC_CLICINT_236_OFFSET);
    addr_hit[238] = (reg_addr == CLIC_CLICINT_237_OFFSET);
    addr_hit[239] = (reg_addr == CLIC_CLICINT_238_OFFSET);
    addr_hit[240] = (reg_addr == CLIC_CLICINT_239_OFFSET);
    addr_hit[241] = (reg_addr == CLIC_CLICINT_240_OFFSET);
    addr_hit[242] = (reg_addr == CLIC_CLICINT_241_OFFSET);
    addr_hit[243] = (reg_addr == CLIC_CLICINT_242_OFFSET);
    addr_hit[244] = (reg_addr == CLIC_CLICINT_243_OFFSET);
    addr_hit[245] = (reg_addr == CLIC_CLICINT_244_OFFSET);
    addr_hit[246] = (reg_addr == CLIC_CLICINT_245_OFFSET);
    addr_hit[247] = (reg_addr == CLIC_CLICINT_246_OFFSET);
    addr_hit[248] = (reg_addr == CLIC_CLICINT_247_OFFSET);
    addr_hit[249] = (reg_addr == CLIC_CLICINT_248_OFFSET);
    addr_hit[250] = (reg_addr == CLIC_CLICINT_249_OFFSET);
    addr_hit[251] = (reg_addr == CLIC_CLICINT_250_OFFSET);
    addr_hit[252] = (reg_addr == CLIC_CLICINT_251_OFFSET);
    addr_hit[253] = (reg_addr == CLIC_CLICINT_252_OFFSET);
    addr_hit[254] = (reg_addr == CLIC_CLICINT_253_OFFSET);
    addr_hit[255] = (reg_addr == CLIC_CLICINT_254_OFFSET);
    addr_hit[256] = (reg_addr == CLIC_CLICINT_255_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(CLIC_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(CLIC_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(CLIC_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(CLIC_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(CLIC_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(CLIC_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(CLIC_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(CLIC_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(CLIC_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(CLIC_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(CLIC_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(CLIC_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(CLIC_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(CLIC_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(CLIC_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(CLIC_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(CLIC_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(CLIC_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(CLIC_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(CLIC_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(CLIC_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(CLIC_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(CLIC_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(CLIC_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(CLIC_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(CLIC_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(CLIC_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(CLIC_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(CLIC_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(CLIC_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(CLIC_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(CLIC_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(CLIC_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(CLIC_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(CLIC_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(CLIC_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(CLIC_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(CLIC_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(CLIC_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(CLIC_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(CLIC_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(CLIC_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(CLIC_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(CLIC_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(CLIC_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(CLIC_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(CLIC_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(CLIC_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(CLIC_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(CLIC_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(CLIC_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(CLIC_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(CLIC_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(CLIC_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(CLIC_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(CLIC_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(CLIC_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(CLIC_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(CLIC_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(CLIC_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(CLIC_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(CLIC_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(CLIC_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(CLIC_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(CLIC_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(CLIC_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(CLIC_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(CLIC_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(CLIC_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(CLIC_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(CLIC_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(CLIC_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(CLIC_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(CLIC_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(CLIC_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(CLIC_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(CLIC_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(CLIC_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(CLIC_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(CLIC_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(CLIC_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(CLIC_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(CLIC_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(CLIC_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(CLIC_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(CLIC_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(CLIC_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(CLIC_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(CLIC_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(CLIC_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(CLIC_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(CLIC_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(CLIC_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(CLIC_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(CLIC_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(CLIC_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(CLIC_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(CLIC_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(CLIC_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(CLIC_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(CLIC_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(CLIC_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(CLIC_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(CLIC_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(CLIC_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(CLIC_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(CLIC_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(CLIC_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(CLIC_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(CLIC_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(CLIC_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(CLIC_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(CLIC_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(CLIC_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(CLIC_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(CLIC_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(CLIC_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(CLIC_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(CLIC_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(CLIC_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(CLIC_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(CLIC_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(CLIC_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(CLIC_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(CLIC_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(CLIC_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(CLIC_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(CLIC_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(CLIC_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(CLIC_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(CLIC_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(CLIC_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(CLIC_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(CLIC_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(CLIC_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(CLIC_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(CLIC_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(CLIC_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(CLIC_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(CLIC_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(CLIC_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(CLIC_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(CLIC_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(CLIC_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(CLIC_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(CLIC_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(CLIC_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(CLIC_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(CLIC_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(CLIC_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(CLIC_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(CLIC_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(CLIC_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(CLIC_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(CLIC_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(CLIC_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(CLIC_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(CLIC_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(CLIC_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(CLIC_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(CLIC_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(CLIC_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(CLIC_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(CLIC_PERMIT[163] & ~reg_be))) |
               (addr_hit[164] & (|(CLIC_PERMIT[164] & ~reg_be))) |
               (addr_hit[165] & (|(CLIC_PERMIT[165] & ~reg_be))) |
               (addr_hit[166] & (|(CLIC_PERMIT[166] & ~reg_be))) |
               (addr_hit[167] & (|(CLIC_PERMIT[167] & ~reg_be))) |
               (addr_hit[168] & (|(CLIC_PERMIT[168] & ~reg_be))) |
               (addr_hit[169] & (|(CLIC_PERMIT[169] & ~reg_be))) |
               (addr_hit[170] & (|(CLIC_PERMIT[170] & ~reg_be))) |
               (addr_hit[171] & (|(CLIC_PERMIT[171] & ~reg_be))) |
               (addr_hit[172] & (|(CLIC_PERMIT[172] & ~reg_be))) |
               (addr_hit[173] & (|(CLIC_PERMIT[173] & ~reg_be))) |
               (addr_hit[174] & (|(CLIC_PERMIT[174] & ~reg_be))) |
               (addr_hit[175] & (|(CLIC_PERMIT[175] & ~reg_be))) |
               (addr_hit[176] & (|(CLIC_PERMIT[176] & ~reg_be))) |
               (addr_hit[177] & (|(CLIC_PERMIT[177] & ~reg_be))) |
               (addr_hit[178] & (|(CLIC_PERMIT[178] & ~reg_be))) |
               (addr_hit[179] & (|(CLIC_PERMIT[179] & ~reg_be))) |
               (addr_hit[180] & (|(CLIC_PERMIT[180] & ~reg_be))) |
               (addr_hit[181] & (|(CLIC_PERMIT[181] & ~reg_be))) |
               (addr_hit[182] & (|(CLIC_PERMIT[182] & ~reg_be))) |
               (addr_hit[183] & (|(CLIC_PERMIT[183] & ~reg_be))) |
               (addr_hit[184] & (|(CLIC_PERMIT[184] & ~reg_be))) |
               (addr_hit[185] & (|(CLIC_PERMIT[185] & ~reg_be))) |
               (addr_hit[186] & (|(CLIC_PERMIT[186] & ~reg_be))) |
               (addr_hit[187] & (|(CLIC_PERMIT[187] & ~reg_be))) |
               (addr_hit[188] & (|(CLIC_PERMIT[188] & ~reg_be))) |
               (addr_hit[189] & (|(CLIC_PERMIT[189] & ~reg_be))) |
               (addr_hit[190] & (|(CLIC_PERMIT[190] & ~reg_be))) |
               (addr_hit[191] & (|(CLIC_PERMIT[191] & ~reg_be))) |
               (addr_hit[192] & (|(CLIC_PERMIT[192] & ~reg_be))) |
               (addr_hit[193] & (|(CLIC_PERMIT[193] & ~reg_be))) |
               (addr_hit[194] & (|(CLIC_PERMIT[194] & ~reg_be))) |
               (addr_hit[195] & (|(CLIC_PERMIT[195] & ~reg_be))) |
               (addr_hit[196] & (|(CLIC_PERMIT[196] & ~reg_be))) |
               (addr_hit[197] & (|(CLIC_PERMIT[197] & ~reg_be))) |
               (addr_hit[198] & (|(CLIC_PERMIT[198] & ~reg_be))) |
               (addr_hit[199] & (|(CLIC_PERMIT[199] & ~reg_be))) |
               (addr_hit[200] & (|(CLIC_PERMIT[200] & ~reg_be))) |
               (addr_hit[201] & (|(CLIC_PERMIT[201] & ~reg_be))) |
               (addr_hit[202] & (|(CLIC_PERMIT[202] & ~reg_be))) |
               (addr_hit[203] & (|(CLIC_PERMIT[203] & ~reg_be))) |
               (addr_hit[204] & (|(CLIC_PERMIT[204] & ~reg_be))) |
               (addr_hit[205] & (|(CLIC_PERMIT[205] & ~reg_be))) |
               (addr_hit[206] & (|(CLIC_PERMIT[206] & ~reg_be))) |
               (addr_hit[207] & (|(CLIC_PERMIT[207] & ~reg_be))) |
               (addr_hit[208] & (|(CLIC_PERMIT[208] & ~reg_be))) |
               (addr_hit[209] & (|(CLIC_PERMIT[209] & ~reg_be))) |
               (addr_hit[210] & (|(CLIC_PERMIT[210] & ~reg_be))) |
               (addr_hit[211] & (|(CLIC_PERMIT[211] & ~reg_be))) |
               (addr_hit[212] & (|(CLIC_PERMIT[212] & ~reg_be))) |
               (addr_hit[213] & (|(CLIC_PERMIT[213] & ~reg_be))) |
               (addr_hit[214] & (|(CLIC_PERMIT[214] & ~reg_be))) |
               (addr_hit[215] & (|(CLIC_PERMIT[215] & ~reg_be))) |
               (addr_hit[216] & (|(CLIC_PERMIT[216] & ~reg_be))) |
               (addr_hit[217] & (|(CLIC_PERMIT[217] & ~reg_be))) |
               (addr_hit[218] & (|(CLIC_PERMIT[218] & ~reg_be))) |
               (addr_hit[219] & (|(CLIC_PERMIT[219] & ~reg_be))) |
               (addr_hit[220] & (|(CLIC_PERMIT[220] & ~reg_be))) |
               (addr_hit[221] & (|(CLIC_PERMIT[221] & ~reg_be))) |
               (addr_hit[222] & (|(CLIC_PERMIT[222] & ~reg_be))) |
               (addr_hit[223] & (|(CLIC_PERMIT[223] & ~reg_be))) |
               (addr_hit[224] & (|(CLIC_PERMIT[224] & ~reg_be))) |
               (addr_hit[225] & (|(CLIC_PERMIT[225] & ~reg_be))) |
               (addr_hit[226] & (|(CLIC_PERMIT[226] & ~reg_be))) |
               (addr_hit[227] & (|(CLIC_PERMIT[227] & ~reg_be))) |
               (addr_hit[228] & (|(CLIC_PERMIT[228] & ~reg_be))) |
               (addr_hit[229] & (|(CLIC_PERMIT[229] & ~reg_be))) |
               (addr_hit[230] & (|(CLIC_PERMIT[230] & ~reg_be))) |
               (addr_hit[231] & (|(CLIC_PERMIT[231] & ~reg_be))) |
               (addr_hit[232] & (|(CLIC_PERMIT[232] & ~reg_be))) |
               (addr_hit[233] & (|(CLIC_PERMIT[233] & ~reg_be))) |
               (addr_hit[234] & (|(CLIC_PERMIT[234] & ~reg_be))) |
               (addr_hit[235] & (|(CLIC_PERMIT[235] & ~reg_be))) |
               (addr_hit[236] & (|(CLIC_PERMIT[236] & ~reg_be))) |
               (addr_hit[237] & (|(CLIC_PERMIT[237] & ~reg_be))) |
               (addr_hit[238] & (|(CLIC_PERMIT[238] & ~reg_be))) |
               (addr_hit[239] & (|(CLIC_PERMIT[239] & ~reg_be))) |
               (addr_hit[240] & (|(CLIC_PERMIT[240] & ~reg_be))) |
               (addr_hit[241] & (|(CLIC_PERMIT[241] & ~reg_be))) |
               (addr_hit[242] & (|(CLIC_PERMIT[242] & ~reg_be))) |
               (addr_hit[243] & (|(CLIC_PERMIT[243] & ~reg_be))) |
               (addr_hit[244] & (|(CLIC_PERMIT[244] & ~reg_be))) |
               (addr_hit[245] & (|(CLIC_PERMIT[245] & ~reg_be))) |
               (addr_hit[246] & (|(CLIC_PERMIT[246] & ~reg_be))) |
               (addr_hit[247] & (|(CLIC_PERMIT[247] & ~reg_be))) |
               (addr_hit[248] & (|(CLIC_PERMIT[248] & ~reg_be))) |
               (addr_hit[249] & (|(CLIC_PERMIT[249] & ~reg_be))) |
               (addr_hit[250] & (|(CLIC_PERMIT[250] & ~reg_be))) |
               (addr_hit[251] & (|(CLIC_PERMIT[251] & ~reg_be))) |
               (addr_hit[252] & (|(CLIC_PERMIT[252] & ~reg_be))) |
               (addr_hit[253] & (|(CLIC_PERMIT[253] & ~reg_be))) |
               (addr_hit[254] & (|(CLIC_PERMIT[254] & ~reg_be))) |
               (addr_hit[255] & (|(CLIC_PERMIT[255] & ~reg_be))) |
               (addr_hit[256] & (|(CLIC_PERMIT[256] & ~reg_be)))));
  end

  assign mcliccfg_mnlbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_mnlbits_wd = reg_wdata[3:0];

  assign mcliccfg_nmbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_nmbits_wd = reg_wdata[5:4];

  assign mcliccfg_snlbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_snlbits_wd = reg_wdata[19:16];

  assign mcliccfg_unlbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_unlbits_wd = reg_wdata[27:24];

  assign clicint_0_ip_0_we = addr_hit[1] & reg_we & !reg_error;
  assign clicint_0_ip_0_wd = reg_wdata[0];

  assign clicint_0_ie_0_we = addr_hit[1] & reg_we & !reg_error;
  assign clicint_0_ie_0_wd = reg_wdata[7];

  assign clicint_0_attr_shv_0_we = addr_hit[1] & reg_we & !reg_error;
  assign clicint_0_attr_shv_0_wd = reg_wdata[16];

  assign clicint_0_attr_trig_0_we = addr_hit[1] & reg_we & !reg_error;
  assign clicint_0_attr_trig_0_wd = reg_wdata[18:17];

  assign clicint_0_attr_mode_0_we = addr_hit[1] & reg_we & !reg_error;
  assign clicint_0_attr_mode_0_wd = reg_wdata[23:22];

  assign clicint_0_ctl_0_we = addr_hit[1] & reg_we & !reg_error;
  assign clicint_0_ctl_0_wd = reg_wdata[31:24];

  assign clicint_1_ip_1_we = addr_hit[2] & reg_we & !reg_error;
  assign clicint_1_ip_1_wd = reg_wdata[0];

  assign clicint_1_ie_1_we = addr_hit[2] & reg_we & !reg_error;
  assign clicint_1_ie_1_wd = reg_wdata[7];

  assign clicint_1_attr_shv_1_we = addr_hit[2] & reg_we & !reg_error;
  assign clicint_1_attr_shv_1_wd = reg_wdata[16];

  assign clicint_1_attr_trig_1_we = addr_hit[2] & reg_we & !reg_error;
  assign clicint_1_attr_trig_1_wd = reg_wdata[18:17];

  assign clicint_1_attr_mode_1_we = addr_hit[2] & reg_we & !reg_error;
  assign clicint_1_attr_mode_1_wd = reg_wdata[23:22];

  assign clicint_1_ctl_1_we = addr_hit[2] & reg_we & !reg_error;
  assign clicint_1_ctl_1_wd = reg_wdata[31:24];

  assign clicint_2_ip_2_we = addr_hit[3] & reg_we & !reg_error;
  assign clicint_2_ip_2_wd = reg_wdata[0];

  assign clicint_2_ie_2_we = addr_hit[3] & reg_we & !reg_error;
  assign clicint_2_ie_2_wd = reg_wdata[7];

  assign clicint_2_attr_shv_2_we = addr_hit[3] & reg_we & !reg_error;
  assign clicint_2_attr_shv_2_wd = reg_wdata[16];

  assign clicint_2_attr_trig_2_we = addr_hit[3] & reg_we & !reg_error;
  assign clicint_2_attr_trig_2_wd = reg_wdata[18:17];

  assign clicint_2_attr_mode_2_we = addr_hit[3] & reg_we & !reg_error;
  assign clicint_2_attr_mode_2_wd = reg_wdata[23:22];

  assign clicint_2_ctl_2_we = addr_hit[3] & reg_we & !reg_error;
  assign clicint_2_ctl_2_wd = reg_wdata[31:24];

  assign clicint_3_ip_3_we = addr_hit[4] & reg_we & !reg_error;
  assign clicint_3_ip_3_wd = reg_wdata[0];

  assign clicint_3_ie_3_we = addr_hit[4] & reg_we & !reg_error;
  assign clicint_3_ie_3_wd = reg_wdata[7];

  assign clicint_3_attr_shv_3_we = addr_hit[4] & reg_we & !reg_error;
  assign clicint_3_attr_shv_3_wd = reg_wdata[16];

  assign clicint_3_attr_trig_3_we = addr_hit[4] & reg_we & !reg_error;
  assign clicint_3_attr_trig_3_wd = reg_wdata[18:17];

  assign clicint_3_attr_mode_3_we = addr_hit[4] & reg_we & !reg_error;
  assign clicint_3_attr_mode_3_wd = reg_wdata[23:22];

  assign clicint_3_ctl_3_we = addr_hit[4] & reg_we & !reg_error;
  assign clicint_3_ctl_3_wd = reg_wdata[31:24];

  assign clicint_4_ip_4_we = addr_hit[5] & reg_we & !reg_error;
  assign clicint_4_ip_4_wd = reg_wdata[0];

  assign clicint_4_ie_4_we = addr_hit[5] & reg_we & !reg_error;
  assign clicint_4_ie_4_wd = reg_wdata[7];

  assign clicint_4_attr_shv_4_we = addr_hit[5] & reg_we & !reg_error;
  assign clicint_4_attr_shv_4_wd = reg_wdata[16];

  assign clicint_4_attr_trig_4_we = addr_hit[5] & reg_we & !reg_error;
  assign clicint_4_attr_trig_4_wd = reg_wdata[18:17];

  assign clicint_4_attr_mode_4_we = addr_hit[5] & reg_we & !reg_error;
  assign clicint_4_attr_mode_4_wd = reg_wdata[23:22];

  assign clicint_4_ctl_4_we = addr_hit[5] & reg_we & !reg_error;
  assign clicint_4_ctl_4_wd = reg_wdata[31:24];

  assign clicint_5_ip_5_we = addr_hit[6] & reg_we & !reg_error;
  assign clicint_5_ip_5_wd = reg_wdata[0];

  assign clicint_5_ie_5_we = addr_hit[6] & reg_we & !reg_error;
  assign clicint_5_ie_5_wd = reg_wdata[7];

  assign clicint_5_attr_shv_5_we = addr_hit[6] & reg_we & !reg_error;
  assign clicint_5_attr_shv_5_wd = reg_wdata[16];

  assign clicint_5_attr_trig_5_we = addr_hit[6] & reg_we & !reg_error;
  assign clicint_5_attr_trig_5_wd = reg_wdata[18:17];

  assign clicint_5_attr_mode_5_we = addr_hit[6] & reg_we & !reg_error;
  assign clicint_5_attr_mode_5_wd = reg_wdata[23:22];

  assign clicint_5_ctl_5_we = addr_hit[6] & reg_we & !reg_error;
  assign clicint_5_ctl_5_wd = reg_wdata[31:24];

  assign clicint_6_ip_6_we = addr_hit[7] & reg_we & !reg_error;
  assign clicint_6_ip_6_wd = reg_wdata[0];

  assign clicint_6_ie_6_we = addr_hit[7] & reg_we & !reg_error;
  assign clicint_6_ie_6_wd = reg_wdata[7];

  assign clicint_6_attr_shv_6_we = addr_hit[7] & reg_we & !reg_error;
  assign clicint_6_attr_shv_6_wd = reg_wdata[16];

  assign clicint_6_attr_trig_6_we = addr_hit[7] & reg_we & !reg_error;
  assign clicint_6_attr_trig_6_wd = reg_wdata[18:17];

  assign clicint_6_attr_mode_6_we = addr_hit[7] & reg_we & !reg_error;
  assign clicint_6_attr_mode_6_wd = reg_wdata[23:22];

  assign clicint_6_ctl_6_we = addr_hit[7] & reg_we & !reg_error;
  assign clicint_6_ctl_6_wd = reg_wdata[31:24];

  assign clicint_7_ip_7_we = addr_hit[8] & reg_we & !reg_error;
  assign clicint_7_ip_7_wd = reg_wdata[0];

  assign clicint_7_ie_7_we = addr_hit[8] & reg_we & !reg_error;
  assign clicint_7_ie_7_wd = reg_wdata[7];

  assign clicint_7_attr_shv_7_we = addr_hit[8] & reg_we & !reg_error;
  assign clicint_7_attr_shv_7_wd = reg_wdata[16];

  assign clicint_7_attr_trig_7_we = addr_hit[8] & reg_we & !reg_error;
  assign clicint_7_attr_trig_7_wd = reg_wdata[18:17];

  assign clicint_7_attr_mode_7_we = addr_hit[8] & reg_we & !reg_error;
  assign clicint_7_attr_mode_7_wd = reg_wdata[23:22];

  assign clicint_7_ctl_7_we = addr_hit[8] & reg_we & !reg_error;
  assign clicint_7_ctl_7_wd = reg_wdata[31:24];

  assign clicint_8_ip_8_we = addr_hit[9] & reg_we & !reg_error;
  assign clicint_8_ip_8_wd = reg_wdata[0];

  assign clicint_8_ie_8_we = addr_hit[9] & reg_we & !reg_error;
  assign clicint_8_ie_8_wd = reg_wdata[7];

  assign clicint_8_attr_shv_8_we = addr_hit[9] & reg_we & !reg_error;
  assign clicint_8_attr_shv_8_wd = reg_wdata[16];

  assign clicint_8_attr_trig_8_we = addr_hit[9] & reg_we & !reg_error;
  assign clicint_8_attr_trig_8_wd = reg_wdata[18:17];

  assign clicint_8_attr_mode_8_we = addr_hit[9] & reg_we & !reg_error;
  assign clicint_8_attr_mode_8_wd = reg_wdata[23:22];

  assign clicint_8_ctl_8_we = addr_hit[9] & reg_we & !reg_error;
  assign clicint_8_ctl_8_wd = reg_wdata[31:24];

  assign clicint_9_ip_9_we = addr_hit[10] & reg_we & !reg_error;
  assign clicint_9_ip_9_wd = reg_wdata[0];

  assign clicint_9_ie_9_we = addr_hit[10] & reg_we & !reg_error;
  assign clicint_9_ie_9_wd = reg_wdata[7];

  assign clicint_9_attr_shv_9_we = addr_hit[10] & reg_we & !reg_error;
  assign clicint_9_attr_shv_9_wd = reg_wdata[16];

  assign clicint_9_attr_trig_9_we = addr_hit[10] & reg_we & !reg_error;
  assign clicint_9_attr_trig_9_wd = reg_wdata[18:17];

  assign clicint_9_attr_mode_9_we = addr_hit[10] & reg_we & !reg_error;
  assign clicint_9_attr_mode_9_wd = reg_wdata[23:22];

  assign clicint_9_ctl_9_we = addr_hit[10] & reg_we & !reg_error;
  assign clicint_9_ctl_9_wd = reg_wdata[31:24];

  assign clicint_10_ip_10_we = addr_hit[11] & reg_we & !reg_error;
  assign clicint_10_ip_10_wd = reg_wdata[0];

  assign clicint_10_ie_10_we = addr_hit[11] & reg_we & !reg_error;
  assign clicint_10_ie_10_wd = reg_wdata[7];

  assign clicint_10_attr_shv_10_we = addr_hit[11] & reg_we & !reg_error;
  assign clicint_10_attr_shv_10_wd = reg_wdata[16];

  assign clicint_10_attr_trig_10_we = addr_hit[11] & reg_we & !reg_error;
  assign clicint_10_attr_trig_10_wd = reg_wdata[18:17];

  assign clicint_10_attr_mode_10_we = addr_hit[11] & reg_we & !reg_error;
  assign clicint_10_attr_mode_10_wd = reg_wdata[23:22];

  assign clicint_10_ctl_10_we = addr_hit[11] & reg_we & !reg_error;
  assign clicint_10_ctl_10_wd = reg_wdata[31:24];

  assign clicint_11_ip_11_we = addr_hit[12] & reg_we & !reg_error;
  assign clicint_11_ip_11_wd = reg_wdata[0];

  assign clicint_11_ie_11_we = addr_hit[12] & reg_we & !reg_error;
  assign clicint_11_ie_11_wd = reg_wdata[7];

  assign clicint_11_attr_shv_11_we = addr_hit[12] & reg_we & !reg_error;
  assign clicint_11_attr_shv_11_wd = reg_wdata[16];

  assign clicint_11_attr_trig_11_we = addr_hit[12] & reg_we & !reg_error;
  assign clicint_11_attr_trig_11_wd = reg_wdata[18:17];

  assign clicint_11_attr_mode_11_we = addr_hit[12] & reg_we & !reg_error;
  assign clicint_11_attr_mode_11_wd = reg_wdata[23:22];

  assign clicint_11_ctl_11_we = addr_hit[12] & reg_we & !reg_error;
  assign clicint_11_ctl_11_wd = reg_wdata[31:24];

  assign clicint_12_ip_12_we = addr_hit[13] & reg_we & !reg_error;
  assign clicint_12_ip_12_wd = reg_wdata[0];

  assign clicint_12_ie_12_we = addr_hit[13] & reg_we & !reg_error;
  assign clicint_12_ie_12_wd = reg_wdata[7];

  assign clicint_12_attr_shv_12_we = addr_hit[13] & reg_we & !reg_error;
  assign clicint_12_attr_shv_12_wd = reg_wdata[16];

  assign clicint_12_attr_trig_12_we = addr_hit[13] & reg_we & !reg_error;
  assign clicint_12_attr_trig_12_wd = reg_wdata[18:17];

  assign clicint_12_attr_mode_12_we = addr_hit[13] & reg_we & !reg_error;
  assign clicint_12_attr_mode_12_wd = reg_wdata[23:22];

  assign clicint_12_ctl_12_we = addr_hit[13] & reg_we & !reg_error;
  assign clicint_12_ctl_12_wd = reg_wdata[31:24];

  assign clicint_13_ip_13_we = addr_hit[14] & reg_we & !reg_error;
  assign clicint_13_ip_13_wd = reg_wdata[0];

  assign clicint_13_ie_13_we = addr_hit[14] & reg_we & !reg_error;
  assign clicint_13_ie_13_wd = reg_wdata[7];

  assign clicint_13_attr_shv_13_we = addr_hit[14] & reg_we & !reg_error;
  assign clicint_13_attr_shv_13_wd = reg_wdata[16];

  assign clicint_13_attr_trig_13_we = addr_hit[14] & reg_we & !reg_error;
  assign clicint_13_attr_trig_13_wd = reg_wdata[18:17];

  assign clicint_13_attr_mode_13_we = addr_hit[14] & reg_we & !reg_error;
  assign clicint_13_attr_mode_13_wd = reg_wdata[23:22];

  assign clicint_13_ctl_13_we = addr_hit[14] & reg_we & !reg_error;
  assign clicint_13_ctl_13_wd = reg_wdata[31:24];

  assign clicint_14_ip_14_we = addr_hit[15] & reg_we & !reg_error;
  assign clicint_14_ip_14_wd = reg_wdata[0];

  assign clicint_14_ie_14_we = addr_hit[15] & reg_we & !reg_error;
  assign clicint_14_ie_14_wd = reg_wdata[7];

  assign clicint_14_attr_shv_14_we = addr_hit[15] & reg_we & !reg_error;
  assign clicint_14_attr_shv_14_wd = reg_wdata[16];

  assign clicint_14_attr_trig_14_we = addr_hit[15] & reg_we & !reg_error;
  assign clicint_14_attr_trig_14_wd = reg_wdata[18:17];

  assign clicint_14_attr_mode_14_we = addr_hit[15] & reg_we & !reg_error;
  assign clicint_14_attr_mode_14_wd = reg_wdata[23:22];

  assign clicint_14_ctl_14_we = addr_hit[15] & reg_we & !reg_error;
  assign clicint_14_ctl_14_wd = reg_wdata[31:24];

  assign clicint_15_ip_15_we = addr_hit[16] & reg_we & !reg_error;
  assign clicint_15_ip_15_wd = reg_wdata[0];

  assign clicint_15_ie_15_we = addr_hit[16] & reg_we & !reg_error;
  assign clicint_15_ie_15_wd = reg_wdata[7];

  assign clicint_15_attr_shv_15_we = addr_hit[16] & reg_we & !reg_error;
  assign clicint_15_attr_shv_15_wd = reg_wdata[16];

  assign clicint_15_attr_trig_15_we = addr_hit[16] & reg_we & !reg_error;
  assign clicint_15_attr_trig_15_wd = reg_wdata[18:17];

  assign clicint_15_attr_mode_15_we = addr_hit[16] & reg_we & !reg_error;
  assign clicint_15_attr_mode_15_wd = reg_wdata[23:22];

  assign clicint_15_ctl_15_we = addr_hit[16] & reg_we & !reg_error;
  assign clicint_15_ctl_15_wd = reg_wdata[31:24];

  assign clicint_16_ip_16_we = addr_hit[17] & reg_we & !reg_error;
  assign clicint_16_ip_16_wd = reg_wdata[0];

  assign clicint_16_ie_16_we = addr_hit[17] & reg_we & !reg_error;
  assign clicint_16_ie_16_wd = reg_wdata[7];

  assign clicint_16_attr_shv_16_we = addr_hit[17] & reg_we & !reg_error;
  assign clicint_16_attr_shv_16_wd = reg_wdata[16];

  assign clicint_16_attr_trig_16_we = addr_hit[17] & reg_we & !reg_error;
  assign clicint_16_attr_trig_16_wd = reg_wdata[18:17];

  assign clicint_16_attr_mode_16_we = addr_hit[17] & reg_we & !reg_error;
  assign clicint_16_attr_mode_16_wd = reg_wdata[23:22];

  assign clicint_16_ctl_16_we = addr_hit[17] & reg_we & !reg_error;
  assign clicint_16_ctl_16_wd = reg_wdata[31:24];

  assign clicint_17_ip_17_we = addr_hit[18] & reg_we & !reg_error;
  assign clicint_17_ip_17_wd = reg_wdata[0];

  assign clicint_17_ie_17_we = addr_hit[18] & reg_we & !reg_error;
  assign clicint_17_ie_17_wd = reg_wdata[7];

  assign clicint_17_attr_shv_17_we = addr_hit[18] & reg_we & !reg_error;
  assign clicint_17_attr_shv_17_wd = reg_wdata[16];

  assign clicint_17_attr_trig_17_we = addr_hit[18] & reg_we & !reg_error;
  assign clicint_17_attr_trig_17_wd = reg_wdata[18:17];

  assign clicint_17_attr_mode_17_we = addr_hit[18] & reg_we & !reg_error;
  assign clicint_17_attr_mode_17_wd = reg_wdata[23:22];

  assign clicint_17_ctl_17_we = addr_hit[18] & reg_we & !reg_error;
  assign clicint_17_ctl_17_wd = reg_wdata[31:24];

  assign clicint_18_ip_18_we = addr_hit[19] & reg_we & !reg_error;
  assign clicint_18_ip_18_wd = reg_wdata[0];

  assign clicint_18_ie_18_we = addr_hit[19] & reg_we & !reg_error;
  assign clicint_18_ie_18_wd = reg_wdata[7];

  assign clicint_18_attr_shv_18_we = addr_hit[19] & reg_we & !reg_error;
  assign clicint_18_attr_shv_18_wd = reg_wdata[16];

  assign clicint_18_attr_trig_18_we = addr_hit[19] & reg_we & !reg_error;
  assign clicint_18_attr_trig_18_wd = reg_wdata[18:17];

  assign clicint_18_attr_mode_18_we = addr_hit[19] & reg_we & !reg_error;
  assign clicint_18_attr_mode_18_wd = reg_wdata[23:22];

  assign clicint_18_ctl_18_we = addr_hit[19] & reg_we & !reg_error;
  assign clicint_18_ctl_18_wd = reg_wdata[31:24];

  assign clicint_19_ip_19_we = addr_hit[20] & reg_we & !reg_error;
  assign clicint_19_ip_19_wd = reg_wdata[0];

  assign clicint_19_ie_19_we = addr_hit[20] & reg_we & !reg_error;
  assign clicint_19_ie_19_wd = reg_wdata[7];

  assign clicint_19_attr_shv_19_we = addr_hit[20] & reg_we & !reg_error;
  assign clicint_19_attr_shv_19_wd = reg_wdata[16];

  assign clicint_19_attr_trig_19_we = addr_hit[20] & reg_we & !reg_error;
  assign clicint_19_attr_trig_19_wd = reg_wdata[18:17];

  assign clicint_19_attr_mode_19_we = addr_hit[20] & reg_we & !reg_error;
  assign clicint_19_attr_mode_19_wd = reg_wdata[23:22];

  assign clicint_19_ctl_19_we = addr_hit[20] & reg_we & !reg_error;
  assign clicint_19_ctl_19_wd = reg_wdata[31:24];

  assign clicint_20_ip_20_we = addr_hit[21] & reg_we & !reg_error;
  assign clicint_20_ip_20_wd = reg_wdata[0];

  assign clicint_20_ie_20_we = addr_hit[21] & reg_we & !reg_error;
  assign clicint_20_ie_20_wd = reg_wdata[7];

  assign clicint_20_attr_shv_20_we = addr_hit[21] & reg_we & !reg_error;
  assign clicint_20_attr_shv_20_wd = reg_wdata[16];

  assign clicint_20_attr_trig_20_we = addr_hit[21] & reg_we & !reg_error;
  assign clicint_20_attr_trig_20_wd = reg_wdata[18:17];

  assign clicint_20_attr_mode_20_we = addr_hit[21] & reg_we & !reg_error;
  assign clicint_20_attr_mode_20_wd = reg_wdata[23:22];

  assign clicint_20_ctl_20_we = addr_hit[21] & reg_we & !reg_error;
  assign clicint_20_ctl_20_wd = reg_wdata[31:24];

  assign clicint_21_ip_21_we = addr_hit[22] & reg_we & !reg_error;
  assign clicint_21_ip_21_wd = reg_wdata[0];

  assign clicint_21_ie_21_we = addr_hit[22] & reg_we & !reg_error;
  assign clicint_21_ie_21_wd = reg_wdata[7];

  assign clicint_21_attr_shv_21_we = addr_hit[22] & reg_we & !reg_error;
  assign clicint_21_attr_shv_21_wd = reg_wdata[16];

  assign clicint_21_attr_trig_21_we = addr_hit[22] & reg_we & !reg_error;
  assign clicint_21_attr_trig_21_wd = reg_wdata[18:17];

  assign clicint_21_attr_mode_21_we = addr_hit[22] & reg_we & !reg_error;
  assign clicint_21_attr_mode_21_wd = reg_wdata[23:22];

  assign clicint_21_ctl_21_we = addr_hit[22] & reg_we & !reg_error;
  assign clicint_21_ctl_21_wd = reg_wdata[31:24];

  assign clicint_22_ip_22_we = addr_hit[23] & reg_we & !reg_error;
  assign clicint_22_ip_22_wd = reg_wdata[0];

  assign clicint_22_ie_22_we = addr_hit[23] & reg_we & !reg_error;
  assign clicint_22_ie_22_wd = reg_wdata[7];

  assign clicint_22_attr_shv_22_we = addr_hit[23] & reg_we & !reg_error;
  assign clicint_22_attr_shv_22_wd = reg_wdata[16];

  assign clicint_22_attr_trig_22_we = addr_hit[23] & reg_we & !reg_error;
  assign clicint_22_attr_trig_22_wd = reg_wdata[18:17];

  assign clicint_22_attr_mode_22_we = addr_hit[23] & reg_we & !reg_error;
  assign clicint_22_attr_mode_22_wd = reg_wdata[23:22];

  assign clicint_22_ctl_22_we = addr_hit[23] & reg_we & !reg_error;
  assign clicint_22_ctl_22_wd = reg_wdata[31:24];

  assign clicint_23_ip_23_we = addr_hit[24] & reg_we & !reg_error;
  assign clicint_23_ip_23_wd = reg_wdata[0];

  assign clicint_23_ie_23_we = addr_hit[24] & reg_we & !reg_error;
  assign clicint_23_ie_23_wd = reg_wdata[7];

  assign clicint_23_attr_shv_23_we = addr_hit[24] & reg_we & !reg_error;
  assign clicint_23_attr_shv_23_wd = reg_wdata[16];

  assign clicint_23_attr_trig_23_we = addr_hit[24] & reg_we & !reg_error;
  assign clicint_23_attr_trig_23_wd = reg_wdata[18:17];

  assign clicint_23_attr_mode_23_we = addr_hit[24] & reg_we & !reg_error;
  assign clicint_23_attr_mode_23_wd = reg_wdata[23:22];

  assign clicint_23_ctl_23_we = addr_hit[24] & reg_we & !reg_error;
  assign clicint_23_ctl_23_wd = reg_wdata[31:24];

  assign clicint_24_ip_24_we = addr_hit[25] & reg_we & !reg_error;
  assign clicint_24_ip_24_wd = reg_wdata[0];

  assign clicint_24_ie_24_we = addr_hit[25] & reg_we & !reg_error;
  assign clicint_24_ie_24_wd = reg_wdata[7];

  assign clicint_24_attr_shv_24_we = addr_hit[25] & reg_we & !reg_error;
  assign clicint_24_attr_shv_24_wd = reg_wdata[16];

  assign clicint_24_attr_trig_24_we = addr_hit[25] & reg_we & !reg_error;
  assign clicint_24_attr_trig_24_wd = reg_wdata[18:17];

  assign clicint_24_attr_mode_24_we = addr_hit[25] & reg_we & !reg_error;
  assign clicint_24_attr_mode_24_wd = reg_wdata[23:22];

  assign clicint_24_ctl_24_we = addr_hit[25] & reg_we & !reg_error;
  assign clicint_24_ctl_24_wd = reg_wdata[31:24];

  assign clicint_25_ip_25_we = addr_hit[26] & reg_we & !reg_error;
  assign clicint_25_ip_25_wd = reg_wdata[0];

  assign clicint_25_ie_25_we = addr_hit[26] & reg_we & !reg_error;
  assign clicint_25_ie_25_wd = reg_wdata[7];

  assign clicint_25_attr_shv_25_we = addr_hit[26] & reg_we & !reg_error;
  assign clicint_25_attr_shv_25_wd = reg_wdata[16];

  assign clicint_25_attr_trig_25_we = addr_hit[26] & reg_we & !reg_error;
  assign clicint_25_attr_trig_25_wd = reg_wdata[18:17];

  assign clicint_25_attr_mode_25_we = addr_hit[26] & reg_we & !reg_error;
  assign clicint_25_attr_mode_25_wd = reg_wdata[23:22];

  assign clicint_25_ctl_25_we = addr_hit[26] & reg_we & !reg_error;
  assign clicint_25_ctl_25_wd = reg_wdata[31:24];

  assign clicint_26_ip_26_we = addr_hit[27] & reg_we & !reg_error;
  assign clicint_26_ip_26_wd = reg_wdata[0];

  assign clicint_26_ie_26_we = addr_hit[27] & reg_we & !reg_error;
  assign clicint_26_ie_26_wd = reg_wdata[7];

  assign clicint_26_attr_shv_26_we = addr_hit[27] & reg_we & !reg_error;
  assign clicint_26_attr_shv_26_wd = reg_wdata[16];

  assign clicint_26_attr_trig_26_we = addr_hit[27] & reg_we & !reg_error;
  assign clicint_26_attr_trig_26_wd = reg_wdata[18:17];

  assign clicint_26_attr_mode_26_we = addr_hit[27] & reg_we & !reg_error;
  assign clicint_26_attr_mode_26_wd = reg_wdata[23:22];

  assign clicint_26_ctl_26_we = addr_hit[27] & reg_we & !reg_error;
  assign clicint_26_ctl_26_wd = reg_wdata[31:24];

  assign clicint_27_ip_27_we = addr_hit[28] & reg_we & !reg_error;
  assign clicint_27_ip_27_wd = reg_wdata[0];

  assign clicint_27_ie_27_we = addr_hit[28] & reg_we & !reg_error;
  assign clicint_27_ie_27_wd = reg_wdata[7];

  assign clicint_27_attr_shv_27_we = addr_hit[28] & reg_we & !reg_error;
  assign clicint_27_attr_shv_27_wd = reg_wdata[16];

  assign clicint_27_attr_trig_27_we = addr_hit[28] & reg_we & !reg_error;
  assign clicint_27_attr_trig_27_wd = reg_wdata[18:17];

  assign clicint_27_attr_mode_27_we = addr_hit[28] & reg_we & !reg_error;
  assign clicint_27_attr_mode_27_wd = reg_wdata[23:22];

  assign clicint_27_ctl_27_we = addr_hit[28] & reg_we & !reg_error;
  assign clicint_27_ctl_27_wd = reg_wdata[31:24];

  assign clicint_28_ip_28_we = addr_hit[29] & reg_we & !reg_error;
  assign clicint_28_ip_28_wd = reg_wdata[0];

  assign clicint_28_ie_28_we = addr_hit[29] & reg_we & !reg_error;
  assign clicint_28_ie_28_wd = reg_wdata[7];

  assign clicint_28_attr_shv_28_we = addr_hit[29] & reg_we & !reg_error;
  assign clicint_28_attr_shv_28_wd = reg_wdata[16];

  assign clicint_28_attr_trig_28_we = addr_hit[29] & reg_we & !reg_error;
  assign clicint_28_attr_trig_28_wd = reg_wdata[18:17];

  assign clicint_28_attr_mode_28_we = addr_hit[29] & reg_we & !reg_error;
  assign clicint_28_attr_mode_28_wd = reg_wdata[23:22];

  assign clicint_28_ctl_28_we = addr_hit[29] & reg_we & !reg_error;
  assign clicint_28_ctl_28_wd = reg_wdata[31:24];

  assign clicint_29_ip_29_we = addr_hit[30] & reg_we & !reg_error;
  assign clicint_29_ip_29_wd = reg_wdata[0];

  assign clicint_29_ie_29_we = addr_hit[30] & reg_we & !reg_error;
  assign clicint_29_ie_29_wd = reg_wdata[7];

  assign clicint_29_attr_shv_29_we = addr_hit[30] & reg_we & !reg_error;
  assign clicint_29_attr_shv_29_wd = reg_wdata[16];

  assign clicint_29_attr_trig_29_we = addr_hit[30] & reg_we & !reg_error;
  assign clicint_29_attr_trig_29_wd = reg_wdata[18:17];

  assign clicint_29_attr_mode_29_we = addr_hit[30] & reg_we & !reg_error;
  assign clicint_29_attr_mode_29_wd = reg_wdata[23:22];

  assign clicint_29_ctl_29_we = addr_hit[30] & reg_we & !reg_error;
  assign clicint_29_ctl_29_wd = reg_wdata[31:24];

  assign clicint_30_ip_30_we = addr_hit[31] & reg_we & !reg_error;
  assign clicint_30_ip_30_wd = reg_wdata[0];

  assign clicint_30_ie_30_we = addr_hit[31] & reg_we & !reg_error;
  assign clicint_30_ie_30_wd = reg_wdata[7];

  assign clicint_30_attr_shv_30_we = addr_hit[31] & reg_we & !reg_error;
  assign clicint_30_attr_shv_30_wd = reg_wdata[16];

  assign clicint_30_attr_trig_30_we = addr_hit[31] & reg_we & !reg_error;
  assign clicint_30_attr_trig_30_wd = reg_wdata[18:17];

  assign clicint_30_attr_mode_30_we = addr_hit[31] & reg_we & !reg_error;
  assign clicint_30_attr_mode_30_wd = reg_wdata[23:22];

  assign clicint_30_ctl_30_we = addr_hit[31] & reg_we & !reg_error;
  assign clicint_30_ctl_30_wd = reg_wdata[31:24];

  assign clicint_31_ip_31_we = addr_hit[32] & reg_we & !reg_error;
  assign clicint_31_ip_31_wd = reg_wdata[0];

  assign clicint_31_ie_31_we = addr_hit[32] & reg_we & !reg_error;
  assign clicint_31_ie_31_wd = reg_wdata[7];

  assign clicint_31_attr_shv_31_we = addr_hit[32] & reg_we & !reg_error;
  assign clicint_31_attr_shv_31_wd = reg_wdata[16];

  assign clicint_31_attr_trig_31_we = addr_hit[32] & reg_we & !reg_error;
  assign clicint_31_attr_trig_31_wd = reg_wdata[18:17];

  assign clicint_31_attr_mode_31_we = addr_hit[32] & reg_we & !reg_error;
  assign clicint_31_attr_mode_31_wd = reg_wdata[23:22];

  assign clicint_31_ctl_31_we = addr_hit[32] & reg_we & !reg_error;
  assign clicint_31_ctl_31_wd = reg_wdata[31:24];

  assign clicint_32_ip_32_we = addr_hit[33] & reg_we & !reg_error;
  assign clicint_32_ip_32_wd = reg_wdata[0];

  assign clicint_32_ie_32_we = addr_hit[33] & reg_we & !reg_error;
  assign clicint_32_ie_32_wd = reg_wdata[7];

  assign clicint_32_attr_shv_32_we = addr_hit[33] & reg_we & !reg_error;
  assign clicint_32_attr_shv_32_wd = reg_wdata[16];

  assign clicint_32_attr_trig_32_we = addr_hit[33] & reg_we & !reg_error;
  assign clicint_32_attr_trig_32_wd = reg_wdata[18:17];

  assign clicint_32_attr_mode_32_we = addr_hit[33] & reg_we & !reg_error;
  assign clicint_32_attr_mode_32_wd = reg_wdata[23:22];

  assign clicint_32_ctl_32_we = addr_hit[33] & reg_we & !reg_error;
  assign clicint_32_ctl_32_wd = reg_wdata[31:24];

  assign clicint_33_ip_33_we = addr_hit[34] & reg_we & !reg_error;
  assign clicint_33_ip_33_wd = reg_wdata[0];

  assign clicint_33_ie_33_we = addr_hit[34] & reg_we & !reg_error;
  assign clicint_33_ie_33_wd = reg_wdata[7];

  assign clicint_33_attr_shv_33_we = addr_hit[34] & reg_we & !reg_error;
  assign clicint_33_attr_shv_33_wd = reg_wdata[16];

  assign clicint_33_attr_trig_33_we = addr_hit[34] & reg_we & !reg_error;
  assign clicint_33_attr_trig_33_wd = reg_wdata[18:17];

  assign clicint_33_attr_mode_33_we = addr_hit[34] & reg_we & !reg_error;
  assign clicint_33_attr_mode_33_wd = reg_wdata[23:22];

  assign clicint_33_ctl_33_we = addr_hit[34] & reg_we & !reg_error;
  assign clicint_33_ctl_33_wd = reg_wdata[31:24];

  assign clicint_34_ip_34_we = addr_hit[35] & reg_we & !reg_error;
  assign clicint_34_ip_34_wd = reg_wdata[0];

  assign clicint_34_ie_34_we = addr_hit[35] & reg_we & !reg_error;
  assign clicint_34_ie_34_wd = reg_wdata[7];

  assign clicint_34_attr_shv_34_we = addr_hit[35] & reg_we & !reg_error;
  assign clicint_34_attr_shv_34_wd = reg_wdata[16];

  assign clicint_34_attr_trig_34_we = addr_hit[35] & reg_we & !reg_error;
  assign clicint_34_attr_trig_34_wd = reg_wdata[18:17];

  assign clicint_34_attr_mode_34_we = addr_hit[35] & reg_we & !reg_error;
  assign clicint_34_attr_mode_34_wd = reg_wdata[23:22];

  assign clicint_34_ctl_34_we = addr_hit[35] & reg_we & !reg_error;
  assign clicint_34_ctl_34_wd = reg_wdata[31:24];

  assign clicint_35_ip_35_we = addr_hit[36] & reg_we & !reg_error;
  assign clicint_35_ip_35_wd = reg_wdata[0];

  assign clicint_35_ie_35_we = addr_hit[36] & reg_we & !reg_error;
  assign clicint_35_ie_35_wd = reg_wdata[7];

  assign clicint_35_attr_shv_35_we = addr_hit[36] & reg_we & !reg_error;
  assign clicint_35_attr_shv_35_wd = reg_wdata[16];

  assign clicint_35_attr_trig_35_we = addr_hit[36] & reg_we & !reg_error;
  assign clicint_35_attr_trig_35_wd = reg_wdata[18:17];

  assign clicint_35_attr_mode_35_we = addr_hit[36] & reg_we & !reg_error;
  assign clicint_35_attr_mode_35_wd = reg_wdata[23:22];

  assign clicint_35_ctl_35_we = addr_hit[36] & reg_we & !reg_error;
  assign clicint_35_ctl_35_wd = reg_wdata[31:24];

  assign clicint_36_ip_36_we = addr_hit[37] & reg_we & !reg_error;
  assign clicint_36_ip_36_wd = reg_wdata[0];

  assign clicint_36_ie_36_we = addr_hit[37] & reg_we & !reg_error;
  assign clicint_36_ie_36_wd = reg_wdata[7];

  assign clicint_36_attr_shv_36_we = addr_hit[37] & reg_we & !reg_error;
  assign clicint_36_attr_shv_36_wd = reg_wdata[16];

  assign clicint_36_attr_trig_36_we = addr_hit[37] & reg_we & !reg_error;
  assign clicint_36_attr_trig_36_wd = reg_wdata[18:17];

  assign clicint_36_attr_mode_36_we = addr_hit[37] & reg_we & !reg_error;
  assign clicint_36_attr_mode_36_wd = reg_wdata[23:22];

  assign clicint_36_ctl_36_we = addr_hit[37] & reg_we & !reg_error;
  assign clicint_36_ctl_36_wd = reg_wdata[31:24];

  assign clicint_37_ip_37_we = addr_hit[38] & reg_we & !reg_error;
  assign clicint_37_ip_37_wd = reg_wdata[0];

  assign clicint_37_ie_37_we = addr_hit[38] & reg_we & !reg_error;
  assign clicint_37_ie_37_wd = reg_wdata[7];

  assign clicint_37_attr_shv_37_we = addr_hit[38] & reg_we & !reg_error;
  assign clicint_37_attr_shv_37_wd = reg_wdata[16];

  assign clicint_37_attr_trig_37_we = addr_hit[38] & reg_we & !reg_error;
  assign clicint_37_attr_trig_37_wd = reg_wdata[18:17];

  assign clicint_37_attr_mode_37_we = addr_hit[38] & reg_we & !reg_error;
  assign clicint_37_attr_mode_37_wd = reg_wdata[23:22];

  assign clicint_37_ctl_37_we = addr_hit[38] & reg_we & !reg_error;
  assign clicint_37_ctl_37_wd = reg_wdata[31:24];

  assign clicint_38_ip_38_we = addr_hit[39] & reg_we & !reg_error;
  assign clicint_38_ip_38_wd = reg_wdata[0];

  assign clicint_38_ie_38_we = addr_hit[39] & reg_we & !reg_error;
  assign clicint_38_ie_38_wd = reg_wdata[7];

  assign clicint_38_attr_shv_38_we = addr_hit[39] & reg_we & !reg_error;
  assign clicint_38_attr_shv_38_wd = reg_wdata[16];

  assign clicint_38_attr_trig_38_we = addr_hit[39] & reg_we & !reg_error;
  assign clicint_38_attr_trig_38_wd = reg_wdata[18:17];

  assign clicint_38_attr_mode_38_we = addr_hit[39] & reg_we & !reg_error;
  assign clicint_38_attr_mode_38_wd = reg_wdata[23:22];

  assign clicint_38_ctl_38_we = addr_hit[39] & reg_we & !reg_error;
  assign clicint_38_ctl_38_wd = reg_wdata[31:24];

  assign clicint_39_ip_39_we = addr_hit[40] & reg_we & !reg_error;
  assign clicint_39_ip_39_wd = reg_wdata[0];

  assign clicint_39_ie_39_we = addr_hit[40] & reg_we & !reg_error;
  assign clicint_39_ie_39_wd = reg_wdata[7];

  assign clicint_39_attr_shv_39_we = addr_hit[40] & reg_we & !reg_error;
  assign clicint_39_attr_shv_39_wd = reg_wdata[16];

  assign clicint_39_attr_trig_39_we = addr_hit[40] & reg_we & !reg_error;
  assign clicint_39_attr_trig_39_wd = reg_wdata[18:17];

  assign clicint_39_attr_mode_39_we = addr_hit[40] & reg_we & !reg_error;
  assign clicint_39_attr_mode_39_wd = reg_wdata[23:22];

  assign clicint_39_ctl_39_we = addr_hit[40] & reg_we & !reg_error;
  assign clicint_39_ctl_39_wd = reg_wdata[31:24];

  assign clicint_40_ip_40_we = addr_hit[41] & reg_we & !reg_error;
  assign clicint_40_ip_40_wd = reg_wdata[0];

  assign clicint_40_ie_40_we = addr_hit[41] & reg_we & !reg_error;
  assign clicint_40_ie_40_wd = reg_wdata[7];

  assign clicint_40_attr_shv_40_we = addr_hit[41] & reg_we & !reg_error;
  assign clicint_40_attr_shv_40_wd = reg_wdata[16];

  assign clicint_40_attr_trig_40_we = addr_hit[41] & reg_we & !reg_error;
  assign clicint_40_attr_trig_40_wd = reg_wdata[18:17];

  assign clicint_40_attr_mode_40_we = addr_hit[41] & reg_we & !reg_error;
  assign clicint_40_attr_mode_40_wd = reg_wdata[23:22];

  assign clicint_40_ctl_40_we = addr_hit[41] & reg_we & !reg_error;
  assign clicint_40_ctl_40_wd = reg_wdata[31:24];

  assign clicint_41_ip_41_we = addr_hit[42] & reg_we & !reg_error;
  assign clicint_41_ip_41_wd = reg_wdata[0];

  assign clicint_41_ie_41_we = addr_hit[42] & reg_we & !reg_error;
  assign clicint_41_ie_41_wd = reg_wdata[7];

  assign clicint_41_attr_shv_41_we = addr_hit[42] & reg_we & !reg_error;
  assign clicint_41_attr_shv_41_wd = reg_wdata[16];

  assign clicint_41_attr_trig_41_we = addr_hit[42] & reg_we & !reg_error;
  assign clicint_41_attr_trig_41_wd = reg_wdata[18:17];

  assign clicint_41_attr_mode_41_we = addr_hit[42] & reg_we & !reg_error;
  assign clicint_41_attr_mode_41_wd = reg_wdata[23:22];

  assign clicint_41_ctl_41_we = addr_hit[42] & reg_we & !reg_error;
  assign clicint_41_ctl_41_wd = reg_wdata[31:24];

  assign clicint_42_ip_42_we = addr_hit[43] & reg_we & !reg_error;
  assign clicint_42_ip_42_wd = reg_wdata[0];

  assign clicint_42_ie_42_we = addr_hit[43] & reg_we & !reg_error;
  assign clicint_42_ie_42_wd = reg_wdata[7];

  assign clicint_42_attr_shv_42_we = addr_hit[43] & reg_we & !reg_error;
  assign clicint_42_attr_shv_42_wd = reg_wdata[16];

  assign clicint_42_attr_trig_42_we = addr_hit[43] & reg_we & !reg_error;
  assign clicint_42_attr_trig_42_wd = reg_wdata[18:17];

  assign clicint_42_attr_mode_42_we = addr_hit[43] & reg_we & !reg_error;
  assign clicint_42_attr_mode_42_wd = reg_wdata[23:22];

  assign clicint_42_ctl_42_we = addr_hit[43] & reg_we & !reg_error;
  assign clicint_42_ctl_42_wd = reg_wdata[31:24];

  assign clicint_43_ip_43_we = addr_hit[44] & reg_we & !reg_error;
  assign clicint_43_ip_43_wd = reg_wdata[0];

  assign clicint_43_ie_43_we = addr_hit[44] & reg_we & !reg_error;
  assign clicint_43_ie_43_wd = reg_wdata[7];

  assign clicint_43_attr_shv_43_we = addr_hit[44] & reg_we & !reg_error;
  assign clicint_43_attr_shv_43_wd = reg_wdata[16];

  assign clicint_43_attr_trig_43_we = addr_hit[44] & reg_we & !reg_error;
  assign clicint_43_attr_trig_43_wd = reg_wdata[18:17];

  assign clicint_43_attr_mode_43_we = addr_hit[44] & reg_we & !reg_error;
  assign clicint_43_attr_mode_43_wd = reg_wdata[23:22];

  assign clicint_43_ctl_43_we = addr_hit[44] & reg_we & !reg_error;
  assign clicint_43_ctl_43_wd = reg_wdata[31:24];

  assign clicint_44_ip_44_we = addr_hit[45] & reg_we & !reg_error;
  assign clicint_44_ip_44_wd = reg_wdata[0];

  assign clicint_44_ie_44_we = addr_hit[45] & reg_we & !reg_error;
  assign clicint_44_ie_44_wd = reg_wdata[7];

  assign clicint_44_attr_shv_44_we = addr_hit[45] & reg_we & !reg_error;
  assign clicint_44_attr_shv_44_wd = reg_wdata[16];

  assign clicint_44_attr_trig_44_we = addr_hit[45] & reg_we & !reg_error;
  assign clicint_44_attr_trig_44_wd = reg_wdata[18:17];

  assign clicint_44_attr_mode_44_we = addr_hit[45] & reg_we & !reg_error;
  assign clicint_44_attr_mode_44_wd = reg_wdata[23:22];

  assign clicint_44_ctl_44_we = addr_hit[45] & reg_we & !reg_error;
  assign clicint_44_ctl_44_wd = reg_wdata[31:24];

  assign clicint_45_ip_45_we = addr_hit[46] & reg_we & !reg_error;
  assign clicint_45_ip_45_wd = reg_wdata[0];

  assign clicint_45_ie_45_we = addr_hit[46] & reg_we & !reg_error;
  assign clicint_45_ie_45_wd = reg_wdata[7];

  assign clicint_45_attr_shv_45_we = addr_hit[46] & reg_we & !reg_error;
  assign clicint_45_attr_shv_45_wd = reg_wdata[16];

  assign clicint_45_attr_trig_45_we = addr_hit[46] & reg_we & !reg_error;
  assign clicint_45_attr_trig_45_wd = reg_wdata[18:17];

  assign clicint_45_attr_mode_45_we = addr_hit[46] & reg_we & !reg_error;
  assign clicint_45_attr_mode_45_wd = reg_wdata[23:22];

  assign clicint_45_ctl_45_we = addr_hit[46] & reg_we & !reg_error;
  assign clicint_45_ctl_45_wd = reg_wdata[31:24];

  assign clicint_46_ip_46_we = addr_hit[47] & reg_we & !reg_error;
  assign clicint_46_ip_46_wd = reg_wdata[0];

  assign clicint_46_ie_46_we = addr_hit[47] & reg_we & !reg_error;
  assign clicint_46_ie_46_wd = reg_wdata[7];

  assign clicint_46_attr_shv_46_we = addr_hit[47] & reg_we & !reg_error;
  assign clicint_46_attr_shv_46_wd = reg_wdata[16];

  assign clicint_46_attr_trig_46_we = addr_hit[47] & reg_we & !reg_error;
  assign clicint_46_attr_trig_46_wd = reg_wdata[18:17];

  assign clicint_46_attr_mode_46_we = addr_hit[47] & reg_we & !reg_error;
  assign clicint_46_attr_mode_46_wd = reg_wdata[23:22];

  assign clicint_46_ctl_46_we = addr_hit[47] & reg_we & !reg_error;
  assign clicint_46_ctl_46_wd = reg_wdata[31:24];

  assign clicint_47_ip_47_we = addr_hit[48] & reg_we & !reg_error;
  assign clicint_47_ip_47_wd = reg_wdata[0];

  assign clicint_47_ie_47_we = addr_hit[48] & reg_we & !reg_error;
  assign clicint_47_ie_47_wd = reg_wdata[7];

  assign clicint_47_attr_shv_47_we = addr_hit[48] & reg_we & !reg_error;
  assign clicint_47_attr_shv_47_wd = reg_wdata[16];

  assign clicint_47_attr_trig_47_we = addr_hit[48] & reg_we & !reg_error;
  assign clicint_47_attr_trig_47_wd = reg_wdata[18:17];

  assign clicint_47_attr_mode_47_we = addr_hit[48] & reg_we & !reg_error;
  assign clicint_47_attr_mode_47_wd = reg_wdata[23:22];

  assign clicint_47_ctl_47_we = addr_hit[48] & reg_we & !reg_error;
  assign clicint_47_ctl_47_wd = reg_wdata[31:24];

  assign clicint_48_ip_48_we = addr_hit[49] & reg_we & !reg_error;
  assign clicint_48_ip_48_wd = reg_wdata[0];

  assign clicint_48_ie_48_we = addr_hit[49] & reg_we & !reg_error;
  assign clicint_48_ie_48_wd = reg_wdata[7];

  assign clicint_48_attr_shv_48_we = addr_hit[49] & reg_we & !reg_error;
  assign clicint_48_attr_shv_48_wd = reg_wdata[16];

  assign clicint_48_attr_trig_48_we = addr_hit[49] & reg_we & !reg_error;
  assign clicint_48_attr_trig_48_wd = reg_wdata[18:17];

  assign clicint_48_attr_mode_48_we = addr_hit[49] & reg_we & !reg_error;
  assign clicint_48_attr_mode_48_wd = reg_wdata[23:22];

  assign clicint_48_ctl_48_we = addr_hit[49] & reg_we & !reg_error;
  assign clicint_48_ctl_48_wd = reg_wdata[31:24];

  assign clicint_49_ip_49_we = addr_hit[50] & reg_we & !reg_error;
  assign clicint_49_ip_49_wd = reg_wdata[0];

  assign clicint_49_ie_49_we = addr_hit[50] & reg_we & !reg_error;
  assign clicint_49_ie_49_wd = reg_wdata[7];

  assign clicint_49_attr_shv_49_we = addr_hit[50] & reg_we & !reg_error;
  assign clicint_49_attr_shv_49_wd = reg_wdata[16];

  assign clicint_49_attr_trig_49_we = addr_hit[50] & reg_we & !reg_error;
  assign clicint_49_attr_trig_49_wd = reg_wdata[18:17];

  assign clicint_49_attr_mode_49_we = addr_hit[50] & reg_we & !reg_error;
  assign clicint_49_attr_mode_49_wd = reg_wdata[23:22];

  assign clicint_49_ctl_49_we = addr_hit[50] & reg_we & !reg_error;
  assign clicint_49_ctl_49_wd = reg_wdata[31:24];

  assign clicint_50_ip_50_we = addr_hit[51] & reg_we & !reg_error;
  assign clicint_50_ip_50_wd = reg_wdata[0];

  assign clicint_50_ie_50_we = addr_hit[51] & reg_we & !reg_error;
  assign clicint_50_ie_50_wd = reg_wdata[7];

  assign clicint_50_attr_shv_50_we = addr_hit[51] & reg_we & !reg_error;
  assign clicint_50_attr_shv_50_wd = reg_wdata[16];

  assign clicint_50_attr_trig_50_we = addr_hit[51] & reg_we & !reg_error;
  assign clicint_50_attr_trig_50_wd = reg_wdata[18:17];

  assign clicint_50_attr_mode_50_we = addr_hit[51] & reg_we & !reg_error;
  assign clicint_50_attr_mode_50_wd = reg_wdata[23:22];

  assign clicint_50_ctl_50_we = addr_hit[51] & reg_we & !reg_error;
  assign clicint_50_ctl_50_wd = reg_wdata[31:24];

  assign clicint_51_ip_51_we = addr_hit[52] & reg_we & !reg_error;
  assign clicint_51_ip_51_wd = reg_wdata[0];

  assign clicint_51_ie_51_we = addr_hit[52] & reg_we & !reg_error;
  assign clicint_51_ie_51_wd = reg_wdata[7];

  assign clicint_51_attr_shv_51_we = addr_hit[52] & reg_we & !reg_error;
  assign clicint_51_attr_shv_51_wd = reg_wdata[16];

  assign clicint_51_attr_trig_51_we = addr_hit[52] & reg_we & !reg_error;
  assign clicint_51_attr_trig_51_wd = reg_wdata[18:17];

  assign clicint_51_attr_mode_51_we = addr_hit[52] & reg_we & !reg_error;
  assign clicint_51_attr_mode_51_wd = reg_wdata[23:22];

  assign clicint_51_ctl_51_we = addr_hit[52] & reg_we & !reg_error;
  assign clicint_51_ctl_51_wd = reg_wdata[31:24];

  assign clicint_52_ip_52_we = addr_hit[53] & reg_we & !reg_error;
  assign clicint_52_ip_52_wd = reg_wdata[0];

  assign clicint_52_ie_52_we = addr_hit[53] & reg_we & !reg_error;
  assign clicint_52_ie_52_wd = reg_wdata[7];

  assign clicint_52_attr_shv_52_we = addr_hit[53] & reg_we & !reg_error;
  assign clicint_52_attr_shv_52_wd = reg_wdata[16];

  assign clicint_52_attr_trig_52_we = addr_hit[53] & reg_we & !reg_error;
  assign clicint_52_attr_trig_52_wd = reg_wdata[18:17];

  assign clicint_52_attr_mode_52_we = addr_hit[53] & reg_we & !reg_error;
  assign clicint_52_attr_mode_52_wd = reg_wdata[23:22];

  assign clicint_52_ctl_52_we = addr_hit[53] & reg_we & !reg_error;
  assign clicint_52_ctl_52_wd = reg_wdata[31:24];

  assign clicint_53_ip_53_we = addr_hit[54] & reg_we & !reg_error;
  assign clicint_53_ip_53_wd = reg_wdata[0];

  assign clicint_53_ie_53_we = addr_hit[54] & reg_we & !reg_error;
  assign clicint_53_ie_53_wd = reg_wdata[7];

  assign clicint_53_attr_shv_53_we = addr_hit[54] & reg_we & !reg_error;
  assign clicint_53_attr_shv_53_wd = reg_wdata[16];

  assign clicint_53_attr_trig_53_we = addr_hit[54] & reg_we & !reg_error;
  assign clicint_53_attr_trig_53_wd = reg_wdata[18:17];

  assign clicint_53_attr_mode_53_we = addr_hit[54] & reg_we & !reg_error;
  assign clicint_53_attr_mode_53_wd = reg_wdata[23:22];

  assign clicint_53_ctl_53_we = addr_hit[54] & reg_we & !reg_error;
  assign clicint_53_ctl_53_wd = reg_wdata[31:24];

  assign clicint_54_ip_54_we = addr_hit[55] & reg_we & !reg_error;
  assign clicint_54_ip_54_wd = reg_wdata[0];

  assign clicint_54_ie_54_we = addr_hit[55] & reg_we & !reg_error;
  assign clicint_54_ie_54_wd = reg_wdata[7];

  assign clicint_54_attr_shv_54_we = addr_hit[55] & reg_we & !reg_error;
  assign clicint_54_attr_shv_54_wd = reg_wdata[16];

  assign clicint_54_attr_trig_54_we = addr_hit[55] & reg_we & !reg_error;
  assign clicint_54_attr_trig_54_wd = reg_wdata[18:17];

  assign clicint_54_attr_mode_54_we = addr_hit[55] & reg_we & !reg_error;
  assign clicint_54_attr_mode_54_wd = reg_wdata[23:22];

  assign clicint_54_ctl_54_we = addr_hit[55] & reg_we & !reg_error;
  assign clicint_54_ctl_54_wd = reg_wdata[31:24];

  assign clicint_55_ip_55_we = addr_hit[56] & reg_we & !reg_error;
  assign clicint_55_ip_55_wd = reg_wdata[0];

  assign clicint_55_ie_55_we = addr_hit[56] & reg_we & !reg_error;
  assign clicint_55_ie_55_wd = reg_wdata[7];

  assign clicint_55_attr_shv_55_we = addr_hit[56] & reg_we & !reg_error;
  assign clicint_55_attr_shv_55_wd = reg_wdata[16];

  assign clicint_55_attr_trig_55_we = addr_hit[56] & reg_we & !reg_error;
  assign clicint_55_attr_trig_55_wd = reg_wdata[18:17];

  assign clicint_55_attr_mode_55_we = addr_hit[56] & reg_we & !reg_error;
  assign clicint_55_attr_mode_55_wd = reg_wdata[23:22];

  assign clicint_55_ctl_55_we = addr_hit[56] & reg_we & !reg_error;
  assign clicint_55_ctl_55_wd = reg_wdata[31:24];

  assign clicint_56_ip_56_we = addr_hit[57] & reg_we & !reg_error;
  assign clicint_56_ip_56_wd = reg_wdata[0];

  assign clicint_56_ie_56_we = addr_hit[57] & reg_we & !reg_error;
  assign clicint_56_ie_56_wd = reg_wdata[7];

  assign clicint_56_attr_shv_56_we = addr_hit[57] & reg_we & !reg_error;
  assign clicint_56_attr_shv_56_wd = reg_wdata[16];

  assign clicint_56_attr_trig_56_we = addr_hit[57] & reg_we & !reg_error;
  assign clicint_56_attr_trig_56_wd = reg_wdata[18:17];

  assign clicint_56_attr_mode_56_we = addr_hit[57] & reg_we & !reg_error;
  assign clicint_56_attr_mode_56_wd = reg_wdata[23:22];

  assign clicint_56_ctl_56_we = addr_hit[57] & reg_we & !reg_error;
  assign clicint_56_ctl_56_wd = reg_wdata[31:24];

  assign clicint_57_ip_57_we = addr_hit[58] & reg_we & !reg_error;
  assign clicint_57_ip_57_wd = reg_wdata[0];

  assign clicint_57_ie_57_we = addr_hit[58] & reg_we & !reg_error;
  assign clicint_57_ie_57_wd = reg_wdata[7];

  assign clicint_57_attr_shv_57_we = addr_hit[58] & reg_we & !reg_error;
  assign clicint_57_attr_shv_57_wd = reg_wdata[16];

  assign clicint_57_attr_trig_57_we = addr_hit[58] & reg_we & !reg_error;
  assign clicint_57_attr_trig_57_wd = reg_wdata[18:17];

  assign clicint_57_attr_mode_57_we = addr_hit[58] & reg_we & !reg_error;
  assign clicint_57_attr_mode_57_wd = reg_wdata[23:22];

  assign clicint_57_ctl_57_we = addr_hit[58] & reg_we & !reg_error;
  assign clicint_57_ctl_57_wd = reg_wdata[31:24];

  assign clicint_58_ip_58_we = addr_hit[59] & reg_we & !reg_error;
  assign clicint_58_ip_58_wd = reg_wdata[0];

  assign clicint_58_ie_58_we = addr_hit[59] & reg_we & !reg_error;
  assign clicint_58_ie_58_wd = reg_wdata[7];

  assign clicint_58_attr_shv_58_we = addr_hit[59] & reg_we & !reg_error;
  assign clicint_58_attr_shv_58_wd = reg_wdata[16];

  assign clicint_58_attr_trig_58_we = addr_hit[59] & reg_we & !reg_error;
  assign clicint_58_attr_trig_58_wd = reg_wdata[18:17];

  assign clicint_58_attr_mode_58_we = addr_hit[59] & reg_we & !reg_error;
  assign clicint_58_attr_mode_58_wd = reg_wdata[23:22];

  assign clicint_58_ctl_58_we = addr_hit[59] & reg_we & !reg_error;
  assign clicint_58_ctl_58_wd = reg_wdata[31:24];

  assign clicint_59_ip_59_we = addr_hit[60] & reg_we & !reg_error;
  assign clicint_59_ip_59_wd = reg_wdata[0];

  assign clicint_59_ie_59_we = addr_hit[60] & reg_we & !reg_error;
  assign clicint_59_ie_59_wd = reg_wdata[7];

  assign clicint_59_attr_shv_59_we = addr_hit[60] & reg_we & !reg_error;
  assign clicint_59_attr_shv_59_wd = reg_wdata[16];

  assign clicint_59_attr_trig_59_we = addr_hit[60] & reg_we & !reg_error;
  assign clicint_59_attr_trig_59_wd = reg_wdata[18:17];

  assign clicint_59_attr_mode_59_we = addr_hit[60] & reg_we & !reg_error;
  assign clicint_59_attr_mode_59_wd = reg_wdata[23:22];

  assign clicint_59_ctl_59_we = addr_hit[60] & reg_we & !reg_error;
  assign clicint_59_ctl_59_wd = reg_wdata[31:24];

  assign clicint_60_ip_60_we = addr_hit[61] & reg_we & !reg_error;
  assign clicint_60_ip_60_wd = reg_wdata[0];

  assign clicint_60_ie_60_we = addr_hit[61] & reg_we & !reg_error;
  assign clicint_60_ie_60_wd = reg_wdata[7];

  assign clicint_60_attr_shv_60_we = addr_hit[61] & reg_we & !reg_error;
  assign clicint_60_attr_shv_60_wd = reg_wdata[16];

  assign clicint_60_attr_trig_60_we = addr_hit[61] & reg_we & !reg_error;
  assign clicint_60_attr_trig_60_wd = reg_wdata[18:17];

  assign clicint_60_attr_mode_60_we = addr_hit[61] & reg_we & !reg_error;
  assign clicint_60_attr_mode_60_wd = reg_wdata[23:22];

  assign clicint_60_ctl_60_we = addr_hit[61] & reg_we & !reg_error;
  assign clicint_60_ctl_60_wd = reg_wdata[31:24];

  assign clicint_61_ip_61_we = addr_hit[62] & reg_we & !reg_error;
  assign clicint_61_ip_61_wd = reg_wdata[0];

  assign clicint_61_ie_61_we = addr_hit[62] & reg_we & !reg_error;
  assign clicint_61_ie_61_wd = reg_wdata[7];

  assign clicint_61_attr_shv_61_we = addr_hit[62] & reg_we & !reg_error;
  assign clicint_61_attr_shv_61_wd = reg_wdata[16];

  assign clicint_61_attr_trig_61_we = addr_hit[62] & reg_we & !reg_error;
  assign clicint_61_attr_trig_61_wd = reg_wdata[18:17];

  assign clicint_61_attr_mode_61_we = addr_hit[62] & reg_we & !reg_error;
  assign clicint_61_attr_mode_61_wd = reg_wdata[23:22];

  assign clicint_61_ctl_61_we = addr_hit[62] & reg_we & !reg_error;
  assign clicint_61_ctl_61_wd = reg_wdata[31:24];

  assign clicint_62_ip_62_we = addr_hit[63] & reg_we & !reg_error;
  assign clicint_62_ip_62_wd = reg_wdata[0];

  assign clicint_62_ie_62_we = addr_hit[63] & reg_we & !reg_error;
  assign clicint_62_ie_62_wd = reg_wdata[7];

  assign clicint_62_attr_shv_62_we = addr_hit[63] & reg_we & !reg_error;
  assign clicint_62_attr_shv_62_wd = reg_wdata[16];

  assign clicint_62_attr_trig_62_we = addr_hit[63] & reg_we & !reg_error;
  assign clicint_62_attr_trig_62_wd = reg_wdata[18:17];

  assign clicint_62_attr_mode_62_we = addr_hit[63] & reg_we & !reg_error;
  assign clicint_62_attr_mode_62_wd = reg_wdata[23:22];

  assign clicint_62_ctl_62_we = addr_hit[63] & reg_we & !reg_error;
  assign clicint_62_ctl_62_wd = reg_wdata[31:24];

  assign clicint_63_ip_63_we = addr_hit[64] & reg_we & !reg_error;
  assign clicint_63_ip_63_wd = reg_wdata[0];

  assign clicint_63_ie_63_we = addr_hit[64] & reg_we & !reg_error;
  assign clicint_63_ie_63_wd = reg_wdata[7];

  assign clicint_63_attr_shv_63_we = addr_hit[64] & reg_we & !reg_error;
  assign clicint_63_attr_shv_63_wd = reg_wdata[16];

  assign clicint_63_attr_trig_63_we = addr_hit[64] & reg_we & !reg_error;
  assign clicint_63_attr_trig_63_wd = reg_wdata[18:17];

  assign clicint_63_attr_mode_63_we = addr_hit[64] & reg_we & !reg_error;
  assign clicint_63_attr_mode_63_wd = reg_wdata[23:22];

  assign clicint_63_ctl_63_we = addr_hit[64] & reg_we & !reg_error;
  assign clicint_63_ctl_63_wd = reg_wdata[31:24];

  assign clicint_64_ip_64_we = addr_hit[65] & reg_we & !reg_error;
  assign clicint_64_ip_64_wd = reg_wdata[0];

  assign clicint_64_ie_64_we = addr_hit[65] & reg_we & !reg_error;
  assign clicint_64_ie_64_wd = reg_wdata[7];

  assign clicint_64_attr_shv_64_we = addr_hit[65] & reg_we & !reg_error;
  assign clicint_64_attr_shv_64_wd = reg_wdata[16];

  assign clicint_64_attr_trig_64_we = addr_hit[65] & reg_we & !reg_error;
  assign clicint_64_attr_trig_64_wd = reg_wdata[18:17];

  assign clicint_64_attr_mode_64_we = addr_hit[65] & reg_we & !reg_error;
  assign clicint_64_attr_mode_64_wd = reg_wdata[23:22];

  assign clicint_64_ctl_64_we = addr_hit[65] & reg_we & !reg_error;
  assign clicint_64_ctl_64_wd = reg_wdata[31:24];

  assign clicint_65_ip_65_we = addr_hit[66] & reg_we & !reg_error;
  assign clicint_65_ip_65_wd = reg_wdata[0];

  assign clicint_65_ie_65_we = addr_hit[66] & reg_we & !reg_error;
  assign clicint_65_ie_65_wd = reg_wdata[7];

  assign clicint_65_attr_shv_65_we = addr_hit[66] & reg_we & !reg_error;
  assign clicint_65_attr_shv_65_wd = reg_wdata[16];

  assign clicint_65_attr_trig_65_we = addr_hit[66] & reg_we & !reg_error;
  assign clicint_65_attr_trig_65_wd = reg_wdata[18:17];

  assign clicint_65_attr_mode_65_we = addr_hit[66] & reg_we & !reg_error;
  assign clicint_65_attr_mode_65_wd = reg_wdata[23:22];

  assign clicint_65_ctl_65_we = addr_hit[66] & reg_we & !reg_error;
  assign clicint_65_ctl_65_wd = reg_wdata[31:24];

  assign clicint_66_ip_66_we = addr_hit[67] & reg_we & !reg_error;
  assign clicint_66_ip_66_wd = reg_wdata[0];

  assign clicint_66_ie_66_we = addr_hit[67] & reg_we & !reg_error;
  assign clicint_66_ie_66_wd = reg_wdata[7];

  assign clicint_66_attr_shv_66_we = addr_hit[67] & reg_we & !reg_error;
  assign clicint_66_attr_shv_66_wd = reg_wdata[16];

  assign clicint_66_attr_trig_66_we = addr_hit[67] & reg_we & !reg_error;
  assign clicint_66_attr_trig_66_wd = reg_wdata[18:17];

  assign clicint_66_attr_mode_66_we = addr_hit[67] & reg_we & !reg_error;
  assign clicint_66_attr_mode_66_wd = reg_wdata[23:22];

  assign clicint_66_ctl_66_we = addr_hit[67] & reg_we & !reg_error;
  assign clicint_66_ctl_66_wd = reg_wdata[31:24];

  assign clicint_67_ip_67_we = addr_hit[68] & reg_we & !reg_error;
  assign clicint_67_ip_67_wd = reg_wdata[0];

  assign clicint_67_ie_67_we = addr_hit[68] & reg_we & !reg_error;
  assign clicint_67_ie_67_wd = reg_wdata[7];

  assign clicint_67_attr_shv_67_we = addr_hit[68] & reg_we & !reg_error;
  assign clicint_67_attr_shv_67_wd = reg_wdata[16];

  assign clicint_67_attr_trig_67_we = addr_hit[68] & reg_we & !reg_error;
  assign clicint_67_attr_trig_67_wd = reg_wdata[18:17];

  assign clicint_67_attr_mode_67_we = addr_hit[68] & reg_we & !reg_error;
  assign clicint_67_attr_mode_67_wd = reg_wdata[23:22];

  assign clicint_67_ctl_67_we = addr_hit[68] & reg_we & !reg_error;
  assign clicint_67_ctl_67_wd = reg_wdata[31:24];

  assign clicint_68_ip_68_we = addr_hit[69] & reg_we & !reg_error;
  assign clicint_68_ip_68_wd = reg_wdata[0];

  assign clicint_68_ie_68_we = addr_hit[69] & reg_we & !reg_error;
  assign clicint_68_ie_68_wd = reg_wdata[7];

  assign clicint_68_attr_shv_68_we = addr_hit[69] & reg_we & !reg_error;
  assign clicint_68_attr_shv_68_wd = reg_wdata[16];

  assign clicint_68_attr_trig_68_we = addr_hit[69] & reg_we & !reg_error;
  assign clicint_68_attr_trig_68_wd = reg_wdata[18:17];

  assign clicint_68_attr_mode_68_we = addr_hit[69] & reg_we & !reg_error;
  assign clicint_68_attr_mode_68_wd = reg_wdata[23:22];

  assign clicint_68_ctl_68_we = addr_hit[69] & reg_we & !reg_error;
  assign clicint_68_ctl_68_wd = reg_wdata[31:24];

  assign clicint_69_ip_69_we = addr_hit[70] & reg_we & !reg_error;
  assign clicint_69_ip_69_wd = reg_wdata[0];

  assign clicint_69_ie_69_we = addr_hit[70] & reg_we & !reg_error;
  assign clicint_69_ie_69_wd = reg_wdata[7];

  assign clicint_69_attr_shv_69_we = addr_hit[70] & reg_we & !reg_error;
  assign clicint_69_attr_shv_69_wd = reg_wdata[16];

  assign clicint_69_attr_trig_69_we = addr_hit[70] & reg_we & !reg_error;
  assign clicint_69_attr_trig_69_wd = reg_wdata[18:17];

  assign clicint_69_attr_mode_69_we = addr_hit[70] & reg_we & !reg_error;
  assign clicint_69_attr_mode_69_wd = reg_wdata[23:22];

  assign clicint_69_ctl_69_we = addr_hit[70] & reg_we & !reg_error;
  assign clicint_69_ctl_69_wd = reg_wdata[31:24];

  assign clicint_70_ip_70_we = addr_hit[71] & reg_we & !reg_error;
  assign clicint_70_ip_70_wd = reg_wdata[0];

  assign clicint_70_ie_70_we = addr_hit[71] & reg_we & !reg_error;
  assign clicint_70_ie_70_wd = reg_wdata[7];

  assign clicint_70_attr_shv_70_we = addr_hit[71] & reg_we & !reg_error;
  assign clicint_70_attr_shv_70_wd = reg_wdata[16];

  assign clicint_70_attr_trig_70_we = addr_hit[71] & reg_we & !reg_error;
  assign clicint_70_attr_trig_70_wd = reg_wdata[18:17];

  assign clicint_70_attr_mode_70_we = addr_hit[71] & reg_we & !reg_error;
  assign clicint_70_attr_mode_70_wd = reg_wdata[23:22];

  assign clicint_70_ctl_70_we = addr_hit[71] & reg_we & !reg_error;
  assign clicint_70_ctl_70_wd = reg_wdata[31:24];

  assign clicint_71_ip_71_we = addr_hit[72] & reg_we & !reg_error;
  assign clicint_71_ip_71_wd = reg_wdata[0];

  assign clicint_71_ie_71_we = addr_hit[72] & reg_we & !reg_error;
  assign clicint_71_ie_71_wd = reg_wdata[7];

  assign clicint_71_attr_shv_71_we = addr_hit[72] & reg_we & !reg_error;
  assign clicint_71_attr_shv_71_wd = reg_wdata[16];

  assign clicint_71_attr_trig_71_we = addr_hit[72] & reg_we & !reg_error;
  assign clicint_71_attr_trig_71_wd = reg_wdata[18:17];

  assign clicint_71_attr_mode_71_we = addr_hit[72] & reg_we & !reg_error;
  assign clicint_71_attr_mode_71_wd = reg_wdata[23:22];

  assign clicint_71_ctl_71_we = addr_hit[72] & reg_we & !reg_error;
  assign clicint_71_ctl_71_wd = reg_wdata[31:24];

  assign clicint_72_ip_72_we = addr_hit[73] & reg_we & !reg_error;
  assign clicint_72_ip_72_wd = reg_wdata[0];

  assign clicint_72_ie_72_we = addr_hit[73] & reg_we & !reg_error;
  assign clicint_72_ie_72_wd = reg_wdata[7];

  assign clicint_72_attr_shv_72_we = addr_hit[73] & reg_we & !reg_error;
  assign clicint_72_attr_shv_72_wd = reg_wdata[16];

  assign clicint_72_attr_trig_72_we = addr_hit[73] & reg_we & !reg_error;
  assign clicint_72_attr_trig_72_wd = reg_wdata[18:17];

  assign clicint_72_attr_mode_72_we = addr_hit[73] & reg_we & !reg_error;
  assign clicint_72_attr_mode_72_wd = reg_wdata[23:22];

  assign clicint_72_ctl_72_we = addr_hit[73] & reg_we & !reg_error;
  assign clicint_72_ctl_72_wd = reg_wdata[31:24];

  assign clicint_73_ip_73_we = addr_hit[74] & reg_we & !reg_error;
  assign clicint_73_ip_73_wd = reg_wdata[0];

  assign clicint_73_ie_73_we = addr_hit[74] & reg_we & !reg_error;
  assign clicint_73_ie_73_wd = reg_wdata[7];

  assign clicint_73_attr_shv_73_we = addr_hit[74] & reg_we & !reg_error;
  assign clicint_73_attr_shv_73_wd = reg_wdata[16];

  assign clicint_73_attr_trig_73_we = addr_hit[74] & reg_we & !reg_error;
  assign clicint_73_attr_trig_73_wd = reg_wdata[18:17];

  assign clicint_73_attr_mode_73_we = addr_hit[74] & reg_we & !reg_error;
  assign clicint_73_attr_mode_73_wd = reg_wdata[23:22];

  assign clicint_73_ctl_73_we = addr_hit[74] & reg_we & !reg_error;
  assign clicint_73_ctl_73_wd = reg_wdata[31:24];

  assign clicint_74_ip_74_we = addr_hit[75] & reg_we & !reg_error;
  assign clicint_74_ip_74_wd = reg_wdata[0];

  assign clicint_74_ie_74_we = addr_hit[75] & reg_we & !reg_error;
  assign clicint_74_ie_74_wd = reg_wdata[7];

  assign clicint_74_attr_shv_74_we = addr_hit[75] & reg_we & !reg_error;
  assign clicint_74_attr_shv_74_wd = reg_wdata[16];

  assign clicint_74_attr_trig_74_we = addr_hit[75] & reg_we & !reg_error;
  assign clicint_74_attr_trig_74_wd = reg_wdata[18:17];

  assign clicint_74_attr_mode_74_we = addr_hit[75] & reg_we & !reg_error;
  assign clicint_74_attr_mode_74_wd = reg_wdata[23:22];

  assign clicint_74_ctl_74_we = addr_hit[75] & reg_we & !reg_error;
  assign clicint_74_ctl_74_wd = reg_wdata[31:24];

  assign clicint_75_ip_75_we = addr_hit[76] & reg_we & !reg_error;
  assign clicint_75_ip_75_wd = reg_wdata[0];

  assign clicint_75_ie_75_we = addr_hit[76] & reg_we & !reg_error;
  assign clicint_75_ie_75_wd = reg_wdata[7];

  assign clicint_75_attr_shv_75_we = addr_hit[76] & reg_we & !reg_error;
  assign clicint_75_attr_shv_75_wd = reg_wdata[16];

  assign clicint_75_attr_trig_75_we = addr_hit[76] & reg_we & !reg_error;
  assign clicint_75_attr_trig_75_wd = reg_wdata[18:17];

  assign clicint_75_attr_mode_75_we = addr_hit[76] & reg_we & !reg_error;
  assign clicint_75_attr_mode_75_wd = reg_wdata[23:22];

  assign clicint_75_ctl_75_we = addr_hit[76] & reg_we & !reg_error;
  assign clicint_75_ctl_75_wd = reg_wdata[31:24];

  assign clicint_76_ip_76_we = addr_hit[77] & reg_we & !reg_error;
  assign clicint_76_ip_76_wd = reg_wdata[0];

  assign clicint_76_ie_76_we = addr_hit[77] & reg_we & !reg_error;
  assign clicint_76_ie_76_wd = reg_wdata[7];

  assign clicint_76_attr_shv_76_we = addr_hit[77] & reg_we & !reg_error;
  assign clicint_76_attr_shv_76_wd = reg_wdata[16];

  assign clicint_76_attr_trig_76_we = addr_hit[77] & reg_we & !reg_error;
  assign clicint_76_attr_trig_76_wd = reg_wdata[18:17];

  assign clicint_76_attr_mode_76_we = addr_hit[77] & reg_we & !reg_error;
  assign clicint_76_attr_mode_76_wd = reg_wdata[23:22];

  assign clicint_76_ctl_76_we = addr_hit[77] & reg_we & !reg_error;
  assign clicint_76_ctl_76_wd = reg_wdata[31:24];

  assign clicint_77_ip_77_we = addr_hit[78] & reg_we & !reg_error;
  assign clicint_77_ip_77_wd = reg_wdata[0];

  assign clicint_77_ie_77_we = addr_hit[78] & reg_we & !reg_error;
  assign clicint_77_ie_77_wd = reg_wdata[7];

  assign clicint_77_attr_shv_77_we = addr_hit[78] & reg_we & !reg_error;
  assign clicint_77_attr_shv_77_wd = reg_wdata[16];

  assign clicint_77_attr_trig_77_we = addr_hit[78] & reg_we & !reg_error;
  assign clicint_77_attr_trig_77_wd = reg_wdata[18:17];

  assign clicint_77_attr_mode_77_we = addr_hit[78] & reg_we & !reg_error;
  assign clicint_77_attr_mode_77_wd = reg_wdata[23:22];

  assign clicint_77_ctl_77_we = addr_hit[78] & reg_we & !reg_error;
  assign clicint_77_ctl_77_wd = reg_wdata[31:24];

  assign clicint_78_ip_78_we = addr_hit[79] & reg_we & !reg_error;
  assign clicint_78_ip_78_wd = reg_wdata[0];

  assign clicint_78_ie_78_we = addr_hit[79] & reg_we & !reg_error;
  assign clicint_78_ie_78_wd = reg_wdata[7];

  assign clicint_78_attr_shv_78_we = addr_hit[79] & reg_we & !reg_error;
  assign clicint_78_attr_shv_78_wd = reg_wdata[16];

  assign clicint_78_attr_trig_78_we = addr_hit[79] & reg_we & !reg_error;
  assign clicint_78_attr_trig_78_wd = reg_wdata[18:17];

  assign clicint_78_attr_mode_78_we = addr_hit[79] & reg_we & !reg_error;
  assign clicint_78_attr_mode_78_wd = reg_wdata[23:22];

  assign clicint_78_ctl_78_we = addr_hit[79] & reg_we & !reg_error;
  assign clicint_78_ctl_78_wd = reg_wdata[31:24];

  assign clicint_79_ip_79_we = addr_hit[80] & reg_we & !reg_error;
  assign clicint_79_ip_79_wd = reg_wdata[0];

  assign clicint_79_ie_79_we = addr_hit[80] & reg_we & !reg_error;
  assign clicint_79_ie_79_wd = reg_wdata[7];

  assign clicint_79_attr_shv_79_we = addr_hit[80] & reg_we & !reg_error;
  assign clicint_79_attr_shv_79_wd = reg_wdata[16];

  assign clicint_79_attr_trig_79_we = addr_hit[80] & reg_we & !reg_error;
  assign clicint_79_attr_trig_79_wd = reg_wdata[18:17];

  assign clicint_79_attr_mode_79_we = addr_hit[80] & reg_we & !reg_error;
  assign clicint_79_attr_mode_79_wd = reg_wdata[23:22];

  assign clicint_79_ctl_79_we = addr_hit[80] & reg_we & !reg_error;
  assign clicint_79_ctl_79_wd = reg_wdata[31:24];

  assign clicint_80_ip_80_we = addr_hit[81] & reg_we & !reg_error;
  assign clicint_80_ip_80_wd = reg_wdata[0];

  assign clicint_80_ie_80_we = addr_hit[81] & reg_we & !reg_error;
  assign clicint_80_ie_80_wd = reg_wdata[7];

  assign clicint_80_attr_shv_80_we = addr_hit[81] & reg_we & !reg_error;
  assign clicint_80_attr_shv_80_wd = reg_wdata[16];

  assign clicint_80_attr_trig_80_we = addr_hit[81] & reg_we & !reg_error;
  assign clicint_80_attr_trig_80_wd = reg_wdata[18:17];

  assign clicint_80_attr_mode_80_we = addr_hit[81] & reg_we & !reg_error;
  assign clicint_80_attr_mode_80_wd = reg_wdata[23:22];

  assign clicint_80_ctl_80_we = addr_hit[81] & reg_we & !reg_error;
  assign clicint_80_ctl_80_wd = reg_wdata[31:24];

  assign clicint_81_ip_81_we = addr_hit[82] & reg_we & !reg_error;
  assign clicint_81_ip_81_wd = reg_wdata[0];

  assign clicint_81_ie_81_we = addr_hit[82] & reg_we & !reg_error;
  assign clicint_81_ie_81_wd = reg_wdata[7];

  assign clicint_81_attr_shv_81_we = addr_hit[82] & reg_we & !reg_error;
  assign clicint_81_attr_shv_81_wd = reg_wdata[16];

  assign clicint_81_attr_trig_81_we = addr_hit[82] & reg_we & !reg_error;
  assign clicint_81_attr_trig_81_wd = reg_wdata[18:17];

  assign clicint_81_attr_mode_81_we = addr_hit[82] & reg_we & !reg_error;
  assign clicint_81_attr_mode_81_wd = reg_wdata[23:22];

  assign clicint_81_ctl_81_we = addr_hit[82] & reg_we & !reg_error;
  assign clicint_81_ctl_81_wd = reg_wdata[31:24];

  assign clicint_82_ip_82_we = addr_hit[83] & reg_we & !reg_error;
  assign clicint_82_ip_82_wd = reg_wdata[0];

  assign clicint_82_ie_82_we = addr_hit[83] & reg_we & !reg_error;
  assign clicint_82_ie_82_wd = reg_wdata[7];

  assign clicint_82_attr_shv_82_we = addr_hit[83] & reg_we & !reg_error;
  assign clicint_82_attr_shv_82_wd = reg_wdata[16];

  assign clicint_82_attr_trig_82_we = addr_hit[83] & reg_we & !reg_error;
  assign clicint_82_attr_trig_82_wd = reg_wdata[18:17];

  assign clicint_82_attr_mode_82_we = addr_hit[83] & reg_we & !reg_error;
  assign clicint_82_attr_mode_82_wd = reg_wdata[23:22];

  assign clicint_82_ctl_82_we = addr_hit[83] & reg_we & !reg_error;
  assign clicint_82_ctl_82_wd = reg_wdata[31:24];

  assign clicint_83_ip_83_we = addr_hit[84] & reg_we & !reg_error;
  assign clicint_83_ip_83_wd = reg_wdata[0];

  assign clicint_83_ie_83_we = addr_hit[84] & reg_we & !reg_error;
  assign clicint_83_ie_83_wd = reg_wdata[7];

  assign clicint_83_attr_shv_83_we = addr_hit[84] & reg_we & !reg_error;
  assign clicint_83_attr_shv_83_wd = reg_wdata[16];

  assign clicint_83_attr_trig_83_we = addr_hit[84] & reg_we & !reg_error;
  assign clicint_83_attr_trig_83_wd = reg_wdata[18:17];

  assign clicint_83_attr_mode_83_we = addr_hit[84] & reg_we & !reg_error;
  assign clicint_83_attr_mode_83_wd = reg_wdata[23:22];

  assign clicint_83_ctl_83_we = addr_hit[84] & reg_we & !reg_error;
  assign clicint_83_ctl_83_wd = reg_wdata[31:24];

  assign clicint_84_ip_84_we = addr_hit[85] & reg_we & !reg_error;
  assign clicint_84_ip_84_wd = reg_wdata[0];

  assign clicint_84_ie_84_we = addr_hit[85] & reg_we & !reg_error;
  assign clicint_84_ie_84_wd = reg_wdata[7];

  assign clicint_84_attr_shv_84_we = addr_hit[85] & reg_we & !reg_error;
  assign clicint_84_attr_shv_84_wd = reg_wdata[16];

  assign clicint_84_attr_trig_84_we = addr_hit[85] & reg_we & !reg_error;
  assign clicint_84_attr_trig_84_wd = reg_wdata[18:17];

  assign clicint_84_attr_mode_84_we = addr_hit[85] & reg_we & !reg_error;
  assign clicint_84_attr_mode_84_wd = reg_wdata[23:22];

  assign clicint_84_ctl_84_we = addr_hit[85] & reg_we & !reg_error;
  assign clicint_84_ctl_84_wd = reg_wdata[31:24];

  assign clicint_85_ip_85_we = addr_hit[86] & reg_we & !reg_error;
  assign clicint_85_ip_85_wd = reg_wdata[0];

  assign clicint_85_ie_85_we = addr_hit[86] & reg_we & !reg_error;
  assign clicint_85_ie_85_wd = reg_wdata[7];

  assign clicint_85_attr_shv_85_we = addr_hit[86] & reg_we & !reg_error;
  assign clicint_85_attr_shv_85_wd = reg_wdata[16];

  assign clicint_85_attr_trig_85_we = addr_hit[86] & reg_we & !reg_error;
  assign clicint_85_attr_trig_85_wd = reg_wdata[18:17];

  assign clicint_85_attr_mode_85_we = addr_hit[86] & reg_we & !reg_error;
  assign clicint_85_attr_mode_85_wd = reg_wdata[23:22];

  assign clicint_85_ctl_85_we = addr_hit[86] & reg_we & !reg_error;
  assign clicint_85_ctl_85_wd = reg_wdata[31:24];

  assign clicint_86_ip_86_we = addr_hit[87] & reg_we & !reg_error;
  assign clicint_86_ip_86_wd = reg_wdata[0];

  assign clicint_86_ie_86_we = addr_hit[87] & reg_we & !reg_error;
  assign clicint_86_ie_86_wd = reg_wdata[7];

  assign clicint_86_attr_shv_86_we = addr_hit[87] & reg_we & !reg_error;
  assign clicint_86_attr_shv_86_wd = reg_wdata[16];

  assign clicint_86_attr_trig_86_we = addr_hit[87] & reg_we & !reg_error;
  assign clicint_86_attr_trig_86_wd = reg_wdata[18:17];

  assign clicint_86_attr_mode_86_we = addr_hit[87] & reg_we & !reg_error;
  assign clicint_86_attr_mode_86_wd = reg_wdata[23:22];

  assign clicint_86_ctl_86_we = addr_hit[87] & reg_we & !reg_error;
  assign clicint_86_ctl_86_wd = reg_wdata[31:24];

  assign clicint_87_ip_87_we = addr_hit[88] & reg_we & !reg_error;
  assign clicint_87_ip_87_wd = reg_wdata[0];

  assign clicint_87_ie_87_we = addr_hit[88] & reg_we & !reg_error;
  assign clicint_87_ie_87_wd = reg_wdata[7];

  assign clicint_87_attr_shv_87_we = addr_hit[88] & reg_we & !reg_error;
  assign clicint_87_attr_shv_87_wd = reg_wdata[16];

  assign clicint_87_attr_trig_87_we = addr_hit[88] & reg_we & !reg_error;
  assign clicint_87_attr_trig_87_wd = reg_wdata[18:17];

  assign clicint_87_attr_mode_87_we = addr_hit[88] & reg_we & !reg_error;
  assign clicint_87_attr_mode_87_wd = reg_wdata[23:22];

  assign clicint_87_ctl_87_we = addr_hit[88] & reg_we & !reg_error;
  assign clicint_87_ctl_87_wd = reg_wdata[31:24];

  assign clicint_88_ip_88_we = addr_hit[89] & reg_we & !reg_error;
  assign clicint_88_ip_88_wd = reg_wdata[0];

  assign clicint_88_ie_88_we = addr_hit[89] & reg_we & !reg_error;
  assign clicint_88_ie_88_wd = reg_wdata[7];

  assign clicint_88_attr_shv_88_we = addr_hit[89] & reg_we & !reg_error;
  assign clicint_88_attr_shv_88_wd = reg_wdata[16];

  assign clicint_88_attr_trig_88_we = addr_hit[89] & reg_we & !reg_error;
  assign clicint_88_attr_trig_88_wd = reg_wdata[18:17];

  assign clicint_88_attr_mode_88_we = addr_hit[89] & reg_we & !reg_error;
  assign clicint_88_attr_mode_88_wd = reg_wdata[23:22];

  assign clicint_88_ctl_88_we = addr_hit[89] & reg_we & !reg_error;
  assign clicint_88_ctl_88_wd = reg_wdata[31:24];

  assign clicint_89_ip_89_we = addr_hit[90] & reg_we & !reg_error;
  assign clicint_89_ip_89_wd = reg_wdata[0];

  assign clicint_89_ie_89_we = addr_hit[90] & reg_we & !reg_error;
  assign clicint_89_ie_89_wd = reg_wdata[7];

  assign clicint_89_attr_shv_89_we = addr_hit[90] & reg_we & !reg_error;
  assign clicint_89_attr_shv_89_wd = reg_wdata[16];

  assign clicint_89_attr_trig_89_we = addr_hit[90] & reg_we & !reg_error;
  assign clicint_89_attr_trig_89_wd = reg_wdata[18:17];

  assign clicint_89_attr_mode_89_we = addr_hit[90] & reg_we & !reg_error;
  assign clicint_89_attr_mode_89_wd = reg_wdata[23:22];

  assign clicint_89_ctl_89_we = addr_hit[90] & reg_we & !reg_error;
  assign clicint_89_ctl_89_wd = reg_wdata[31:24];

  assign clicint_90_ip_90_we = addr_hit[91] & reg_we & !reg_error;
  assign clicint_90_ip_90_wd = reg_wdata[0];

  assign clicint_90_ie_90_we = addr_hit[91] & reg_we & !reg_error;
  assign clicint_90_ie_90_wd = reg_wdata[7];

  assign clicint_90_attr_shv_90_we = addr_hit[91] & reg_we & !reg_error;
  assign clicint_90_attr_shv_90_wd = reg_wdata[16];

  assign clicint_90_attr_trig_90_we = addr_hit[91] & reg_we & !reg_error;
  assign clicint_90_attr_trig_90_wd = reg_wdata[18:17];

  assign clicint_90_attr_mode_90_we = addr_hit[91] & reg_we & !reg_error;
  assign clicint_90_attr_mode_90_wd = reg_wdata[23:22];

  assign clicint_90_ctl_90_we = addr_hit[91] & reg_we & !reg_error;
  assign clicint_90_ctl_90_wd = reg_wdata[31:24];

  assign clicint_91_ip_91_we = addr_hit[92] & reg_we & !reg_error;
  assign clicint_91_ip_91_wd = reg_wdata[0];

  assign clicint_91_ie_91_we = addr_hit[92] & reg_we & !reg_error;
  assign clicint_91_ie_91_wd = reg_wdata[7];

  assign clicint_91_attr_shv_91_we = addr_hit[92] & reg_we & !reg_error;
  assign clicint_91_attr_shv_91_wd = reg_wdata[16];

  assign clicint_91_attr_trig_91_we = addr_hit[92] & reg_we & !reg_error;
  assign clicint_91_attr_trig_91_wd = reg_wdata[18:17];

  assign clicint_91_attr_mode_91_we = addr_hit[92] & reg_we & !reg_error;
  assign clicint_91_attr_mode_91_wd = reg_wdata[23:22];

  assign clicint_91_ctl_91_we = addr_hit[92] & reg_we & !reg_error;
  assign clicint_91_ctl_91_wd = reg_wdata[31:24];

  assign clicint_92_ip_92_we = addr_hit[93] & reg_we & !reg_error;
  assign clicint_92_ip_92_wd = reg_wdata[0];

  assign clicint_92_ie_92_we = addr_hit[93] & reg_we & !reg_error;
  assign clicint_92_ie_92_wd = reg_wdata[7];

  assign clicint_92_attr_shv_92_we = addr_hit[93] & reg_we & !reg_error;
  assign clicint_92_attr_shv_92_wd = reg_wdata[16];

  assign clicint_92_attr_trig_92_we = addr_hit[93] & reg_we & !reg_error;
  assign clicint_92_attr_trig_92_wd = reg_wdata[18:17];

  assign clicint_92_attr_mode_92_we = addr_hit[93] & reg_we & !reg_error;
  assign clicint_92_attr_mode_92_wd = reg_wdata[23:22];

  assign clicint_92_ctl_92_we = addr_hit[93] & reg_we & !reg_error;
  assign clicint_92_ctl_92_wd = reg_wdata[31:24];

  assign clicint_93_ip_93_we = addr_hit[94] & reg_we & !reg_error;
  assign clicint_93_ip_93_wd = reg_wdata[0];

  assign clicint_93_ie_93_we = addr_hit[94] & reg_we & !reg_error;
  assign clicint_93_ie_93_wd = reg_wdata[7];

  assign clicint_93_attr_shv_93_we = addr_hit[94] & reg_we & !reg_error;
  assign clicint_93_attr_shv_93_wd = reg_wdata[16];

  assign clicint_93_attr_trig_93_we = addr_hit[94] & reg_we & !reg_error;
  assign clicint_93_attr_trig_93_wd = reg_wdata[18:17];

  assign clicint_93_attr_mode_93_we = addr_hit[94] & reg_we & !reg_error;
  assign clicint_93_attr_mode_93_wd = reg_wdata[23:22];

  assign clicint_93_ctl_93_we = addr_hit[94] & reg_we & !reg_error;
  assign clicint_93_ctl_93_wd = reg_wdata[31:24];

  assign clicint_94_ip_94_we = addr_hit[95] & reg_we & !reg_error;
  assign clicint_94_ip_94_wd = reg_wdata[0];

  assign clicint_94_ie_94_we = addr_hit[95] & reg_we & !reg_error;
  assign clicint_94_ie_94_wd = reg_wdata[7];

  assign clicint_94_attr_shv_94_we = addr_hit[95] & reg_we & !reg_error;
  assign clicint_94_attr_shv_94_wd = reg_wdata[16];

  assign clicint_94_attr_trig_94_we = addr_hit[95] & reg_we & !reg_error;
  assign clicint_94_attr_trig_94_wd = reg_wdata[18:17];

  assign clicint_94_attr_mode_94_we = addr_hit[95] & reg_we & !reg_error;
  assign clicint_94_attr_mode_94_wd = reg_wdata[23:22];

  assign clicint_94_ctl_94_we = addr_hit[95] & reg_we & !reg_error;
  assign clicint_94_ctl_94_wd = reg_wdata[31:24];

  assign clicint_95_ip_95_we = addr_hit[96] & reg_we & !reg_error;
  assign clicint_95_ip_95_wd = reg_wdata[0];

  assign clicint_95_ie_95_we = addr_hit[96] & reg_we & !reg_error;
  assign clicint_95_ie_95_wd = reg_wdata[7];

  assign clicint_95_attr_shv_95_we = addr_hit[96] & reg_we & !reg_error;
  assign clicint_95_attr_shv_95_wd = reg_wdata[16];

  assign clicint_95_attr_trig_95_we = addr_hit[96] & reg_we & !reg_error;
  assign clicint_95_attr_trig_95_wd = reg_wdata[18:17];

  assign clicint_95_attr_mode_95_we = addr_hit[96] & reg_we & !reg_error;
  assign clicint_95_attr_mode_95_wd = reg_wdata[23:22];

  assign clicint_95_ctl_95_we = addr_hit[96] & reg_we & !reg_error;
  assign clicint_95_ctl_95_wd = reg_wdata[31:24];

  assign clicint_96_ip_96_we = addr_hit[97] & reg_we & !reg_error;
  assign clicint_96_ip_96_wd = reg_wdata[0];

  assign clicint_96_ie_96_we = addr_hit[97] & reg_we & !reg_error;
  assign clicint_96_ie_96_wd = reg_wdata[7];

  assign clicint_96_attr_shv_96_we = addr_hit[97] & reg_we & !reg_error;
  assign clicint_96_attr_shv_96_wd = reg_wdata[16];

  assign clicint_96_attr_trig_96_we = addr_hit[97] & reg_we & !reg_error;
  assign clicint_96_attr_trig_96_wd = reg_wdata[18:17];

  assign clicint_96_attr_mode_96_we = addr_hit[97] & reg_we & !reg_error;
  assign clicint_96_attr_mode_96_wd = reg_wdata[23:22];

  assign clicint_96_ctl_96_we = addr_hit[97] & reg_we & !reg_error;
  assign clicint_96_ctl_96_wd = reg_wdata[31:24];

  assign clicint_97_ip_97_we = addr_hit[98] & reg_we & !reg_error;
  assign clicint_97_ip_97_wd = reg_wdata[0];

  assign clicint_97_ie_97_we = addr_hit[98] & reg_we & !reg_error;
  assign clicint_97_ie_97_wd = reg_wdata[7];

  assign clicint_97_attr_shv_97_we = addr_hit[98] & reg_we & !reg_error;
  assign clicint_97_attr_shv_97_wd = reg_wdata[16];

  assign clicint_97_attr_trig_97_we = addr_hit[98] & reg_we & !reg_error;
  assign clicint_97_attr_trig_97_wd = reg_wdata[18:17];

  assign clicint_97_attr_mode_97_we = addr_hit[98] & reg_we & !reg_error;
  assign clicint_97_attr_mode_97_wd = reg_wdata[23:22];

  assign clicint_97_ctl_97_we = addr_hit[98] & reg_we & !reg_error;
  assign clicint_97_ctl_97_wd = reg_wdata[31:24];

  assign clicint_98_ip_98_we = addr_hit[99] & reg_we & !reg_error;
  assign clicint_98_ip_98_wd = reg_wdata[0];

  assign clicint_98_ie_98_we = addr_hit[99] & reg_we & !reg_error;
  assign clicint_98_ie_98_wd = reg_wdata[7];

  assign clicint_98_attr_shv_98_we = addr_hit[99] & reg_we & !reg_error;
  assign clicint_98_attr_shv_98_wd = reg_wdata[16];

  assign clicint_98_attr_trig_98_we = addr_hit[99] & reg_we & !reg_error;
  assign clicint_98_attr_trig_98_wd = reg_wdata[18:17];

  assign clicint_98_attr_mode_98_we = addr_hit[99] & reg_we & !reg_error;
  assign clicint_98_attr_mode_98_wd = reg_wdata[23:22];

  assign clicint_98_ctl_98_we = addr_hit[99] & reg_we & !reg_error;
  assign clicint_98_ctl_98_wd = reg_wdata[31:24];

  assign clicint_99_ip_99_we = addr_hit[100] & reg_we & !reg_error;
  assign clicint_99_ip_99_wd = reg_wdata[0];

  assign clicint_99_ie_99_we = addr_hit[100] & reg_we & !reg_error;
  assign clicint_99_ie_99_wd = reg_wdata[7];

  assign clicint_99_attr_shv_99_we = addr_hit[100] & reg_we & !reg_error;
  assign clicint_99_attr_shv_99_wd = reg_wdata[16];

  assign clicint_99_attr_trig_99_we = addr_hit[100] & reg_we & !reg_error;
  assign clicint_99_attr_trig_99_wd = reg_wdata[18:17];

  assign clicint_99_attr_mode_99_we = addr_hit[100] & reg_we & !reg_error;
  assign clicint_99_attr_mode_99_wd = reg_wdata[23:22];

  assign clicint_99_ctl_99_we = addr_hit[100] & reg_we & !reg_error;
  assign clicint_99_ctl_99_wd = reg_wdata[31:24];

  assign clicint_100_ip_100_we = addr_hit[101] & reg_we & !reg_error;
  assign clicint_100_ip_100_wd = reg_wdata[0];

  assign clicint_100_ie_100_we = addr_hit[101] & reg_we & !reg_error;
  assign clicint_100_ie_100_wd = reg_wdata[7];

  assign clicint_100_attr_shv_100_we = addr_hit[101] & reg_we & !reg_error;
  assign clicint_100_attr_shv_100_wd = reg_wdata[16];

  assign clicint_100_attr_trig_100_we = addr_hit[101] & reg_we & !reg_error;
  assign clicint_100_attr_trig_100_wd = reg_wdata[18:17];

  assign clicint_100_attr_mode_100_we = addr_hit[101] & reg_we & !reg_error;
  assign clicint_100_attr_mode_100_wd = reg_wdata[23:22];

  assign clicint_100_ctl_100_we = addr_hit[101] & reg_we & !reg_error;
  assign clicint_100_ctl_100_wd = reg_wdata[31:24];

  assign clicint_101_ip_101_we = addr_hit[102] & reg_we & !reg_error;
  assign clicint_101_ip_101_wd = reg_wdata[0];

  assign clicint_101_ie_101_we = addr_hit[102] & reg_we & !reg_error;
  assign clicint_101_ie_101_wd = reg_wdata[7];

  assign clicint_101_attr_shv_101_we = addr_hit[102] & reg_we & !reg_error;
  assign clicint_101_attr_shv_101_wd = reg_wdata[16];

  assign clicint_101_attr_trig_101_we = addr_hit[102] & reg_we & !reg_error;
  assign clicint_101_attr_trig_101_wd = reg_wdata[18:17];

  assign clicint_101_attr_mode_101_we = addr_hit[102] & reg_we & !reg_error;
  assign clicint_101_attr_mode_101_wd = reg_wdata[23:22];

  assign clicint_101_ctl_101_we = addr_hit[102] & reg_we & !reg_error;
  assign clicint_101_ctl_101_wd = reg_wdata[31:24];

  assign clicint_102_ip_102_we = addr_hit[103] & reg_we & !reg_error;
  assign clicint_102_ip_102_wd = reg_wdata[0];

  assign clicint_102_ie_102_we = addr_hit[103] & reg_we & !reg_error;
  assign clicint_102_ie_102_wd = reg_wdata[7];

  assign clicint_102_attr_shv_102_we = addr_hit[103] & reg_we & !reg_error;
  assign clicint_102_attr_shv_102_wd = reg_wdata[16];

  assign clicint_102_attr_trig_102_we = addr_hit[103] & reg_we & !reg_error;
  assign clicint_102_attr_trig_102_wd = reg_wdata[18:17];

  assign clicint_102_attr_mode_102_we = addr_hit[103] & reg_we & !reg_error;
  assign clicint_102_attr_mode_102_wd = reg_wdata[23:22];

  assign clicint_102_ctl_102_we = addr_hit[103] & reg_we & !reg_error;
  assign clicint_102_ctl_102_wd = reg_wdata[31:24];

  assign clicint_103_ip_103_we = addr_hit[104] & reg_we & !reg_error;
  assign clicint_103_ip_103_wd = reg_wdata[0];

  assign clicint_103_ie_103_we = addr_hit[104] & reg_we & !reg_error;
  assign clicint_103_ie_103_wd = reg_wdata[7];

  assign clicint_103_attr_shv_103_we = addr_hit[104] & reg_we & !reg_error;
  assign clicint_103_attr_shv_103_wd = reg_wdata[16];

  assign clicint_103_attr_trig_103_we = addr_hit[104] & reg_we & !reg_error;
  assign clicint_103_attr_trig_103_wd = reg_wdata[18:17];

  assign clicint_103_attr_mode_103_we = addr_hit[104] & reg_we & !reg_error;
  assign clicint_103_attr_mode_103_wd = reg_wdata[23:22];

  assign clicint_103_ctl_103_we = addr_hit[104] & reg_we & !reg_error;
  assign clicint_103_ctl_103_wd = reg_wdata[31:24];

  assign clicint_104_ip_104_we = addr_hit[105] & reg_we & !reg_error;
  assign clicint_104_ip_104_wd = reg_wdata[0];

  assign clicint_104_ie_104_we = addr_hit[105] & reg_we & !reg_error;
  assign clicint_104_ie_104_wd = reg_wdata[7];

  assign clicint_104_attr_shv_104_we = addr_hit[105] & reg_we & !reg_error;
  assign clicint_104_attr_shv_104_wd = reg_wdata[16];

  assign clicint_104_attr_trig_104_we = addr_hit[105] & reg_we & !reg_error;
  assign clicint_104_attr_trig_104_wd = reg_wdata[18:17];

  assign clicint_104_attr_mode_104_we = addr_hit[105] & reg_we & !reg_error;
  assign clicint_104_attr_mode_104_wd = reg_wdata[23:22];

  assign clicint_104_ctl_104_we = addr_hit[105] & reg_we & !reg_error;
  assign clicint_104_ctl_104_wd = reg_wdata[31:24];

  assign clicint_105_ip_105_we = addr_hit[106] & reg_we & !reg_error;
  assign clicint_105_ip_105_wd = reg_wdata[0];

  assign clicint_105_ie_105_we = addr_hit[106] & reg_we & !reg_error;
  assign clicint_105_ie_105_wd = reg_wdata[7];

  assign clicint_105_attr_shv_105_we = addr_hit[106] & reg_we & !reg_error;
  assign clicint_105_attr_shv_105_wd = reg_wdata[16];

  assign clicint_105_attr_trig_105_we = addr_hit[106] & reg_we & !reg_error;
  assign clicint_105_attr_trig_105_wd = reg_wdata[18:17];

  assign clicint_105_attr_mode_105_we = addr_hit[106] & reg_we & !reg_error;
  assign clicint_105_attr_mode_105_wd = reg_wdata[23:22];

  assign clicint_105_ctl_105_we = addr_hit[106] & reg_we & !reg_error;
  assign clicint_105_ctl_105_wd = reg_wdata[31:24];

  assign clicint_106_ip_106_we = addr_hit[107] & reg_we & !reg_error;
  assign clicint_106_ip_106_wd = reg_wdata[0];

  assign clicint_106_ie_106_we = addr_hit[107] & reg_we & !reg_error;
  assign clicint_106_ie_106_wd = reg_wdata[7];

  assign clicint_106_attr_shv_106_we = addr_hit[107] & reg_we & !reg_error;
  assign clicint_106_attr_shv_106_wd = reg_wdata[16];

  assign clicint_106_attr_trig_106_we = addr_hit[107] & reg_we & !reg_error;
  assign clicint_106_attr_trig_106_wd = reg_wdata[18:17];

  assign clicint_106_attr_mode_106_we = addr_hit[107] & reg_we & !reg_error;
  assign clicint_106_attr_mode_106_wd = reg_wdata[23:22];

  assign clicint_106_ctl_106_we = addr_hit[107] & reg_we & !reg_error;
  assign clicint_106_ctl_106_wd = reg_wdata[31:24];

  assign clicint_107_ip_107_we = addr_hit[108] & reg_we & !reg_error;
  assign clicint_107_ip_107_wd = reg_wdata[0];

  assign clicint_107_ie_107_we = addr_hit[108] & reg_we & !reg_error;
  assign clicint_107_ie_107_wd = reg_wdata[7];

  assign clicint_107_attr_shv_107_we = addr_hit[108] & reg_we & !reg_error;
  assign clicint_107_attr_shv_107_wd = reg_wdata[16];

  assign clicint_107_attr_trig_107_we = addr_hit[108] & reg_we & !reg_error;
  assign clicint_107_attr_trig_107_wd = reg_wdata[18:17];

  assign clicint_107_attr_mode_107_we = addr_hit[108] & reg_we & !reg_error;
  assign clicint_107_attr_mode_107_wd = reg_wdata[23:22];

  assign clicint_107_ctl_107_we = addr_hit[108] & reg_we & !reg_error;
  assign clicint_107_ctl_107_wd = reg_wdata[31:24];

  assign clicint_108_ip_108_we = addr_hit[109] & reg_we & !reg_error;
  assign clicint_108_ip_108_wd = reg_wdata[0];

  assign clicint_108_ie_108_we = addr_hit[109] & reg_we & !reg_error;
  assign clicint_108_ie_108_wd = reg_wdata[7];

  assign clicint_108_attr_shv_108_we = addr_hit[109] & reg_we & !reg_error;
  assign clicint_108_attr_shv_108_wd = reg_wdata[16];

  assign clicint_108_attr_trig_108_we = addr_hit[109] & reg_we & !reg_error;
  assign clicint_108_attr_trig_108_wd = reg_wdata[18:17];

  assign clicint_108_attr_mode_108_we = addr_hit[109] & reg_we & !reg_error;
  assign clicint_108_attr_mode_108_wd = reg_wdata[23:22];

  assign clicint_108_ctl_108_we = addr_hit[109] & reg_we & !reg_error;
  assign clicint_108_ctl_108_wd = reg_wdata[31:24];

  assign clicint_109_ip_109_we = addr_hit[110] & reg_we & !reg_error;
  assign clicint_109_ip_109_wd = reg_wdata[0];

  assign clicint_109_ie_109_we = addr_hit[110] & reg_we & !reg_error;
  assign clicint_109_ie_109_wd = reg_wdata[7];

  assign clicint_109_attr_shv_109_we = addr_hit[110] & reg_we & !reg_error;
  assign clicint_109_attr_shv_109_wd = reg_wdata[16];

  assign clicint_109_attr_trig_109_we = addr_hit[110] & reg_we & !reg_error;
  assign clicint_109_attr_trig_109_wd = reg_wdata[18:17];

  assign clicint_109_attr_mode_109_we = addr_hit[110] & reg_we & !reg_error;
  assign clicint_109_attr_mode_109_wd = reg_wdata[23:22];

  assign clicint_109_ctl_109_we = addr_hit[110] & reg_we & !reg_error;
  assign clicint_109_ctl_109_wd = reg_wdata[31:24];

  assign clicint_110_ip_110_we = addr_hit[111] & reg_we & !reg_error;
  assign clicint_110_ip_110_wd = reg_wdata[0];

  assign clicint_110_ie_110_we = addr_hit[111] & reg_we & !reg_error;
  assign clicint_110_ie_110_wd = reg_wdata[7];

  assign clicint_110_attr_shv_110_we = addr_hit[111] & reg_we & !reg_error;
  assign clicint_110_attr_shv_110_wd = reg_wdata[16];

  assign clicint_110_attr_trig_110_we = addr_hit[111] & reg_we & !reg_error;
  assign clicint_110_attr_trig_110_wd = reg_wdata[18:17];

  assign clicint_110_attr_mode_110_we = addr_hit[111] & reg_we & !reg_error;
  assign clicint_110_attr_mode_110_wd = reg_wdata[23:22];

  assign clicint_110_ctl_110_we = addr_hit[111] & reg_we & !reg_error;
  assign clicint_110_ctl_110_wd = reg_wdata[31:24];

  assign clicint_111_ip_111_we = addr_hit[112] & reg_we & !reg_error;
  assign clicint_111_ip_111_wd = reg_wdata[0];

  assign clicint_111_ie_111_we = addr_hit[112] & reg_we & !reg_error;
  assign clicint_111_ie_111_wd = reg_wdata[7];

  assign clicint_111_attr_shv_111_we = addr_hit[112] & reg_we & !reg_error;
  assign clicint_111_attr_shv_111_wd = reg_wdata[16];

  assign clicint_111_attr_trig_111_we = addr_hit[112] & reg_we & !reg_error;
  assign clicint_111_attr_trig_111_wd = reg_wdata[18:17];

  assign clicint_111_attr_mode_111_we = addr_hit[112] & reg_we & !reg_error;
  assign clicint_111_attr_mode_111_wd = reg_wdata[23:22];

  assign clicint_111_ctl_111_we = addr_hit[112] & reg_we & !reg_error;
  assign clicint_111_ctl_111_wd = reg_wdata[31:24];

  assign clicint_112_ip_112_we = addr_hit[113] & reg_we & !reg_error;
  assign clicint_112_ip_112_wd = reg_wdata[0];

  assign clicint_112_ie_112_we = addr_hit[113] & reg_we & !reg_error;
  assign clicint_112_ie_112_wd = reg_wdata[7];

  assign clicint_112_attr_shv_112_we = addr_hit[113] & reg_we & !reg_error;
  assign clicint_112_attr_shv_112_wd = reg_wdata[16];

  assign clicint_112_attr_trig_112_we = addr_hit[113] & reg_we & !reg_error;
  assign clicint_112_attr_trig_112_wd = reg_wdata[18:17];

  assign clicint_112_attr_mode_112_we = addr_hit[113] & reg_we & !reg_error;
  assign clicint_112_attr_mode_112_wd = reg_wdata[23:22];

  assign clicint_112_ctl_112_we = addr_hit[113] & reg_we & !reg_error;
  assign clicint_112_ctl_112_wd = reg_wdata[31:24];

  assign clicint_113_ip_113_we = addr_hit[114] & reg_we & !reg_error;
  assign clicint_113_ip_113_wd = reg_wdata[0];

  assign clicint_113_ie_113_we = addr_hit[114] & reg_we & !reg_error;
  assign clicint_113_ie_113_wd = reg_wdata[7];

  assign clicint_113_attr_shv_113_we = addr_hit[114] & reg_we & !reg_error;
  assign clicint_113_attr_shv_113_wd = reg_wdata[16];

  assign clicint_113_attr_trig_113_we = addr_hit[114] & reg_we & !reg_error;
  assign clicint_113_attr_trig_113_wd = reg_wdata[18:17];

  assign clicint_113_attr_mode_113_we = addr_hit[114] & reg_we & !reg_error;
  assign clicint_113_attr_mode_113_wd = reg_wdata[23:22];

  assign clicint_113_ctl_113_we = addr_hit[114] & reg_we & !reg_error;
  assign clicint_113_ctl_113_wd = reg_wdata[31:24];

  assign clicint_114_ip_114_we = addr_hit[115] & reg_we & !reg_error;
  assign clicint_114_ip_114_wd = reg_wdata[0];

  assign clicint_114_ie_114_we = addr_hit[115] & reg_we & !reg_error;
  assign clicint_114_ie_114_wd = reg_wdata[7];

  assign clicint_114_attr_shv_114_we = addr_hit[115] & reg_we & !reg_error;
  assign clicint_114_attr_shv_114_wd = reg_wdata[16];

  assign clicint_114_attr_trig_114_we = addr_hit[115] & reg_we & !reg_error;
  assign clicint_114_attr_trig_114_wd = reg_wdata[18:17];

  assign clicint_114_attr_mode_114_we = addr_hit[115] & reg_we & !reg_error;
  assign clicint_114_attr_mode_114_wd = reg_wdata[23:22];

  assign clicint_114_ctl_114_we = addr_hit[115] & reg_we & !reg_error;
  assign clicint_114_ctl_114_wd = reg_wdata[31:24];

  assign clicint_115_ip_115_we = addr_hit[116] & reg_we & !reg_error;
  assign clicint_115_ip_115_wd = reg_wdata[0];

  assign clicint_115_ie_115_we = addr_hit[116] & reg_we & !reg_error;
  assign clicint_115_ie_115_wd = reg_wdata[7];

  assign clicint_115_attr_shv_115_we = addr_hit[116] & reg_we & !reg_error;
  assign clicint_115_attr_shv_115_wd = reg_wdata[16];

  assign clicint_115_attr_trig_115_we = addr_hit[116] & reg_we & !reg_error;
  assign clicint_115_attr_trig_115_wd = reg_wdata[18:17];

  assign clicint_115_attr_mode_115_we = addr_hit[116] & reg_we & !reg_error;
  assign clicint_115_attr_mode_115_wd = reg_wdata[23:22];

  assign clicint_115_ctl_115_we = addr_hit[116] & reg_we & !reg_error;
  assign clicint_115_ctl_115_wd = reg_wdata[31:24];

  assign clicint_116_ip_116_we = addr_hit[117] & reg_we & !reg_error;
  assign clicint_116_ip_116_wd = reg_wdata[0];

  assign clicint_116_ie_116_we = addr_hit[117] & reg_we & !reg_error;
  assign clicint_116_ie_116_wd = reg_wdata[7];

  assign clicint_116_attr_shv_116_we = addr_hit[117] & reg_we & !reg_error;
  assign clicint_116_attr_shv_116_wd = reg_wdata[16];

  assign clicint_116_attr_trig_116_we = addr_hit[117] & reg_we & !reg_error;
  assign clicint_116_attr_trig_116_wd = reg_wdata[18:17];

  assign clicint_116_attr_mode_116_we = addr_hit[117] & reg_we & !reg_error;
  assign clicint_116_attr_mode_116_wd = reg_wdata[23:22];

  assign clicint_116_ctl_116_we = addr_hit[117] & reg_we & !reg_error;
  assign clicint_116_ctl_116_wd = reg_wdata[31:24];

  assign clicint_117_ip_117_we = addr_hit[118] & reg_we & !reg_error;
  assign clicint_117_ip_117_wd = reg_wdata[0];

  assign clicint_117_ie_117_we = addr_hit[118] & reg_we & !reg_error;
  assign clicint_117_ie_117_wd = reg_wdata[7];

  assign clicint_117_attr_shv_117_we = addr_hit[118] & reg_we & !reg_error;
  assign clicint_117_attr_shv_117_wd = reg_wdata[16];

  assign clicint_117_attr_trig_117_we = addr_hit[118] & reg_we & !reg_error;
  assign clicint_117_attr_trig_117_wd = reg_wdata[18:17];

  assign clicint_117_attr_mode_117_we = addr_hit[118] & reg_we & !reg_error;
  assign clicint_117_attr_mode_117_wd = reg_wdata[23:22];

  assign clicint_117_ctl_117_we = addr_hit[118] & reg_we & !reg_error;
  assign clicint_117_ctl_117_wd = reg_wdata[31:24];

  assign clicint_118_ip_118_we = addr_hit[119] & reg_we & !reg_error;
  assign clicint_118_ip_118_wd = reg_wdata[0];

  assign clicint_118_ie_118_we = addr_hit[119] & reg_we & !reg_error;
  assign clicint_118_ie_118_wd = reg_wdata[7];

  assign clicint_118_attr_shv_118_we = addr_hit[119] & reg_we & !reg_error;
  assign clicint_118_attr_shv_118_wd = reg_wdata[16];

  assign clicint_118_attr_trig_118_we = addr_hit[119] & reg_we & !reg_error;
  assign clicint_118_attr_trig_118_wd = reg_wdata[18:17];

  assign clicint_118_attr_mode_118_we = addr_hit[119] & reg_we & !reg_error;
  assign clicint_118_attr_mode_118_wd = reg_wdata[23:22];

  assign clicint_118_ctl_118_we = addr_hit[119] & reg_we & !reg_error;
  assign clicint_118_ctl_118_wd = reg_wdata[31:24];

  assign clicint_119_ip_119_we = addr_hit[120] & reg_we & !reg_error;
  assign clicint_119_ip_119_wd = reg_wdata[0];

  assign clicint_119_ie_119_we = addr_hit[120] & reg_we & !reg_error;
  assign clicint_119_ie_119_wd = reg_wdata[7];

  assign clicint_119_attr_shv_119_we = addr_hit[120] & reg_we & !reg_error;
  assign clicint_119_attr_shv_119_wd = reg_wdata[16];

  assign clicint_119_attr_trig_119_we = addr_hit[120] & reg_we & !reg_error;
  assign clicint_119_attr_trig_119_wd = reg_wdata[18:17];

  assign clicint_119_attr_mode_119_we = addr_hit[120] & reg_we & !reg_error;
  assign clicint_119_attr_mode_119_wd = reg_wdata[23:22];

  assign clicint_119_ctl_119_we = addr_hit[120] & reg_we & !reg_error;
  assign clicint_119_ctl_119_wd = reg_wdata[31:24];

  assign clicint_120_ip_120_we = addr_hit[121] & reg_we & !reg_error;
  assign clicint_120_ip_120_wd = reg_wdata[0];

  assign clicint_120_ie_120_we = addr_hit[121] & reg_we & !reg_error;
  assign clicint_120_ie_120_wd = reg_wdata[7];

  assign clicint_120_attr_shv_120_we = addr_hit[121] & reg_we & !reg_error;
  assign clicint_120_attr_shv_120_wd = reg_wdata[16];

  assign clicint_120_attr_trig_120_we = addr_hit[121] & reg_we & !reg_error;
  assign clicint_120_attr_trig_120_wd = reg_wdata[18:17];

  assign clicint_120_attr_mode_120_we = addr_hit[121] & reg_we & !reg_error;
  assign clicint_120_attr_mode_120_wd = reg_wdata[23:22];

  assign clicint_120_ctl_120_we = addr_hit[121] & reg_we & !reg_error;
  assign clicint_120_ctl_120_wd = reg_wdata[31:24];

  assign clicint_121_ip_121_we = addr_hit[122] & reg_we & !reg_error;
  assign clicint_121_ip_121_wd = reg_wdata[0];

  assign clicint_121_ie_121_we = addr_hit[122] & reg_we & !reg_error;
  assign clicint_121_ie_121_wd = reg_wdata[7];

  assign clicint_121_attr_shv_121_we = addr_hit[122] & reg_we & !reg_error;
  assign clicint_121_attr_shv_121_wd = reg_wdata[16];

  assign clicint_121_attr_trig_121_we = addr_hit[122] & reg_we & !reg_error;
  assign clicint_121_attr_trig_121_wd = reg_wdata[18:17];

  assign clicint_121_attr_mode_121_we = addr_hit[122] & reg_we & !reg_error;
  assign clicint_121_attr_mode_121_wd = reg_wdata[23:22];

  assign clicint_121_ctl_121_we = addr_hit[122] & reg_we & !reg_error;
  assign clicint_121_ctl_121_wd = reg_wdata[31:24];

  assign clicint_122_ip_122_we = addr_hit[123] & reg_we & !reg_error;
  assign clicint_122_ip_122_wd = reg_wdata[0];

  assign clicint_122_ie_122_we = addr_hit[123] & reg_we & !reg_error;
  assign clicint_122_ie_122_wd = reg_wdata[7];

  assign clicint_122_attr_shv_122_we = addr_hit[123] & reg_we & !reg_error;
  assign clicint_122_attr_shv_122_wd = reg_wdata[16];

  assign clicint_122_attr_trig_122_we = addr_hit[123] & reg_we & !reg_error;
  assign clicint_122_attr_trig_122_wd = reg_wdata[18:17];

  assign clicint_122_attr_mode_122_we = addr_hit[123] & reg_we & !reg_error;
  assign clicint_122_attr_mode_122_wd = reg_wdata[23:22];

  assign clicint_122_ctl_122_we = addr_hit[123] & reg_we & !reg_error;
  assign clicint_122_ctl_122_wd = reg_wdata[31:24];

  assign clicint_123_ip_123_we = addr_hit[124] & reg_we & !reg_error;
  assign clicint_123_ip_123_wd = reg_wdata[0];

  assign clicint_123_ie_123_we = addr_hit[124] & reg_we & !reg_error;
  assign clicint_123_ie_123_wd = reg_wdata[7];

  assign clicint_123_attr_shv_123_we = addr_hit[124] & reg_we & !reg_error;
  assign clicint_123_attr_shv_123_wd = reg_wdata[16];

  assign clicint_123_attr_trig_123_we = addr_hit[124] & reg_we & !reg_error;
  assign clicint_123_attr_trig_123_wd = reg_wdata[18:17];

  assign clicint_123_attr_mode_123_we = addr_hit[124] & reg_we & !reg_error;
  assign clicint_123_attr_mode_123_wd = reg_wdata[23:22];

  assign clicint_123_ctl_123_we = addr_hit[124] & reg_we & !reg_error;
  assign clicint_123_ctl_123_wd = reg_wdata[31:24];

  assign clicint_124_ip_124_we = addr_hit[125] & reg_we & !reg_error;
  assign clicint_124_ip_124_wd = reg_wdata[0];

  assign clicint_124_ie_124_we = addr_hit[125] & reg_we & !reg_error;
  assign clicint_124_ie_124_wd = reg_wdata[7];

  assign clicint_124_attr_shv_124_we = addr_hit[125] & reg_we & !reg_error;
  assign clicint_124_attr_shv_124_wd = reg_wdata[16];

  assign clicint_124_attr_trig_124_we = addr_hit[125] & reg_we & !reg_error;
  assign clicint_124_attr_trig_124_wd = reg_wdata[18:17];

  assign clicint_124_attr_mode_124_we = addr_hit[125] & reg_we & !reg_error;
  assign clicint_124_attr_mode_124_wd = reg_wdata[23:22];

  assign clicint_124_ctl_124_we = addr_hit[125] & reg_we & !reg_error;
  assign clicint_124_ctl_124_wd = reg_wdata[31:24];

  assign clicint_125_ip_125_we = addr_hit[126] & reg_we & !reg_error;
  assign clicint_125_ip_125_wd = reg_wdata[0];

  assign clicint_125_ie_125_we = addr_hit[126] & reg_we & !reg_error;
  assign clicint_125_ie_125_wd = reg_wdata[7];

  assign clicint_125_attr_shv_125_we = addr_hit[126] & reg_we & !reg_error;
  assign clicint_125_attr_shv_125_wd = reg_wdata[16];

  assign clicint_125_attr_trig_125_we = addr_hit[126] & reg_we & !reg_error;
  assign clicint_125_attr_trig_125_wd = reg_wdata[18:17];

  assign clicint_125_attr_mode_125_we = addr_hit[126] & reg_we & !reg_error;
  assign clicint_125_attr_mode_125_wd = reg_wdata[23:22];

  assign clicint_125_ctl_125_we = addr_hit[126] & reg_we & !reg_error;
  assign clicint_125_ctl_125_wd = reg_wdata[31:24];

  assign clicint_126_ip_126_we = addr_hit[127] & reg_we & !reg_error;
  assign clicint_126_ip_126_wd = reg_wdata[0];

  assign clicint_126_ie_126_we = addr_hit[127] & reg_we & !reg_error;
  assign clicint_126_ie_126_wd = reg_wdata[7];

  assign clicint_126_attr_shv_126_we = addr_hit[127] & reg_we & !reg_error;
  assign clicint_126_attr_shv_126_wd = reg_wdata[16];

  assign clicint_126_attr_trig_126_we = addr_hit[127] & reg_we & !reg_error;
  assign clicint_126_attr_trig_126_wd = reg_wdata[18:17];

  assign clicint_126_attr_mode_126_we = addr_hit[127] & reg_we & !reg_error;
  assign clicint_126_attr_mode_126_wd = reg_wdata[23:22];

  assign clicint_126_ctl_126_we = addr_hit[127] & reg_we & !reg_error;
  assign clicint_126_ctl_126_wd = reg_wdata[31:24];

  assign clicint_127_ip_127_we = addr_hit[128] & reg_we & !reg_error;
  assign clicint_127_ip_127_wd = reg_wdata[0];

  assign clicint_127_ie_127_we = addr_hit[128] & reg_we & !reg_error;
  assign clicint_127_ie_127_wd = reg_wdata[7];

  assign clicint_127_attr_shv_127_we = addr_hit[128] & reg_we & !reg_error;
  assign clicint_127_attr_shv_127_wd = reg_wdata[16];

  assign clicint_127_attr_trig_127_we = addr_hit[128] & reg_we & !reg_error;
  assign clicint_127_attr_trig_127_wd = reg_wdata[18:17];

  assign clicint_127_attr_mode_127_we = addr_hit[128] & reg_we & !reg_error;
  assign clicint_127_attr_mode_127_wd = reg_wdata[23:22];

  assign clicint_127_ctl_127_we = addr_hit[128] & reg_we & !reg_error;
  assign clicint_127_ctl_127_wd = reg_wdata[31:24];

  assign clicint_128_ip_128_we = addr_hit[129] & reg_we & !reg_error;
  assign clicint_128_ip_128_wd = reg_wdata[0];

  assign clicint_128_ie_128_we = addr_hit[129] & reg_we & !reg_error;
  assign clicint_128_ie_128_wd = reg_wdata[7];

  assign clicint_128_attr_shv_128_we = addr_hit[129] & reg_we & !reg_error;
  assign clicint_128_attr_shv_128_wd = reg_wdata[16];

  assign clicint_128_attr_trig_128_we = addr_hit[129] & reg_we & !reg_error;
  assign clicint_128_attr_trig_128_wd = reg_wdata[18:17];

  assign clicint_128_attr_mode_128_we = addr_hit[129] & reg_we & !reg_error;
  assign clicint_128_attr_mode_128_wd = reg_wdata[23:22];

  assign clicint_128_ctl_128_we = addr_hit[129] & reg_we & !reg_error;
  assign clicint_128_ctl_128_wd = reg_wdata[31:24];

  assign clicint_129_ip_129_we = addr_hit[130] & reg_we & !reg_error;
  assign clicint_129_ip_129_wd = reg_wdata[0];

  assign clicint_129_ie_129_we = addr_hit[130] & reg_we & !reg_error;
  assign clicint_129_ie_129_wd = reg_wdata[7];

  assign clicint_129_attr_shv_129_we = addr_hit[130] & reg_we & !reg_error;
  assign clicint_129_attr_shv_129_wd = reg_wdata[16];

  assign clicint_129_attr_trig_129_we = addr_hit[130] & reg_we & !reg_error;
  assign clicint_129_attr_trig_129_wd = reg_wdata[18:17];

  assign clicint_129_attr_mode_129_we = addr_hit[130] & reg_we & !reg_error;
  assign clicint_129_attr_mode_129_wd = reg_wdata[23:22];

  assign clicint_129_ctl_129_we = addr_hit[130] & reg_we & !reg_error;
  assign clicint_129_ctl_129_wd = reg_wdata[31:24];

  assign clicint_130_ip_130_we = addr_hit[131] & reg_we & !reg_error;
  assign clicint_130_ip_130_wd = reg_wdata[0];

  assign clicint_130_ie_130_we = addr_hit[131] & reg_we & !reg_error;
  assign clicint_130_ie_130_wd = reg_wdata[7];

  assign clicint_130_attr_shv_130_we = addr_hit[131] & reg_we & !reg_error;
  assign clicint_130_attr_shv_130_wd = reg_wdata[16];

  assign clicint_130_attr_trig_130_we = addr_hit[131] & reg_we & !reg_error;
  assign clicint_130_attr_trig_130_wd = reg_wdata[18:17];

  assign clicint_130_attr_mode_130_we = addr_hit[131] & reg_we & !reg_error;
  assign clicint_130_attr_mode_130_wd = reg_wdata[23:22];

  assign clicint_130_ctl_130_we = addr_hit[131] & reg_we & !reg_error;
  assign clicint_130_ctl_130_wd = reg_wdata[31:24];

  assign clicint_131_ip_131_we = addr_hit[132] & reg_we & !reg_error;
  assign clicint_131_ip_131_wd = reg_wdata[0];

  assign clicint_131_ie_131_we = addr_hit[132] & reg_we & !reg_error;
  assign clicint_131_ie_131_wd = reg_wdata[7];

  assign clicint_131_attr_shv_131_we = addr_hit[132] & reg_we & !reg_error;
  assign clicint_131_attr_shv_131_wd = reg_wdata[16];

  assign clicint_131_attr_trig_131_we = addr_hit[132] & reg_we & !reg_error;
  assign clicint_131_attr_trig_131_wd = reg_wdata[18:17];

  assign clicint_131_attr_mode_131_we = addr_hit[132] & reg_we & !reg_error;
  assign clicint_131_attr_mode_131_wd = reg_wdata[23:22];

  assign clicint_131_ctl_131_we = addr_hit[132] & reg_we & !reg_error;
  assign clicint_131_ctl_131_wd = reg_wdata[31:24];

  assign clicint_132_ip_132_we = addr_hit[133] & reg_we & !reg_error;
  assign clicint_132_ip_132_wd = reg_wdata[0];

  assign clicint_132_ie_132_we = addr_hit[133] & reg_we & !reg_error;
  assign clicint_132_ie_132_wd = reg_wdata[7];

  assign clicint_132_attr_shv_132_we = addr_hit[133] & reg_we & !reg_error;
  assign clicint_132_attr_shv_132_wd = reg_wdata[16];

  assign clicint_132_attr_trig_132_we = addr_hit[133] & reg_we & !reg_error;
  assign clicint_132_attr_trig_132_wd = reg_wdata[18:17];

  assign clicint_132_attr_mode_132_we = addr_hit[133] & reg_we & !reg_error;
  assign clicint_132_attr_mode_132_wd = reg_wdata[23:22];

  assign clicint_132_ctl_132_we = addr_hit[133] & reg_we & !reg_error;
  assign clicint_132_ctl_132_wd = reg_wdata[31:24];

  assign clicint_133_ip_133_we = addr_hit[134] & reg_we & !reg_error;
  assign clicint_133_ip_133_wd = reg_wdata[0];

  assign clicint_133_ie_133_we = addr_hit[134] & reg_we & !reg_error;
  assign clicint_133_ie_133_wd = reg_wdata[7];

  assign clicint_133_attr_shv_133_we = addr_hit[134] & reg_we & !reg_error;
  assign clicint_133_attr_shv_133_wd = reg_wdata[16];

  assign clicint_133_attr_trig_133_we = addr_hit[134] & reg_we & !reg_error;
  assign clicint_133_attr_trig_133_wd = reg_wdata[18:17];

  assign clicint_133_attr_mode_133_we = addr_hit[134] & reg_we & !reg_error;
  assign clicint_133_attr_mode_133_wd = reg_wdata[23:22];

  assign clicint_133_ctl_133_we = addr_hit[134] & reg_we & !reg_error;
  assign clicint_133_ctl_133_wd = reg_wdata[31:24];

  assign clicint_134_ip_134_we = addr_hit[135] & reg_we & !reg_error;
  assign clicint_134_ip_134_wd = reg_wdata[0];

  assign clicint_134_ie_134_we = addr_hit[135] & reg_we & !reg_error;
  assign clicint_134_ie_134_wd = reg_wdata[7];

  assign clicint_134_attr_shv_134_we = addr_hit[135] & reg_we & !reg_error;
  assign clicint_134_attr_shv_134_wd = reg_wdata[16];

  assign clicint_134_attr_trig_134_we = addr_hit[135] & reg_we & !reg_error;
  assign clicint_134_attr_trig_134_wd = reg_wdata[18:17];

  assign clicint_134_attr_mode_134_we = addr_hit[135] & reg_we & !reg_error;
  assign clicint_134_attr_mode_134_wd = reg_wdata[23:22];

  assign clicint_134_ctl_134_we = addr_hit[135] & reg_we & !reg_error;
  assign clicint_134_ctl_134_wd = reg_wdata[31:24];

  assign clicint_135_ip_135_we = addr_hit[136] & reg_we & !reg_error;
  assign clicint_135_ip_135_wd = reg_wdata[0];

  assign clicint_135_ie_135_we = addr_hit[136] & reg_we & !reg_error;
  assign clicint_135_ie_135_wd = reg_wdata[7];

  assign clicint_135_attr_shv_135_we = addr_hit[136] & reg_we & !reg_error;
  assign clicint_135_attr_shv_135_wd = reg_wdata[16];

  assign clicint_135_attr_trig_135_we = addr_hit[136] & reg_we & !reg_error;
  assign clicint_135_attr_trig_135_wd = reg_wdata[18:17];

  assign clicint_135_attr_mode_135_we = addr_hit[136] & reg_we & !reg_error;
  assign clicint_135_attr_mode_135_wd = reg_wdata[23:22];

  assign clicint_135_ctl_135_we = addr_hit[136] & reg_we & !reg_error;
  assign clicint_135_ctl_135_wd = reg_wdata[31:24];

  assign clicint_136_ip_136_we = addr_hit[137] & reg_we & !reg_error;
  assign clicint_136_ip_136_wd = reg_wdata[0];

  assign clicint_136_ie_136_we = addr_hit[137] & reg_we & !reg_error;
  assign clicint_136_ie_136_wd = reg_wdata[7];

  assign clicint_136_attr_shv_136_we = addr_hit[137] & reg_we & !reg_error;
  assign clicint_136_attr_shv_136_wd = reg_wdata[16];

  assign clicint_136_attr_trig_136_we = addr_hit[137] & reg_we & !reg_error;
  assign clicint_136_attr_trig_136_wd = reg_wdata[18:17];

  assign clicint_136_attr_mode_136_we = addr_hit[137] & reg_we & !reg_error;
  assign clicint_136_attr_mode_136_wd = reg_wdata[23:22];

  assign clicint_136_ctl_136_we = addr_hit[137] & reg_we & !reg_error;
  assign clicint_136_ctl_136_wd = reg_wdata[31:24];

  assign clicint_137_ip_137_we = addr_hit[138] & reg_we & !reg_error;
  assign clicint_137_ip_137_wd = reg_wdata[0];

  assign clicint_137_ie_137_we = addr_hit[138] & reg_we & !reg_error;
  assign clicint_137_ie_137_wd = reg_wdata[7];

  assign clicint_137_attr_shv_137_we = addr_hit[138] & reg_we & !reg_error;
  assign clicint_137_attr_shv_137_wd = reg_wdata[16];

  assign clicint_137_attr_trig_137_we = addr_hit[138] & reg_we & !reg_error;
  assign clicint_137_attr_trig_137_wd = reg_wdata[18:17];

  assign clicint_137_attr_mode_137_we = addr_hit[138] & reg_we & !reg_error;
  assign clicint_137_attr_mode_137_wd = reg_wdata[23:22];

  assign clicint_137_ctl_137_we = addr_hit[138] & reg_we & !reg_error;
  assign clicint_137_ctl_137_wd = reg_wdata[31:24];

  assign clicint_138_ip_138_we = addr_hit[139] & reg_we & !reg_error;
  assign clicint_138_ip_138_wd = reg_wdata[0];

  assign clicint_138_ie_138_we = addr_hit[139] & reg_we & !reg_error;
  assign clicint_138_ie_138_wd = reg_wdata[7];

  assign clicint_138_attr_shv_138_we = addr_hit[139] & reg_we & !reg_error;
  assign clicint_138_attr_shv_138_wd = reg_wdata[16];

  assign clicint_138_attr_trig_138_we = addr_hit[139] & reg_we & !reg_error;
  assign clicint_138_attr_trig_138_wd = reg_wdata[18:17];

  assign clicint_138_attr_mode_138_we = addr_hit[139] & reg_we & !reg_error;
  assign clicint_138_attr_mode_138_wd = reg_wdata[23:22];

  assign clicint_138_ctl_138_we = addr_hit[139] & reg_we & !reg_error;
  assign clicint_138_ctl_138_wd = reg_wdata[31:24];

  assign clicint_139_ip_139_we = addr_hit[140] & reg_we & !reg_error;
  assign clicint_139_ip_139_wd = reg_wdata[0];

  assign clicint_139_ie_139_we = addr_hit[140] & reg_we & !reg_error;
  assign clicint_139_ie_139_wd = reg_wdata[7];

  assign clicint_139_attr_shv_139_we = addr_hit[140] & reg_we & !reg_error;
  assign clicint_139_attr_shv_139_wd = reg_wdata[16];

  assign clicint_139_attr_trig_139_we = addr_hit[140] & reg_we & !reg_error;
  assign clicint_139_attr_trig_139_wd = reg_wdata[18:17];

  assign clicint_139_attr_mode_139_we = addr_hit[140] & reg_we & !reg_error;
  assign clicint_139_attr_mode_139_wd = reg_wdata[23:22];

  assign clicint_139_ctl_139_we = addr_hit[140] & reg_we & !reg_error;
  assign clicint_139_ctl_139_wd = reg_wdata[31:24];

  assign clicint_140_ip_140_we = addr_hit[141] & reg_we & !reg_error;
  assign clicint_140_ip_140_wd = reg_wdata[0];

  assign clicint_140_ie_140_we = addr_hit[141] & reg_we & !reg_error;
  assign clicint_140_ie_140_wd = reg_wdata[7];

  assign clicint_140_attr_shv_140_we = addr_hit[141] & reg_we & !reg_error;
  assign clicint_140_attr_shv_140_wd = reg_wdata[16];

  assign clicint_140_attr_trig_140_we = addr_hit[141] & reg_we & !reg_error;
  assign clicint_140_attr_trig_140_wd = reg_wdata[18:17];

  assign clicint_140_attr_mode_140_we = addr_hit[141] & reg_we & !reg_error;
  assign clicint_140_attr_mode_140_wd = reg_wdata[23:22];

  assign clicint_140_ctl_140_we = addr_hit[141] & reg_we & !reg_error;
  assign clicint_140_ctl_140_wd = reg_wdata[31:24];

  assign clicint_141_ip_141_we = addr_hit[142] & reg_we & !reg_error;
  assign clicint_141_ip_141_wd = reg_wdata[0];

  assign clicint_141_ie_141_we = addr_hit[142] & reg_we & !reg_error;
  assign clicint_141_ie_141_wd = reg_wdata[7];

  assign clicint_141_attr_shv_141_we = addr_hit[142] & reg_we & !reg_error;
  assign clicint_141_attr_shv_141_wd = reg_wdata[16];

  assign clicint_141_attr_trig_141_we = addr_hit[142] & reg_we & !reg_error;
  assign clicint_141_attr_trig_141_wd = reg_wdata[18:17];

  assign clicint_141_attr_mode_141_we = addr_hit[142] & reg_we & !reg_error;
  assign clicint_141_attr_mode_141_wd = reg_wdata[23:22];

  assign clicint_141_ctl_141_we = addr_hit[142] & reg_we & !reg_error;
  assign clicint_141_ctl_141_wd = reg_wdata[31:24];

  assign clicint_142_ip_142_we = addr_hit[143] & reg_we & !reg_error;
  assign clicint_142_ip_142_wd = reg_wdata[0];

  assign clicint_142_ie_142_we = addr_hit[143] & reg_we & !reg_error;
  assign clicint_142_ie_142_wd = reg_wdata[7];

  assign clicint_142_attr_shv_142_we = addr_hit[143] & reg_we & !reg_error;
  assign clicint_142_attr_shv_142_wd = reg_wdata[16];

  assign clicint_142_attr_trig_142_we = addr_hit[143] & reg_we & !reg_error;
  assign clicint_142_attr_trig_142_wd = reg_wdata[18:17];

  assign clicint_142_attr_mode_142_we = addr_hit[143] & reg_we & !reg_error;
  assign clicint_142_attr_mode_142_wd = reg_wdata[23:22];

  assign clicint_142_ctl_142_we = addr_hit[143] & reg_we & !reg_error;
  assign clicint_142_ctl_142_wd = reg_wdata[31:24];

  assign clicint_143_ip_143_we = addr_hit[144] & reg_we & !reg_error;
  assign clicint_143_ip_143_wd = reg_wdata[0];

  assign clicint_143_ie_143_we = addr_hit[144] & reg_we & !reg_error;
  assign clicint_143_ie_143_wd = reg_wdata[7];

  assign clicint_143_attr_shv_143_we = addr_hit[144] & reg_we & !reg_error;
  assign clicint_143_attr_shv_143_wd = reg_wdata[16];

  assign clicint_143_attr_trig_143_we = addr_hit[144] & reg_we & !reg_error;
  assign clicint_143_attr_trig_143_wd = reg_wdata[18:17];

  assign clicint_143_attr_mode_143_we = addr_hit[144] & reg_we & !reg_error;
  assign clicint_143_attr_mode_143_wd = reg_wdata[23:22];

  assign clicint_143_ctl_143_we = addr_hit[144] & reg_we & !reg_error;
  assign clicint_143_ctl_143_wd = reg_wdata[31:24];

  assign clicint_144_ip_144_we = addr_hit[145] & reg_we & !reg_error;
  assign clicint_144_ip_144_wd = reg_wdata[0];

  assign clicint_144_ie_144_we = addr_hit[145] & reg_we & !reg_error;
  assign clicint_144_ie_144_wd = reg_wdata[7];

  assign clicint_144_attr_shv_144_we = addr_hit[145] & reg_we & !reg_error;
  assign clicint_144_attr_shv_144_wd = reg_wdata[16];

  assign clicint_144_attr_trig_144_we = addr_hit[145] & reg_we & !reg_error;
  assign clicint_144_attr_trig_144_wd = reg_wdata[18:17];

  assign clicint_144_attr_mode_144_we = addr_hit[145] & reg_we & !reg_error;
  assign clicint_144_attr_mode_144_wd = reg_wdata[23:22];

  assign clicint_144_ctl_144_we = addr_hit[145] & reg_we & !reg_error;
  assign clicint_144_ctl_144_wd = reg_wdata[31:24];

  assign clicint_145_ip_145_we = addr_hit[146] & reg_we & !reg_error;
  assign clicint_145_ip_145_wd = reg_wdata[0];

  assign clicint_145_ie_145_we = addr_hit[146] & reg_we & !reg_error;
  assign clicint_145_ie_145_wd = reg_wdata[7];

  assign clicint_145_attr_shv_145_we = addr_hit[146] & reg_we & !reg_error;
  assign clicint_145_attr_shv_145_wd = reg_wdata[16];

  assign clicint_145_attr_trig_145_we = addr_hit[146] & reg_we & !reg_error;
  assign clicint_145_attr_trig_145_wd = reg_wdata[18:17];

  assign clicint_145_attr_mode_145_we = addr_hit[146] & reg_we & !reg_error;
  assign clicint_145_attr_mode_145_wd = reg_wdata[23:22];

  assign clicint_145_ctl_145_we = addr_hit[146] & reg_we & !reg_error;
  assign clicint_145_ctl_145_wd = reg_wdata[31:24];

  assign clicint_146_ip_146_we = addr_hit[147] & reg_we & !reg_error;
  assign clicint_146_ip_146_wd = reg_wdata[0];

  assign clicint_146_ie_146_we = addr_hit[147] & reg_we & !reg_error;
  assign clicint_146_ie_146_wd = reg_wdata[7];

  assign clicint_146_attr_shv_146_we = addr_hit[147] & reg_we & !reg_error;
  assign clicint_146_attr_shv_146_wd = reg_wdata[16];

  assign clicint_146_attr_trig_146_we = addr_hit[147] & reg_we & !reg_error;
  assign clicint_146_attr_trig_146_wd = reg_wdata[18:17];

  assign clicint_146_attr_mode_146_we = addr_hit[147] & reg_we & !reg_error;
  assign clicint_146_attr_mode_146_wd = reg_wdata[23:22];

  assign clicint_146_ctl_146_we = addr_hit[147] & reg_we & !reg_error;
  assign clicint_146_ctl_146_wd = reg_wdata[31:24];

  assign clicint_147_ip_147_we = addr_hit[148] & reg_we & !reg_error;
  assign clicint_147_ip_147_wd = reg_wdata[0];

  assign clicint_147_ie_147_we = addr_hit[148] & reg_we & !reg_error;
  assign clicint_147_ie_147_wd = reg_wdata[7];

  assign clicint_147_attr_shv_147_we = addr_hit[148] & reg_we & !reg_error;
  assign clicint_147_attr_shv_147_wd = reg_wdata[16];

  assign clicint_147_attr_trig_147_we = addr_hit[148] & reg_we & !reg_error;
  assign clicint_147_attr_trig_147_wd = reg_wdata[18:17];

  assign clicint_147_attr_mode_147_we = addr_hit[148] & reg_we & !reg_error;
  assign clicint_147_attr_mode_147_wd = reg_wdata[23:22];

  assign clicint_147_ctl_147_we = addr_hit[148] & reg_we & !reg_error;
  assign clicint_147_ctl_147_wd = reg_wdata[31:24];

  assign clicint_148_ip_148_we = addr_hit[149] & reg_we & !reg_error;
  assign clicint_148_ip_148_wd = reg_wdata[0];

  assign clicint_148_ie_148_we = addr_hit[149] & reg_we & !reg_error;
  assign clicint_148_ie_148_wd = reg_wdata[7];

  assign clicint_148_attr_shv_148_we = addr_hit[149] & reg_we & !reg_error;
  assign clicint_148_attr_shv_148_wd = reg_wdata[16];

  assign clicint_148_attr_trig_148_we = addr_hit[149] & reg_we & !reg_error;
  assign clicint_148_attr_trig_148_wd = reg_wdata[18:17];

  assign clicint_148_attr_mode_148_we = addr_hit[149] & reg_we & !reg_error;
  assign clicint_148_attr_mode_148_wd = reg_wdata[23:22];

  assign clicint_148_ctl_148_we = addr_hit[149] & reg_we & !reg_error;
  assign clicint_148_ctl_148_wd = reg_wdata[31:24];

  assign clicint_149_ip_149_we = addr_hit[150] & reg_we & !reg_error;
  assign clicint_149_ip_149_wd = reg_wdata[0];

  assign clicint_149_ie_149_we = addr_hit[150] & reg_we & !reg_error;
  assign clicint_149_ie_149_wd = reg_wdata[7];

  assign clicint_149_attr_shv_149_we = addr_hit[150] & reg_we & !reg_error;
  assign clicint_149_attr_shv_149_wd = reg_wdata[16];

  assign clicint_149_attr_trig_149_we = addr_hit[150] & reg_we & !reg_error;
  assign clicint_149_attr_trig_149_wd = reg_wdata[18:17];

  assign clicint_149_attr_mode_149_we = addr_hit[150] & reg_we & !reg_error;
  assign clicint_149_attr_mode_149_wd = reg_wdata[23:22];

  assign clicint_149_ctl_149_we = addr_hit[150] & reg_we & !reg_error;
  assign clicint_149_ctl_149_wd = reg_wdata[31:24];

  assign clicint_150_ip_150_we = addr_hit[151] & reg_we & !reg_error;
  assign clicint_150_ip_150_wd = reg_wdata[0];

  assign clicint_150_ie_150_we = addr_hit[151] & reg_we & !reg_error;
  assign clicint_150_ie_150_wd = reg_wdata[7];

  assign clicint_150_attr_shv_150_we = addr_hit[151] & reg_we & !reg_error;
  assign clicint_150_attr_shv_150_wd = reg_wdata[16];

  assign clicint_150_attr_trig_150_we = addr_hit[151] & reg_we & !reg_error;
  assign clicint_150_attr_trig_150_wd = reg_wdata[18:17];

  assign clicint_150_attr_mode_150_we = addr_hit[151] & reg_we & !reg_error;
  assign clicint_150_attr_mode_150_wd = reg_wdata[23:22];

  assign clicint_150_ctl_150_we = addr_hit[151] & reg_we & !reg_error;
  assign clicint_150_ctl_150_wd = reg_wdata[31:24];

  assign clicint_151_ip_151_we = addr_hit[152] & reg_we & !reg_error;
  assign clicint_151_ip_151_wd = reg_wdata[0];

  assign clicint_151_ie_151_we = addr_hit[152] & reg_we & !reg_error;
  assign clicint_151_ie_151_wd = reg_wdata[7];

  assign clicint_151_attr_shv_151_we = addr_hit[152] & reg_we & !reg_error;
  assign clicint_151_attr_shv_151_wd = reg_wdata[16];

  assign clicint_151_attr_trig_151_we = addr_hit[152] & reg_we & !reg_error;
  assign clicint_151_attr_trig_151_wd = reg_wdata[18:17];

  assign clicint_151_attr_mode_151_we = addr_hit[152] & reg_we & !reg_error;
  assign clicint_151_attr_mode_151_wd = reg_wdata[23:22];

  assign clicint_151_ctl_151_we = addr_hit[152] & reg_we & !reg_error;
  assign clicint_151_ctl_151_wd = reg_wdata[31:24];

  assign clicint_152_ip_152_we = addr_hit[153] & reg_we & !reg_error;
  assign clicint_152_ip_152_wd = reg_wdata[0];

  assign clicint_152_ie_152_we = addr_hit[153] & reg_we & !reg_error;
  assign clicint_152_ie_152_wd = reg_wdata[7];

  assign clicint_152_attr_shv_152_we = addr_hit[153] & reg_we & !reg_error;
  assign clicint_152_attr_shv_152_wd = reg_wdata[16];

  assign clicint_152_attr_trig_152_we = addr_hit[153] & reg_we & !reg_error;
  assign clicint_152_attr_trig_152_wd = reg_wdata[18:17];

  assign clicint_152_attr_mode_152_we = addr_hit[153] & reg_we & !reg_error;
  assign clicint_152_attr_mode_152_wd = reg_wdata[23:22];

  assign clicint_152_ctl_152_we = addr_hit[153] & reg_we & !reg_error;
  assign clicint_152_ctl_152_wd = reg_wdata[31:24];

  assign clicint_153_ip_153_we = addr_hit[154] & reg_we & !reg_error;
  assign clicint_153_ip_153_wd = reg_wdata[0];

  assign clicint_153_ie_153_we = addr_hit[154] & reg_we & !reg_error;
  assign clicint_153_ie_153_wd = reg_wdata[7];

  assign clicint_153_attr_shv_153_we = addr_hit[154] & reg_we & !reg_error;
  assign clicint_153_attr_shv_153_wd = reg_wdata[16];

  assign clicint_153_attr_trig_153_we = addr_hit[154] & reg_we & !reg_error;
  assign clicint_153_attr_trig_153_wd = reg_wdata[18:17];

  assign clicint_153_attr_mode_153_we = addr_hit[154] & reg_we & !reg_error;
  assign clicint_153_attr_mode_153_wd = reg_wdata[23:22];

  assign clicint_153_ctl_153_we = addr_hit[154] & reg_we & !reg_error;
  assign clicint_153_ctl_153_wd = reg_wdata[31:24];

  assign clicint_154_ip_154_we = addr_hit[155] & reg_we & !reg_error;
  assign clicint_154_ip_154_wd = reg_wdata[0];

  assign clicint_154_ie_154_we = addr_hit[155] & reg_we & !reg_error;
  assign clicint_154_ie_154_wd = reg_wdata[7];

  assign clicint_154_attr_shv_154_we = addr_hit[155] & reg_we & !reg_error;
  assign clicint_154_attr_shv_154_wd = reg_wdata[16];

  assign clicint_154_attr_trig_154_we = addr_hit[155] & reg_we & !reg_error;
  assign clicint_154_attr_trig_154_wd = reg_wdata[18:17];

  assign clicint_154_attr_mode_154_we = addr_hit[155] & reg_we & !reg_error;
  assign clicint_154_attr_mode_154_wd = reg_wdata[23:22];

  assign clicint_154_ctl_154_we = addr_hit[155] & reg_we & !reg_error;
  assign clicint_154_ctl_154_wd = reg_wdata[31:24];

  assign clicint_155_ip_155_we = addr_hit[156] & reg_we & !reg_error;
  assign clicint_155_ip_155_wd = reg_wdata[0];

  assign clicint_155_ie_155_we = addr_hit[156] & reg_we & !reg_error;
  assign clicint_155_ie_155_wd = reg_wdata[7];

  assign clicint_155_attr_shv_155_we = addr_hit[156] & reg_we & !reg_error;
  assign clicint_155_attr_shv_155_wd = reg_wdata[16];

  assign clicint_155_attr_trig_155_we = addr_hit[156] & reg_we & !reg_error;
  assign clicint_155_attr_trig_155_wd = reg_wdata[18:17];

  assign clicint_155_attr_mode_155_we = addr_hit[156] & reg_we & !reg_error;
  assign clicint_155_attr_mode_155_wd = reg_wdata[23:22];

  assign clicint_155_ctl_155_we = addr_hit[156] & reg_we & !reg_error;
  assign clicint_155_ctl_155_wd = reg_wdata[31:24];

  assign clicint_156_ip_156_we = addr_hit[157] & reg_we & !reg_error;
  assign clicint_156_ip_156_wd = reg_wdata[0];

  assign clicint_156_ie_156_we = addr_hit[157] & reg_we & !reg_error;
  assign clicint_156_ie_156_wd = reg_wdata[7];

  assign clicint_156_attr_shv_156_we = addr_hit[157] & reg_we & !reg_error;
  assign clicint_156_attr_shv_156_wd = reg_wdata[16];

  assign clicint_156_attr_trig_156_we = addr_hit[157] & reg_we & !reg_error;
  assign clicint_156_attr_trig_156_wd = reg_wdata[18:17];

  assign clicint_156_attr_mode_156_we = addr_hit[157] & reg_we & !reg_error;
  assign clicint_156_attr_mode_156_wd = reg_wdata[23:22];

  assign clicint_156_ctl_156_we = addr_hit[157] & reg_we & !reg_error;
  assign clicint_156_ctl_156_wd = reg_wdata[31:24];

  assign clicint_157_ip_157_we = addr_hit[158] & reg_we & !reg_error;
  assign clicint_157_ip_157_wd = reg_wdata[0];

  assign clicint_157_ie_157_we = addr_hit[158] & reg_we & !reg_error;
  assign clicint_157_ie_157_wd = reg_wdata[7];

  assign clicint_157_attr_shv_157_we = addr_hit[158] & reg_we & !reg_error;
  assign clicint_157_attr_shv_157_wd = reg_wdata[16];

  assign clicint_157_attr_trig_157_we = addr_hit[158] & reg_we & !reg_error;
  assign clicint_157_attr_trig_157_wd = reg_wdata[18:17];

  assign clicint_157_attr_mode_157_we = addr_hit[158] & reg_we & !reg_error;
  assign clicint_157_attr_mode_157_wd = reg_wdata[23:22];

  assign clicint_157_ctl_157_we = addr_hit[158] & reg_we & !reg_error;
  assign clicint_157_ctl_157_wd = reg_wdata[31:24];

  assign clicint_158_ip_158_we = addr_hit[159] & reg_we & !reg_error;
  assign clicint_158_ip_158_wd = reg_wdata[0];

  assign clicint_158_ie_158_we = addr_hit[159] & reg_we & !reg_error;
  assign clicint_158_ie_158_wd = reg_wdata[7];

  assign clicint_158_attr_shv_158_we = addr_hit[159] & reg_we & !reg_error;
  assign clicint_158_attr_shv_158_wd = reg_wdata[16];

  assign clicint_158_attr_trig_158_we = addr_hit[159] & reg_we & !reg_error;
  assign clicint_158_attr_trig_158_wd = reg_wdata[18:17];

  assign clicint_158_attr_mode_158_we = addr_hit[159] & reg_we & !reg_error;
  assign clicint_158_attr_mode_158_wd = reg_wdata[23:22];

  assign clicint_158_ctl_158_we = addr_hit[159] & reg_we & !reg_error;
  assign clicint_158_ctl_158_wd = reg_wdata[31:24];

  assign clicint_159_ip_159_we = addr_hit[160] & reg_we & !reg_error;
  assign clicint_159_ip_159_wd = reg_wdata[0];

  assign clicint_159_ie_159_we = addr_hit[160] & reg_we & !reg_error;
  assign clicint_159_ie_159_wd = reg_wdata[7];

  assign clicint_159_attr_shv_159_we = addr_hit[160] & reg_we & !reg_error;
  assign clicint_159_attr_shv_159_wd = reg_wdata[16];

  assign clicint_159_attr_trig_159_we = addr_hit[160] & reg_we & !reg_error;
  assign clicint_159_attr_trig_159_wd = reg_wdata[18:17];

  assign clicint_159_attr_mode_159_we = addr_hit[160] & reg_we & !reg_error;
  assign clicint_159_attr_mode_159_wd = reg_wdata[23:22];

  assign clicint_159_ctl_159_we = addr_hit[160] & reg_we & !reg_error;
  assign clicint_159_ctl_159_wd = reg_wdata[31:24];

  assign clicint_160_ip_160_we = addr_hit[161] & reg_we & !reg_error;
  assign clicint_160_ip_160_wd = reg_wdata[0];

  assign clicint_160_ie_160_we = addr_hit[161] & reg_we & !reg_error;
  assign clicint_160_ie_160_wd = reg_wdata[7];

  assign clicint_160_attr_shv_160_we = addr_hit[161] & reg_we & !reg_error;
  assign clicint_160_attr_shv_160_wd = reg_wdata[16];

  assign clicint_160_attr_trig_160_we = addr_hit[161] & reg_we & !reg_error;
  assign clicint_160_attr_trig_160_wd = reg_wdata[18:17];

  assign clicint_160_attr_mode_160_we = addr_hit[161] & reg_we & !reg_error;
  assign clicint_160_attr_mode_160_wd = reg_wdata[23:22];

  assign clicint_160_ctl_160_we = addr_hit[161] & reg_we & !reg_error;
  assign clicint_160_ctl_160_wd = reg_wdata[31:24];

  assign clicint_161_ip_161_we = addr_hit[162] & reg_we & !reg_error;
  assign clicint_161_ip_161_wd = reg_wdata[0];

  assign clicint_161_ie_161_we = addr_hit[162] & reg_we & !reg_error;
  assign clicint_161_ie_161_wd = reg_wdata[7];

  assign clicint_161_attr_shv_161_we = addr_hit[162] & reg_we & !reg_error;
  assign clicint_161_attr_shv_161_wd = reg_wdata[16];

  assign clicint_161_attr_trig_161_we = addr_hit[162] & reg_we & !reg_error;
  assign clicint_161_attr_trig_161_wd = reg_wdata[18:17];

  assign clicint_161_attr_mode_161_we = addr_hit[162] & reg_we & !reg_error;
  assign clicint_161_attr_mode_161_wd = reg_wdata[23:22];

  assign clicint_161_ctl_161_we = addr_hit[162] & reg_we & !reg_error;
  assign clicint_161_ctl_161_wd = reg_wdata[31:24];

  assign clicint_162_ip_162_we = addr_hit[163] & reg_we & !reg_error;
  assign clicint_162_ip_162_wd = reg_wdata[0];

  assign clicint_162_ie_162_we = addr_hit[163] & reg_we & !reg_error;
  assign clicint_162_ie_162_wd = reg_wdata[7];

  assign clicint_162_attr_shv_162_we = addr_hit[163] & reg_we & !reg_error;
  assign clicint_162_attr_shv_162_wd = reg_wdata[16];

  assign clicint_162_attr_trig_162_we = addr_hit[163] & reg_we & !reg_error;
  assign clicint_162_attr_trig_162_wd = reg_wdata[18:17];

  assign clicint_162_attr_mode_162_we = addr_hit[163] & reg_we & !reg_error;
  assign clicint_162_attr_mode_162_wd = reg_wdata[23:22];

  assign clicint_162_ctl_162_we = addr_hit[163] & reg_we & !reg_error;
  assign clicint_162_ctl_162_wd = reg_wdata[31:24];

  assign clicint_163_ip_163_we = addr_hit[164] & reg_we & !reg_error;
  assign clicint_163_ip_163_wd = reg_wdata[0];

  assign clicint_163_ie_163_we = addr_hit[164] & reg_we & !reg_error;
  assign clicint_163_ie_163_wd = reg_wdata[7];

  assign clicint_163_attr_shv_163_we = addr_hit[164] & reg_we & !reg_error;
  assign clicint_163_attr_shv_163_wd = reg_wdata[16];

  assign clicint_163_attr_trig_163_we = addr_hit[164] & reg_we & !reg_error;
  assign clicint_163_attr_trig_163_wd = reg_wdata[18:17];

  assign clicint_163_attr_mode_163_we = addr_hit[164] & reg_we & !reg_error;
  assign clicint_163_attr_mode_163_wd = reg_wdata[23:22];

  assign clicint_163_ctl_163_we = addr_hit[164] & reg_we & !reg_error;
  assign clicint_163_ctl_163_wd = reg_wdata[31:24];

  assign clicint_164_ip_164_we = addr_hit[165] & reg_we & !reg_error;
  assign clicint_164_ip_164_wd = reg_wdata[0];

  assign clicint_164_ie_164_we = addr_hit[165] & reg_we & !reg_error;
  assign clicint_164_ie_164_wd = reg_wdata[7];

  assign clicint_164_attr_shv_164_we = addr_hit[165] & reg_we & !reg_error;
  assign clicint_164_attr_shv_164_wd = reg_wdata[16];

  assign clicint_164_attr_trig_164_we = addr_hit[165] & reg_we & !reg_error;
  assign clicint_164_attr_trig_164_wd = reg_wdata[18:17];

  assign clicint_164_attr_mode_164_we = addr_hit[165] & reg_we & !reg_error;
  assign clicint_164_attr_mode_164_wd = reg_wdata[23:22];

  assign clicint_164_ctl_164_we = addr_hit[165] & reg_we & !reg_error;
  assign clicint_164_ctl_164_wd = reg_wdata[31:24];

  assign clicint_165_ip_165_we = addr_hit[166] & reg_we & !reg_error;
  assign clicint_165_ip_165_wd = reg_wdata[0];

  assign clicint_165_ie_165_we = addr_hit[166] & reg_we & !reg_error;
  assign clicint_165_ie_165_wd = reg_wdata[7];

  assign clicint_165_attr_shv_165_we = addr_hit[166] & reg_we & !reg_error;
  assign clicint_165_attr_shv_165_wd = reg_wdata[16];

  assign clicint_165_attr_trig_165_we = addr_hit[166] & reg_we & !reg_error;
  assign clicint_165_attr_trig_165_wd = reg_wdata[18:17];

  assign clicint_165_attr_mode_165_we = addr_hit[166] & reg_we & !reg_error;
  assign clicint_165_attr_mode_165_wd = reg_wdata[23:22];

  assign clicint_165_ctl_165_we = addr_hit[166] & reg_we & !reg_error;
  assign clicint_165_ctl_165_wd = reg_wdata[31:24];

  assign clicint_166_ip_166_we = addr_hit[167] & reg_we & !reg_error;
  assign clicint_166_ip_166_wd = reg_wdata[0];

  assign clicint_166_ie_166_we = addr_hit[167] & reg_we & !reg_error;
  assign clicint_166_ie_166_wd = reg_wdata[7];

  assign clicint_166_attr_shv_166_we = addr_hit[167] & reg_we & !reg_error;
  assign clicint_166_attr_shv_166_wd = reg_wdata[16];

  assign clicint_166_attr_trig_166_we = addr_hit[167] & reg_we & !reg_error;
  assign clicint_166_attr_trig_166_wd = reg_wdata[18:17];

  assign clicint_166_attr_mode_166_we = addr_hit[167] & reg_we & !reg_error;
  assign clicint_166_attr_mode_166_wd = reg_wdata[23:22];

  assign clicint_166_ctl_166_we = addr_hit[167] & reg_we & !reg_error;
  assign clicint_166_ctl_166_wd = reg_wdata[31:24];

  assign clicint_167_ip_167_we = addr_hit[168] & reg_we & !reg_error;
  assign clicint_167_ip_167_wd = reg_wdata[0];

  assign clicint_167_ie_167_we = addr_hit[168] & reg_we & !reg_error;
  assign clicint_167_ie_167_wd = reg_wdata[7];

  assign clicint_167_attr_shv_167_we = addr_hit[168] & reg_we & !reg_error;
  assign clicint_167_attr_shv_167_wd = reg_wdata[16];

  assign clicint_167_attr_trig_167_we = addr_hit[168] & reg_we & !reg_error;
  assign clicint_167_attr_trig_167_wd = reg_wdata[18:17];

  assign clicint_167_attr_mode_167_we = addr_hit[168] & reg_we & !reg_error;
  assign clicint_167_attr_mode_167_wd = reg_wdata[23:22];

  assign clicint_167_ctl_167_we = addr_hit[168] & reg_we & !reg_error;
  assign clicint_167_ctl_167_wd = reg_wdata[31:24];

  assign clicint_168_ip_168_we = addr_hit[169] & reg_we & !reg_error;
  assign clicint_168_ip_168_wd = reg_wdata[0];

  assign clicint_168_ie_168_we = addr_hit[169] & reg_we & !reg_error;
  assign clicint_168_ie_168_wd = reg_wdata[7];

  assign clicint_168_attr_shv_168_we = addr_hit[169] & reg_we & !reg_error;
  assign clicint_168_attr_shv_168_wd = reg_wdata[16];

  assign clicint_168_attr_trig_168_we = addr_hit[169] & reg_we & !reg_error;
  assign clicint_168_attr_trig_168_wd = reg_wdata[18:17];

  assign clicint_168_attr_mode_168_we = addr_hit[169] & reg_we & !reg_error;
  assign clicint_168_attr_mode_168_wd = reg_wdata[23:22];

  assign clicint_168_ctl_168_we = addr_hit[169] & reg_we & !reg_error;
  assign clicint_168_ctl_168_wd = reg_wdata[31:24];

  assign clicint_169_ip_169_we = addr_hit[170] & reg_we & !reg_error;
  assign clicint_169_ip_169_wd = reg_wdata[0];

  assign clicint_169_ie_169_we = addr_hit[170] & reg_we & !reg_error;
  assign clicint_169_ie_169_wd = reg_wdata[7];

  assign clicint_169_attr_shv_169_we = addr_hit[170] & reg_we & !reg_error;
  assign clicint_169_attr_shv_169_wd = reg_wdata[16];

  assign clicint_169_attr_trig_169_we = addr_hit[170] & reg_we & !reg_error;
  assign clicint_169_attr_trig_169_wd = reg_wdata[18:17];

  assign clicint_169_attr_mode_169_we = addr_hit[170] & reg_we & !reg_error;
  assign clicint_169_attr_mode_169_wd = reg_wdata[23:22];

  assign clicint_169_ctl_169_we = addr_hit[170] & reg_we & !reg_error;
  assign clicint_169_ctl_169_wd = reg_wdata[31:24];

  assign clicint_170_ip_170_we = addr_hit[171] & reg_we & !reg_error;
  assign clicint_170_ip_170_wd = reg_wdata[0];

  assign clicint_170_ie_170_we = addr_hit[171] & reg_we & !reg_error;
  assign clicint_170_ie_170_wd = reg_wdata[7];

  assign clicint_170_attr_shv_170_we = addr_hit[171] & reg_we & !reg_error;
  assign clicint_170_attr_shv_170_wd = reg_wdata[16];

  assign clicint_170_attr_trig_170_we = addr_hit[171] & reg_we & !reg_error;
  assign clicint_170_attr_trig_170_wd = reg_wdata[18:17];

  assign clicint_170_attr_mode_170_we = addr_hit[171] & reg_we & !reg_error;
  assign clicint_170_attr_mode_170_wd = reg_wdata[23:22];

  assign clicint_170_ctl_170_we = addr_hit[171] & reg_we & !reg_error;
  assign clicint_170_ctl_170_wd = reg_wdata[31:24];

  assign clicint_171_ip_171_we = addr_hit[172] & reg_we & !reg_error;
  assign clicint_171_ip_171_wd = reg_wdata[0];

  assign clicint_171_ie_171_we = addr_hit[172] & reg_we & !reg_error;
  assign clicint_171_ie_171_wd = reg_wdata[7];

  assign clicint_171_attr_shv_171_we = addr_hit[172] & reg_we & !reg_error;
  assign clicint_171_attr_shv_171_wd = reg_wdata[16];

  assign clicint_171_attr_trig_171_we = addr_hit[172] & reg_we & !reg_error;
  assign clicint_171_attr_trig_171_wd = reg_wdata[18:17];

  assign clicint_171_attr_mode_171_we = addr_hit[172] & reg_we & !reg_error;
  assign clicint_171_attr_mode_171_wd = reg_wdata[23:22];

  assign clicint_171_ctl_171_we = addr_hit[172] & reg_we & !reg_error;
  assign clicint_171_ctl_171_wd = reg_wdata[31:24];

  assign clicint_172_ip_172_we = addr_hit[173] & reg_we & !reg_error;
  assign clicint_172_ip_172_wd = reg_wdata[0];

  assign clicint_172_ie_172_we = addr_hit[173] & reg_we & !reg_error;
  assign clicint_172_ie_172_wd = reg_wdata[7];

  assign clicint_172_attr_shv_172_we = addr_hit[173] & reg_we & !reg_error;
  assign clicint_172_attr_shv_172_wd = reg_wdata[16];

  assign clicint_172_attr_trig_172_we = addr_hit[173] & reg_we & !reg_error;
  assign clicint_172_attr_trig_172_wd = reg_wdata[18:17];

  assign clicint_172_attr_mode_172_we = addr_hit[173] & reg_we & !reg_error;
  assign clicint_172_attr_mode_172_wd = reg_wdata[23:22];

  assign clicint_172_ctl_172_we = addr_hit[173] & reg_we & !reg_error;
  assign clicint_172_ctl_172_wd = reg_wdata[31:24];

  assign clicint_173_ip_173_we = addr_hit[174] & reg_we & !reg_error;
  assign clicint_173_ip_173_wd = reg_wdata[0];

  assign clicint_173_ie_173_we = addr_hit[174] & reg_we & !reg_error;
  assign clicint_173_ie_173_wd = reg_wdata[7];

  assign clicint_173_attr_shv_173_we = addr_hit[174] & reg_we & !reg_error;
  assign clicint_173_attr_shv_173_wd = reg_wdata[16];

  assign clicint_173_attr_trig_173_we = addr_hit[174] & reg_we & !reg_error;
  assign clicint_173_attr_trig_173_wd = reg_wdata[18:17];

  assign clicint_173_attr_mode_173_we = addr_hit[174] & reg_we & !reg_error;
  assign clicint_173_attr_mode_173_wd = reg_wdata[23:22];

  assign clicint_173_ctl_173_we = addr_hit[174] & reg_we & !reg_error;
  assign clicint_173_ctl_173_wd = reg_wdata[31:24];

  assign clicint_174_ip_174_we = addr_hit[175] & reg_we & !reg_error;
  assign clicint_174_ip_174_wd = reg_wdata[0];

  assign clicint_174_ie_174_we = addr_hit[175] & reg_we & !reg_error;
  assign clicint_174_ie_174_wd = reg_wdata[7];

  assign clicint_174_attr_shv_174_we = addr_hit[175] & reg_we & !reg_error;
  assign clicint_174_attr_shv_174_wd = reg_wdata[16];

  assign clicint_174_attr_trig_174_we = addr_hit[175] & reg_we & !reg_error;
  assign clicint_174_attr_trig_174_wd = reg_wdata[18:17];

  assign clicint_174_attr_mode_174_we = addr_hit[175] & reg_we & !reg_error;
  assign clicint_174_attr_mode_174_wd = reg_wdata[23:22];

  assign clicint_174_ctl_174_we = addr_hit[175] & reg_we & !reg_error;
  assign clicint_174_ctl_174_wd = reg_wdata[31:24];

  assign clicint_175_ip_175_we = addr_hit[176] & reg_we & !reg_error;
  assign clicint_175_ip_175_wd = reg_wdata[0];

  assign clicint_175_ie_175_we = addr_hit[176] & reg_we & !reg_error;
  assign clicint_175_ie_175_wd = reg_wdata[7];

  assign clicint_175_attr_shv_175_we = addr_hit[176] & reg_we & !reg_error;
  assign clicint_175_attr_shv_175_wd = reg_wdata[16];

  assign clicint_175_attr_trig_175_we = addr_hit[176] & reg_we & !reg_error;
  assign clicint_175_attr_trig_175_wd = reg_wdata[18:17];

  assign clicint_175_attr_mode_175_we = addr_hit[176] & reg_we & !reg_error;
  assign clicint_175_attr_mode_175_wd = reg_wdata[23:22];

  assign clicint_175_ctl_175_we = addr_hit[176] & reg_we & !reg_error;
  assign clicint_175_ctl_175_wd = reg_wdata[31:24];

  assign clicint_176_ip_176_we = addr_hit[177] & reg_we & !reg_error;
  assign clicint_176_ip_176_wd = reg_wdata[0];

  assign clicint_176_ie_176_we = addr_hit[177] & reg_we & !reg_error;
  assign clicint_176_ie_176_wd = reg_wdata[7];

  assign clicint_176_attr_shv_176_we = addr_hit[177] & reg_we & !reg_error;
  assign clicint_176_attr_shv_176_wd = reg_wdata[16];

  assign clicint_176_attr_trig_176_we = addr_hit[177] & reg_we & !reg_error;
  assign clicint_176_attr_trig_176_wd = reg_wdata[18:17];

  assign clicint_176_attr_mode_176_we = addr_hit[177] & reg_we & !reg_error;
  assign clicint_176_attr_mode_176_wd = reg_wdata[23:22];

  assign clicint_176_ctl_176_we = addr_hit[177] & reg_we & !reg_error;
  assign clicint_176_ctl_176_wd = reg_wdata[31:24];

  assign clicint_177_ip_177_we = addr_hit[178] & reg_we & !reg_error;
  assign clicint_177_ip_177_wd = reg_wdata[0];

  assign clicint_177_ie_177_we = addr_hit[178] & reg_we & !reg_error;
  assign clicint_177_ie_177_wd = reg_wdata[7];

  assign clicint_177_attr_shv_177_we = addr_hit[178] & reg_we & !reg_error;
  assign clicint_177_attr_shv_177_wd = reg_wdata[16];

  assign clicint_177_attr_trig_177_we = addr_hit[178] & reg_we & !reg_error;
  assign clicint_177_attr_trig_177_wd = reg_wdata[18:17];

  assign clicint_177_attr_mode_177_we = addr_hit[178] & reg_we & !reg_error;
  assign clicint_177_attr_mode_177_wd = reg_wdata[23:22];

  assign clicint_177_ctl_177_we = addr_hit[178] & reg_we & !reg_error;
  assign clicint_177_ctl_177_wd = reg_wdata[31:24];

  assign clicint_178_ip_178_we = addr_hit[179] & reg_we & !reg_error;
  assign clicint_178_ip_178_wd = reg_wdata[0];

  assign clicint_178_ie_178_we = addr_hit[179] & reg_we & !reg_error;
  assign clicint_178_ie_178_wd = reg_wdata[7];

  assign clicint_178_attr_shv_178_we = addr_hit[179] & reg_we & !reg_error;
  assign clicint_178_attr_shv_178_wd = reg_wdata[16];

  assign clicint_178_attr_trig_178_we = addr_hit[179] & reg_we & !reg_error;
  assign clicint_178_attr_trig_178_wd = reg_wdata[18:17];

  assign clicint_178_attr_mode_178_we = addr_hit[179] & reg_we & !reg_error;
  assign clicint_178_attr_mode_178_wd = reg_wdata[23:22];

  assign clicint_178_ctl_178_we = addr_hit[179] & reg_we & !reg_error;
  assign clicint_178_ctl_178_wd = reg_wdata[31:24];

  assign clicint_179_ip_179_we = addr_hit[180] & reg_we & !reg_error;
  assign clicint_179_ip_179_wd = reg_wdata[0];

  assign clicint_179_ie_179_we = addr_hit[180] & reg_we & !reg_error;
  assign clicint_179_ie_179_wd = reg_wdata[7];

  assign clicint_179_attr_shv_179_we = addr_hit[180] & reg_we & !reg_error;
  assign clicint_179_attr_shv_179_wd = reg_wdata[16];

  assign clicint_179_attr_trig_179_we = addr_hit[180] & reg_we & !reg_error;
  assign clicint_179_attr_trig_179_wd = reg_wdata[18:17];

  assign clicint_179_attr_mode_179_we = addr_hit[180] & reg_we & !reg_error;
  assign clicint_179_attr_mode_179_wd = reg_wdata[23:22];

  assign clicint_179_ctl_179_we = addr_hit[180] & reg_we & !reg_error;
  assign clicint_179_ctl_179_wd = reg_wdata[31:24];

  assign clicint_180_ip_180_we = addr_hit[181] & reg_we & !reg_error;
  assign clicint_180_ip_180_wd = reg_wdata[0];

  assign clicint_180_ie_180_we = addr_hit[181] & reg_we & !reg_error;
  assign clicint_180_ie_180_wd = reg_wdata[7];

  assign clicint_180_attr_shv_180_we = addr_hit[181] & reg_we & !reg_error;
  assign clicint_180_attr_shv_180_wd = reg_wdata[16];

  assign clicint_180_attr_trig_180_we = addr_hit[181] & reg_we & !reg_error;
  assign clicint_180_attr_trig_180_wd = reg_wdata[18:17];

  assign clicint_180_attr_mode_180_we = addr_hit[181] & reg_we & !reg_error;
  assign clicint_180_attr_mode_180_wd = reg_wdata[23:22];

  assign clicint_180_ctl_180_we = addr_hit[181] & reg_we & !reg_error;
  assign clicint_180_ctl_180_wd = reg_wdata[31:24];

  assign clicint_181_ip_181_we = addr_hit[182] & reg_we & !reg_error;
  assign clicint_181_ip_181_wd = reg_wdata[0];

  assign clicint_181_ie_181_we = addr_hit[182] & reg_we & !reg_error;
  assign clicint_181_ie_181_wd = reg_wdata[7];

  assign clicint_181_attr_shv_181_we = addr_hit[182] & reg_we & !reg_error;
  assign clicint_181_attr_shv_181_wd = reg_wdata[16];

  assign clicint_181_attr_trig_181_we = addr_hit[182] & reg_we & !reg_error;
  assign clicint_181_attr_trig_181_wd = reg_wdata[18:17];

  assign clicint_181_attr_mode_181_we = addr_hit[182] & reg_we & !reg_error;
  assign clicint_181_attr_mode_181_wd = reg_wdata[23:22];

  assign clicint_181_ctl_181_we = addr_hit[182] & reg_we & !reg_error;
  assign clicint_181_ctl_181_wd = reg_wdata[31:24];

  assign clicint_182_ip_182_we = addr_hit[183] & reg_we & !reg_error;
  assign clicint_182_ip_182_wd = reg_wdata[0];

  assign clicint_182_ie_182_we = addr_hit[183] & reg_we & !reg_error;
  assign clicint_182_ie_182_wd = reg_wdata[7];

  assign clicint_182_attr_shv_182_we = addr_hit[183] & reg_we & !reg_error;
  assign clicint_182_attr_shv_182_wd = reg_wdata[16];

  assign clicint_182_attr_trig_182_we = addr_hit[183] & reg_we & !reg_error;
  assign clicint_182_attr_trig_182_wd = reg_wdata[18:17];

  assign clicint_182_attr_mode_182_we = addr_hit[183] & reg_we & !reg_error;
  assign clicint_182_attr_mode_182_wd = reg_wdata[23:22];

  assign clicint_182_ctl_182_we = addr_hit[183] & reg_we & !reg_error;
  assign clicint_182_ctl_182_wd = reg_wdata[31:24];

  assign clicint_183_ip_183_we = addr_hit[184] & reg_we & !reg_error;
  assign clicint_183_ip_183_wd = reg_wdata[0];

  assign clicint_183_ie_183_we = addr_hit[184] & reg_we & !reg_error;
  assign clicint_183_ie_183_wd = reg_wdata[7];

  assign clicint_183_attr_shv_183_we = addr_hit[184] & reg_we & !reg_error;
  assign clicint_183_attr_shv_183_wd = reg_wdata[16];

  assign clicint_183_attr_trig_183_we = addr_hit[184] & reg_we & !reg_error;
  assign clicint_183_attr_trig_183_wd = reg_wdata[18:17];

  assign clicint_183_attr_mode_183_we = addr_hit[184] & reg_we & !reg_error;
  assign clicint_183_attr_mode_183_wd = reg_wdata[23:22];

  assign clicint_183_ctl_183_we = addr_hit[184] & reg_we & !reg_error;
  assign clicint_183_ctl_183_wd = reg_wdata[31:24];

  assign clicint_184_ip_184_we = addr_hit[185] & reg_we & !reg_error;
  assign clicint_184_ip_184_wd = reg_wdata[0];

  assign clicint_184_ie_184_we = addr_hit[185] & reg_we & !reg_error;
  assign clicint_184_ie_184_wd = reg_wdata[7];

  assign clicint_184_attr_shv_184_we = addr_hit[185] & reg_we & !reg_error;
  assign clicint_184_attr_shv_184_wd = reg_wdata[16];

  assign clicint_184_attr_trig_184_we = addr_hit[185] & reg_we & !reg_error;
  assign clicint_184_attr_trig_184_wd = reg_wdata[18:17];

  assign clicint_184_attr_mode_184_we = addr_hit[185] & reg_we & !reg_error;
  assign clicint_184_attr_mode_184_wd = reg_wdata[23:22];

  assign clicint_184_ctl_184_we = addr_hit[185] & reg_we & !reg_error;
  assign clicint_184_ctl_184_wd = reg_wdata[31:24];

  assign clicint_185_ip_185_we = addr_hit[186] & reg_we & !reg_error;
  assign clicint_185_ip_185_wd = reg_wdata[0];

  assign clicint_185_ie_185_we = addr_hit[186] & reg_we & !reg_error;
  assign clicint_185_ie_185_wd = reg_wdata[7];

  assign clicint_185_attr_shv_185_we = addr_hit[186] & reg_we & !reg_error;
  assign clicint_185_attr_shv_185_wd = reg_wdata[16];

  assign clicint_185_attr_trig_185_we = addr_hit[186] & reg_we & !reg_error;
  assign clicint_185_attr_trig_185_wd = reg_wdata[18:17];

  assign clicint_185_attr_mode_185_we = addr_hit[186] & reg_we & !reg_error;
  assign clicint_185_attr_mode_185_wd = reg_wdata[23:22];

  assign clicint_185_ctl_185_we = addr_hit[186] & reg_we & !reg_error;
  assign clicint_185_ctl_185_wd = reg_wdata[31:24];

  assign clicint_186_ip_186_we = addr_hit[187] & reg_we & !reg_error;
  assign clicint_186_ip_186_wd = reg_wdata[0];

  assign clicint_186_ie_186_we = addr_hit[187] & reg_we & !reg_error;
  assign clicint_186_ie_186_wd = reg_wdata[7];

  assign clicint_186_attr_shv_186_we = addr_hit[187] & reg_we & !reg_error;
  assign clicint_186_attr_shv_186_wd = reg_wdata[16];

  assign clicint_186_attr_trig_186_we = addr_hit[187] & reg_we & !reg_error;
  assign clicint_186_attr_trig_186_wd = reg_wdata[18:17];

  assign clicint_186_attr_mode_186_we = addr_hit[187] & reg_we & !reg_error;
  assign clicint_186_attr_mode_186_wd = reg_wdata[23:22];

  assign clicint_186_ctl_186_we = addr_hit[187] & reg_we & !reg_error;
  assign clicint_186_ctl_186_wd = reg_wdata[31:24];

  assign clicint_187_ip_187_we = addr_hit[188] & reg_we & !reg_error;
  assign clicint_187_ip_187_wd = reg_wdata[0];

  assign clicint_187_ie_187_we = addr_hit[188] & reg_we & !reg_error;
  assign clicint_187_ie_187_wd = reg_wdata[7];

  assign clicint_187_attr_shv_187_we = addr_hit[188] & reg_we & !reg_error;
  assign clicint_187_attr_shv_187_wd = reg_wdata[16];

  assign clicint_187_attr_trig_187_we = addr_hit[188] & reg_we & !reg_error;
  assign clicint_187_attr_trig_187_wd = reg_wdata[18:17];

  assign clicint_187_attr_mode_187_we = addr_hit[188] & reg_we & !reg_error;
  assign clicint_187_attr_mode_187_wd = reg_wdata[23:22];

  assign clicint_187_ctl_187_we = addr_hit[188] & reg_we & !reg_error;
  assign clicint_187_ctl_187_wd = reg_wdata[31:24];

  assign clicint_188_ip_188_we = addr_hit[189] & reg_we & !reg_error;
  assign clicint_188_ip_188_wd = reg_wdata[0];

  assign clicint_188_ie_188_we = addr_hit[189] & reg_we & !reg_error;
  assign clicint_188_ie_188_wd = reg_wdata[7];

  assign clicint_188_attr_shv_188_we = addr_hit[189] & reg_we & !reg_error;
  assign clicint_188_attr_shv_188_wd = reg_wdata[16];

  assign clicint_188_attr_trig_188_we = addr_hit[189] & reg_we & !reg_error;
  assign clicint_188_attr_trig_188_wd = reg_wdata[18:17];

  assign clicint_188_attr_mode_188_we = addr_hit[189] & reg_we & !reg_error;
  assign clicint_188_attr_mode_188_wd = reg_wdata[23:22];

  assign clicint_188_ctl_188_we = addr_hit[189] & reg_we & !reg_error;
  assign clicint_188_ctl_188_wd = reg_wdata[31:24];

  assign clicint_189_ip_189_we = addr_hit[190] & reg_we & !reg_error;
  assign clicint_189_ip_189_wd = reg_wdata[0];

  assign clicint_189_ie_189_we = addr_hit[190] & reg_we & !reg_error;
  assign clicint_189_ie_189_wd = reg_wdata[7];

  assign clicint_189_attr_shv_189_we = addr_hit[190] & reg_we & !reg_error;
  assign clicint_189_attr_shv_189_wd = reg_wdata[16];

  assign clicint_189_attr_trig_189_we = addr_hit[190] & reg_we & !reg_error;
  assign clicint_189_attr_trig_189_wd = reg_wdata[18:17];

  assign clicint_189_attr_mode_189_we = addr_hit[190] & reg_we & !reg_error;
  assign clicint_189_attr_mode_189_wd = reg_wdata[23:22];

  assign clicint_189_ctl_189_we = addr_hit[190] & reg_we & !reg_error;
  assign clicint_189_ctl_189_wd = reg_wdata[31:24];

  assign clicint_190_ip_190_we = addr_hit[191] & reg_we & !reg_error;
  assign clicint_190_ip_190_wd = reg_wdata[0];

  assign clicint_190_ie_190_we = addr_hit[191] & reg_we & !reg_error;
  assign clicint_190_ie_190_wd = reg_wdata[7];

  assign clicint_190_attr_shv_190_we = addr_hit[191] & reg_we & !reg_error;
  assign clicint_190_attr_shv_190_wd = reg_wdata[16];

  assign clicint_190_attr_trig_190_we = addr_hit[191] & reg_we & !reg_error;
  assign clicint_190_attr_trig_190_wd = reg_wdata[18:17];

  assign clicint_190_attr_mode_190_we = addr_hit[191] & reg_we & !reg_error;
  assign clicint_190_attr_mode_190_wd = reg_wdata[23:22];

  assign clicint_190_ctl_190_we = addr_hit[191] & reg_we & !reg_error;
  assign clicint_190_ctl_190_wd = reg_wdata[31:24];

  assign clicint_191_ip_191_we = addr_hit[192] & reg_we & !reg_error;
  assign clicint_191_ip_191_wd = reg_wdata[0];

  assign clicint_191_ie_191_we = addr_hit[192] & reg_we & !reg_error;
  assign clicint_191_ie_191_wd = reg_wdata[7];

  assign clicint_191_attr_shv_191_we = addr_hit[192] & reg_we & !reg_error;
  assign clicint_191_attr_shv_191_wd = reg_wdata[16];

  assign clicint_191_attr_trig_191_we = addr_hit[192] & reg_we & !reg_error;
  assign clicint_191_attr_trig_191_wd = reg_wdata[18:17];

  assign clicint_191_attr_mode_191_we = addr_hit[192] & reg_we & !reg_error;
  assign clicint_191_attr_mode_191_wd = reg_wdata[23:22];

  assign clicint_191_ctl_191_we = addr_hit[192] & reg_we & !reg_error;
  assign clicint_191_ctl_191_wd = reg_wdata[31:24];

  assign clicint_192_ip_192_we = addr_hit[193] & reg_we & !reg_error;
  assign clicint_192_ip_192_wd = reg_wdata[0];

  assign clicint_192_ie_192_we = addr_hit[193] & reg_we & !reg_error;
  assign clicint_192_ie_192_wd = reg_wdata[7];

  assign clicint_192_attr_shv_192_we = addr_hit[193] & reg_we & !reg_error;
  assign clicint_192_attr_shv_192_wd = reg_wdata[16];

  assign clicint_192_attr_trig_192_we = addr_hit[193] & reg_we & !reg_error;
  assign clicint_192_attr_trig_192_wd = reg_wdata[18:17];

  assign clicint_192_attr_mode_192_we = addr_hit[193] & reg_we & !reg_error;
  assign clicint_192_attr_mode_192_wd = reg_wdata[23:22];

  assign clicint_192_ctl_192_we = addr_hit[193] & reg_we & !reg_error;
  assign clicint_192_ctl_192_wd = reg_wdata[31:24];

  assign clicint_193_ip_193_we = addr_hit[194] & reg_we & !reg_error;
  assign clicint_193_ip_193_wd = reg_wdata[0];

  assign clicint_193_ie_193_we = addr_hit[194] & reg_we & !reg_error;
  assign clicint_193_ie_193_wd = reg_wdata[7];

  assign clicint_193_attr_shv_193_we = addr_hit[194] & reg_we & !reg_error;
  assign clicint_193_attr_shv_193_wd = reg_wdata[16];

  assign clicint_193_attr_trig_193_we = addr_hit[194] & reg_we & !reg_error;
  assign clicint_193_attr_trig_193_wd = reg_wdata[18:17];

  assign clicint_193_attr_mode_193_we = addr_hit[194] & reg_we & !reg_error;
  assign clicint_193_attr_mode_193_wd = reg_wdata[23:22];

  assign clicint_193_ctl_193_we = addr_hit[194] & reg_we & !reg_error;
  assign clicint_193_ctl_193_wd = reg_wdata[31:24];

  assign clicint_194_ip_194_we = addr_hit[195] & reg_we & !reg_error;
  assign clicint_194_ip_194_wd = reg_wdata[0];

  assign clicint_194_ie_194_we = addr_hit[195] & reg_we & !reg_error;
  assign clicint_194_ie_194_wd = reg_wdata[7];

  assign clicint_194_attr_shv_194_we = addr_hit[195] & reg_we & !reg_error;
  assign clicint_194_attr_shv_194_wd = reg_wdata[16];

  assign clicint_194_attr_trig_194_we = addr_hit[195] & reg_we & !reg_error;
  assign clicint_194_attr_trig_194_wd = reg_wdata[18:17];

  assign clicint_194_attr_mode_194_we = addr_hit[195] & reg_we & !reg_error;
  assign clicint_194_attr_mode_194_wd = reg_wdata[23:22];

  assign clicint_194_ctl_194_we = addr_hit[195] & reg_we & !reg_error;
  assign clicint_194_ctl_194_wd = reg_wdata[31:24];

  assign clicint_195_ip_195_we = addr_hit[196] & reg_we & !reg_error;
  assign clicint_195_ip_195_wd = reg_wdata[0];

  assign clicint_195_ie_195_we = addr_hit[196] & reg_we & !reg_error;
  assign clicint_195_ie_195_wd = reg_wdata[7];

  assign clicint_195_attr_shv_195_we = addr_hit[196] & reg_we & !reg_error;
  assign clicint_195_attr_shv_195_wd = reg_wdata[16];

  assign clicint_195_attr_trig_195_we = addr_hit[196] & reg_we & !reg_error;
  assign clicint_195_attr_trig_195_wd = reg_wdata[18:17];

  assign clicint_195_attr_mode_195_we = addr_hit[196] & reg_we & !reg_error;
  assign clicint_195_attr_mode_195_wd = reg_wdata[23:22];

  assign clicint_195_ctl_195_we = addr_hit[196] & reg_we & !reg_error;
  assign clicint_195_ctl_195_wd = reg_wdata[31:24];

  assign clicint_196_ip_196_we = addr_hit[197] & reg_we & !reg_error;
  assign clicint_196_ip_196_wd = reg_wdata[0];

  assign clicint_196_ie_196_we = addr_hit[197] & reg_we & !reg_error;
  assign clicint_196_ie_196_wd = reg_wdata[7];

  assign clicint_196_attr_shv_196_we = addr_hit[197] & reg_we & !reg_error;
  assign clicint_196_attr_shv_196_wd = reg_wdata[16];

  assign clicint_196_attr_trig_196_we = addr_hit[197] & reg_we & !reg_error;
  assign clicint_196_attr_trig_196_wd = reg_wdata[18:17];

  assign clicint_196_attr_mode_196_we = addr_hit[197] & reg_we & !reg_error;
  assign clicint_196_attr_mode_196_wd = reg_wdata[23:22];

  assign clicint_196_ctl_196_we = addr_hit[197] & reg_we & !reg_error;
  assign clicint_196_ctl_196_wd = reg_wdata[31:24];

  assign clicint_197_ip_197_we = addr_hit[198] & reg_we & !reg_error;
  assign clicint_197_ip_197_wd = reg_wdata[0];

  assign clicint_197_ie_197_we = addr_hit[198] & reg_we & !reg_error;
  assign clicint_197_ie_197_wd = reg_wdata[7];

  assign clicint_197_attr_shv_197_we = addr_hit[198] & reg_we & !reg_error;
  assign clicint_197_attr_shv_197_wd = reg_wdata[16];

  assign clicint_197_attr_trig_197_we = addr_hit[198] & reg_we & !reg_error;
  assign clicint_197_attr_trig_197_wd = reg_wdata[18:17];

  assign clicint_197_attr_mode_197_we = addr_hit[198] & reg_we & !reg_error;
  assign clicint_197_attr_mode_197_wd = reg_wdata[23:22];

  assign clicint_197_ctl_197_we = addr_hit[198] & reg_we & !reg_error;
  assign clicint_197_ctl_197_wd = reg_wdata[31:24];

  assign clicint_198_ip_198_we = addr_hit[199] & reg_we & !reg_error;
  assign clicint_198_ip_198_wd = reg_wdata[0];

  assign clicint_198_ie_198_we = addr_hit[199] & reg_we & !reg_error;
  assign clicint_198_ie_198_wd = reg_wdata[7];

  assign clicint_198_attr_shv_198_we = addr_hit[199] & reg_we & !reg_error;
  assign clicint_198_attr_shv_198_wd = reg_wdata[16];

  assign clicint_198_attr_trig_198_we = addr_hit[199] & reg_we & !reg_error;
  assign clicint_198_attr_trig_198_wd = reg_wdata[18:17];

  assign clicint_198_attr_mode_198_we = addr_hit[199] & reg_we & !reg_error;
  assign clicint_198_attr_mode_198_wd = reg_wdata[23:22];

  assign clicint_198_ctl_198_we = addr_hit[199] & reg_we & !reg_error;
  assign clicint_198_ctl_198_wd = reg_wdata[31:24];

  assign clicint_199_ip_199_we = addr_hit[200] & reg_we & !reg_error;
  assign clicint_199_ip_199_wd = reg_wdata[0];

  assign clicint_199_ie_199_we = addr_hit[200] & reg_we & !reg_error;
  assign clicint_199_ie_199_wd = reg_wdata[7];

  assign clicint_199_attr_shv_199_we = addr_hit[200] & reg_we & !reg_error;
  assign clicint_199_attr_shv_199_wd = reg_wdata[16];

  assign clicint_199_attr_trig_199_we = addr_hit[200] & reg_we & !reg_error;
  assign clicint_199_attr_trig_199_wd = reg_wdata[18:17];

  assign clicint_199_attr_mode_199_we = addr_hit[200] & reg_we & !reg_error;
  assign clicint_199_attr_mode_199_wd = reg_wdata[23:22];

  assign clicint_199_ctl_199_we = addr_hit[200] & reg_we & !reg_error;
  assign clicint_199_ctl_199_wd = reg_wdata[31:24];

  assign clicint_200_ip_200_we = addr_hit[201] & reg_we & !reg_error;
  assign clicint_200_ip_200_wd = reg_wdata[0];

  assign clicint_200_ie_200_we = addr_hit[201] & reg_we & !reg_error;
  assign clicint_200_ie_200_wd = reg_wdata[7];

  assign clicint_200_attr_shv_200_we = addr_hit[201] & reg_we & !reg_error;
  assign clicint_200_attr_shv_200_wd = reg_wdata[16];

  assign clicint_200_attr_trig_200_we = addr_hit[201] & reg_we & !reg_error;
  assign clicint_200_attr_trig_200_wd = reg_wdata[18:17];

  assign clicint_200_attr_mode_200_we = addr_hit[201] & reg_we & !reg_error;
  assign clicint_200_attr_mode_200_wd = reg_wdata[23:22];

  assign clicint_200_ctl_200_we = addr_hit[201] & reg_we & !reg_error;
  assign clicint_200_ctl_200_wd = reg_wdata[31:24];

  assign clicint_201_ip_201_we = addr_hit[202] & reg_we & !reg_error;
  assign clicint_201_ip_201_wd = reg_wdata[0];

  assign clicint_201_ie_201_we = addr_hit[202] & reg_we & !reg_error;
  assign clicint_201_ie_201_wd = reg_wdata[7];

  assign clicint_201_attr_shv_201_we = addr_hit[202] & reg_we & !reg_error;
  assign clicint_201_attr_shv_201_wd = reg_wdata[16];

  assign clicint_201_attr_trig_201_we = addr_hit[202] & reg_we & !reg_error;
  assign clicint_201_attr_trig_201_wd = reg_wdata[18:17];

  assign clicint_201_attr_mode_201_we = addr_hit[202] & reg_we & !reg_error;
  assign clicint_201_attr_mode_201_wd = reg_wdata[23:22];

  assign clicint_201_ctl_201_we = addr_hit[202] & reg_we & !reg_error;
  assign clicint_201_ctl_201_wd = reg_wdata[31:24];

  assign clicint_202_ip_202_we = addr_hit[203] & reg_we & !reg_error;
  assign clicint_202_ip_202_wd = reg_wdata[0];

  assign clicint_202_ie_202_we = addr_hit[203] & reg_we & !reg_error;
  assign clicint_202_ie_202_wd = reg_wdata[7];

  assign clicint_202_attr_shv_202_we = addr_hit[203] & reg_we & !reg_error;
  assign clicint_202_attr_shv_202_wd = reg_wdata[16];

  assign clicint_202_attr_trig_202_we = addr_hit[203] & reg_we & !reg_error;
  assign clicint_202_attr_trig_202_wd = reg_wdata[18:17];

  assign clicint_202_attr_mode_202_we = addr_hit[203] & reg_we & !reg_error;
  assign clicint_202_attr_mode_202_wd = reg_wdata[23:22];

  assign clicint_202_ctl_202_we = addr_hit[203] & reg_we & !reg_error;
  assign clicint_202_ctl_202_wd = reg_wdata[31:24];

  assign clicint_203_ip_203_we = addr_hit[204] & reg_we & !reg_error;
  assign clicint_203_ip_203_wd = reg_wdata[0];

  assign clicint_203_ie_203_we = addr_hit[204] & reg_we & !reg_error;
  assign clicint_203_ie_203_wd = reg_wdata[7];

  assign clicint_203_attr_shv_203_we = addr_hit[204] & reg_we & !reg_error;
  assign clicint_203_attr_shv_203_wd = reg_wdata[16];

  assign clicint_203_attr_trig_203_we = addr_hit[204] & reg_we & !reg_error;
  assign clicint_203_attr_trig_203_wd = reg_wdata[18:17];

  assign clicint_203_attr_mode_203_we = addr_hit[204] & reg_we & !reg_error;
  assign clicint_203_attr_mode_203_wd = reg_wdata[23:22];

  assign clicint_203_ctl_203_we = addr_hit[204] & reg_we & !reg_error;
  assign clicint_203_ctl_203_wd = reg_wdata[31:24];

  assign clicint_204_ip_204_we = addr_hit[205] & reg_we & !reg_error;
  assign clicint_204_ip_204_wd = reg_wdata[0];

  assign clicint_204_ie_204_we = addr_hit[205] & reg_we & !reg_error;
  assign clicint_204_ie_204_wd = reg_wdata[7];

  assign clicint_204_attr_shv_204_we = addr_hit[205] & reg_we & !reg_error;
  assign clicint_204_attr_shv_204_wd = reg_wdata[16];

  assign clicint_204_attr_trig_204_we = addr_hit[205] & reg_we & !reg_error;
  assign clicint_204_attr_trig_204_wd = reg_wdata[18:17];

  assign clicint_204_attr_mode_204_we = addr_hit[205] & reg_we & !reg_error;
  assign clicint_204_attr_mode_204_wd = reg_wdata[23:22];

  assign clicint_204_ctl_204_we = addr_hit[205] & reg_we & !reg_error;
  assign clicint_204_ctl_204_wd = reg_wdata[31:24];

  assign clicint_205_ip_205_we = addr_hit[206] & reg_we & !reg_error;
  assign clicint_205_ip_205_wd = reg_wdata[0];

  assign clicint_205_ie_205_we = addr_hit[206] & reg_we & !reg_error;
  assign clicint_205_ie_205_wd = reg_wdata[7];

  assign clicint_205_attr_shv_205_we = addr_hit[206] & reg_we & !reg_error;
  assign clicint_205_attr_shv_205_wd = reg_wdata[16];

  assign clicint_205_attr_trig_205_we = addr_hit[206] & reg_we & !reg_error;
  assign clicint_205_attr_trig_205_wd = reg_wdata[18:17];

  assign clicint_205_attr_mode_205_we = addr_hit[206] & reg_we & !reg_error;
  assign clicint_205_attr_mode_205_wd = reg_wdata[23:22];

  assign clicint_205_ctl_205_we = addr_hit[206] & reg_we & !reg_error;
  assign clicint_205_ctl_205_wd = reg_wdata[31:24];

  assign clicint_206_ip_206_we = addr_hit[207] & reg_we & !reg_error;
  assign clicint_206_ip_206_wd = reg_wdata[0];

  assign clicint_206_ie_206_we = addr_hit[207] & reg_we & !reg_error;
  assign clicint_206_ie_206_wd = reg_wdata[7];

  assign clicint_206_attr_shv_206_we = addr_hit[207] & reg_we & !reg_error;
  assign clicint_206_attr_shv_206_wd = reg_wdata[16];

  assign clicint_206_attr_trig_206_we = addr_hit[207] & reg_we & !reg_error;
  assign clicint_206_attr_trig_206_wd = reg_wdata[18:17];

  assign clicint_206_attr_mode_206_we = addr_hit[207] & reg_we & !reg_error;
  assign clicint_206_attr_mode_206_wd = reg_wdata[23:22];

  assign clicint_206_ctl_206_we = addr_hit[207] & reg_we & !reg_error;
  assign clicint_206_ctl_206_wd = reg_wdata[31:24];

  assign clicint_207_ip_207_we = addr_hit[208] & reg_we & !reg_error;
  assign clicint_207_ip_207_wd = reg_wdata[0];

  assign clicint_207_ie_207_we = addr_hit[208] & reg_we & !reg_error;
  assign clicint_207_ie_207_wd = reg_wdata[7];

  assign clicint_207_attr_shv_207_we = addr_hit[208] & reg_we & !reg_error;
  assign clicint_207_attr_shv_207_wd = reg_wdata[16];

  assign clicint_207_attr_trig_207_we = addr_hit[208] & reg_we & !reg_error;
  assign clicint_207_attr_trig_207_wd = reg_wdata[18:17];

  assign clicint_207_attr_mode_207_we = addr_hit[208] & reg_we & !reg_error;
  assign clicint_207_attr_mode_207_wd = reg_wdata[23:22];

  assign clicint_207_ctl_207_we = addr_hit[208] & reg_we & !reg_error;
  assign clicint_207_ctl_207_wd = reg_wdata[31:24];

  assign clicint_208_ip_208_we = addr_hit[209] & reg_we & !reg_error;
  assign clicint_208_ip_208_wd = reg_wdata[0];

  assign clicint_208_ie_208_we = addr_hit[209] & reg_we & !reg_error;
  assign clicint_208_ie_208_wd = reg_wdata[7];

  assign clicint_208_attr_shv_208_we = addr_hit[209] & reg_we & !reg_error;
  assign clicint_208_attr_shv_208_wd = reg_wdata[16];

  assign clicint_208_attr_trig_208_we = addr_hit[209] & reg_we & !reg_error;
  assign clicint_208_attr_trig_208_wd = reg_wdata[18:17];

  assign clicint_208_attr_mode_208_we = addr_hit[209] & reg_we & !reg_error;
  assign clicint_208_attr_mode_208_wd = reg_wdata[23:22];

  assign clicint_208_ctl_208_we = addr_hit[209] & reg_we & !reg_error;
  assign clicint_208_ctl_208_wd = reg_wdata[31:24];

  assign clicint_209_ip_209_we = addr_hit[210] & reg_we & !reg_error;
  assign clicint_209_ip_209_wd = reg_wdata[0];

  assign clicint_209_ie_209_we = addr_hit[210] & reg_we & !reg_error;
  assign clicint_209_ie_209_wd = reg_wdata[7];

  assign clicint_209_attr_shv_209_we = addr_hit[210] & reg_we & !reg_error;
  assign clicint_209_attr_shv_209_wd = reg_wdata[16];

  assign clicint_209_attr_trig_209_we = addr_hit[210] & reg_we & !reg_error;
  assign clicint_209_attr_trig_209_wd = reg_wdata[18:17];

  assign clicint_209_attr_mode_209_we = addr_hit[210] & reg_we & !reg_error;
  assign clicint_209_attr_mode_209_wd = reg_wdata[23:22];

  assign clicint_209_ctl_209_we = addr_hit[210] & reg_we & !reg_error;
  assign clicint_209_ctl_209_wd = reg_wdata[31:24];

  assign clicint_210_ip_210_we = addr_hit[211] & reg_we & !reg_error;
  assign clicint_210_ip_210_wd = reg_wdata[0];

  assign clicint_210_ie_210_we = addr_hit[211] & reg_we & !reg_error;
  assign clicint_210_ie_210_wd = reg_wdata[7];

  assign clicint_210_attr_shv_210_we = addr_hit[211] & reg_we & !reg_error;
  assign clicint_210_attr_shv_210_wd = reg_wdata[16];

  assign clicint_210_attr_trig_210_we = addr_hit[211] & reg_we & !reg_error;
  assign clicint_210_attr_trig_210_wd = reg_wdata[18:17];

  assign clicint_210_attr_mode_210_we = addr_hit[211] & reg_we & !reg_error;
  assign clicint_210_attr_mode_210_wd = reg_wdata[23:22];

  assign clicint_210_ctl_210_we = addr_hit[211] & reg_we & !reg_error;
  assign clicint_210_ctl_210_wd = reg_wdata[31:24];

  assign clicint_211_ip_211_we = addr_hit[212] & reg_we & !reg_error;
  assign clicint_211_ip_211_wd = reg_wdata[0];

  assign clicint_211_ie_211_we = addr_hit[212] & reg_we & !reg_error;
  assign clicint_211_ie_211_wd = reg_wdata[7];

  assign clicint_211_attr_shv_211_we = addr_hit[212] & reg_we & !reg_error;
  assign clicint_211_attr_shv_211_wd = reg_wdata[16];

  assign clicint_211_attr_trig_211_we = addr_hit[212] & reg_we & !reg_error;
  assign clicint_211_attr_trig_211_wd = reg_wdata[18:17];

  assign clicint_211_attr_mode_211_we = addr_hit[212] & reg_we & !reg_error;
  assign clicint_211_attr_mode_211_wd = reg_wdata[23:22];

  assign clicint_211_ctl_211_we = addr_hit[212] & reg_we & !reg_error;
  assign clicint_211_ctl_211_wd = reg_wdata[31:24];

  assign clicint_212_ip_212_we = addr_hit[213] & reg_we & !reg_error;
  assign clicint_212_ip_212_wd = reg_wdata[0];

  assign clicint_212_ie_212_we = addr_hit[213] & reg_we & !reg_error;
  assign clicint_212_ie_212_wd = reg_wdata[7];

  assign clicint_212_attr_shv_212_we = addr_hit[213] & reg_we & !reg_error;
  assign clicint_212_attr_shv_212_wd = reg_wdata[16];

  assign clicint_212_attr_trig_212_we = addr_hit[213] & reg_we & !reg_error;
  assign clicint_212_attr_trig_212_wd = reg_wdata[18:17];

  assign clicint_212_attr_mode_212_we = addr_hit[213] & reg_we & !reg_error;
  assign clicint_212_attr_mode_212_wd = reg_wdata[23:22];

  assign clicint_212_ctl_212_we = addr_hit[213] & reg_we & !reg_error;
  assign clicint_212_ctl_212_wd = reg_wdata[31:24];

  assign clicint_213_ip_213_we = addr_hit[214] & reg_we & !reg_error;
  assign clicint_213_ip_213_wd = reg_wdata[0];

  assign clicint_213_ie_213_we = addr_hit[214] & reg_we & !reg_error;
  assign clicint_213_ie_213_wd = reg_wdata[7];

  assign clicint_213_attr_shv_213_we = addr_hit[214] & reg_we & !reg_error;
  assign clicint_213_attr_shv_213_wd = reg_wdata[16];

  assign clicint_213_attr_trig_213_we = addr_hit[214] & reg_we & !reg_error;
  assign clicint_213_attr_trig_213_wd = reg_wdata[18:17];

  assign clicint_213_attr_mode_213_we = addr_hit[214] & reg_we & !reg_error;
  assign clicint_213_attr_mode_213_wd = reg_wdata[23:22];

  assign clicint_213_ctl_213_we = addr_hit[214] & reg_we & !reg_error;
  assign clicint_213_ctl_213_wd = reg_wdata[31:24];

  assign clicint_214_ip_214_we = addr_hit[215] & reg_we & !reg_error;
  assign clicint_214_ip_214_wd = reg_wdata[0];

  assign clicint_214_ie_214_we = addr_hit[215] & reg_we & !reg_error;
  assign clicint_214_ie_214_wd = reg_wdata[7];

  assign clicint_214_attr_shv_214_we = addr_hit[215] & reg_we & !reg_error;
  assign clicint_214_attr_shv_214_wd = reg_wdata[16];

  assign clicint_214_attr_trig_214_we = addr_hit[215] & reg_we & !reg_error;
  assign clicint_214_attr_trig_214_wd = reg_wdata[18:17];

  assign clicint_214_attr_mode_214_we = addr_hit[215] & reg_we & !reg_error;
  assign clicint_214_attr_mode_214_wd = reg_wdata[23:22];

  assign clicint_214_ctl_214_we = addr_hit[215] & reg_we & !reg_error;
  assign clicint_214_ctl_214_wd = reg_wdata[31:24];

  assign clicint_215_ip_215_we = addr_hit[216] & reg_we & !reg_error;
  assign clicint_215_ip_215_wd = reg_wdata[0];

  assign clicint_215_ie_215_we = addr_hit[216] & reg_we & !reg_error;
  assign clicint_215_ie_215_wd = reg_wdata[7];

  assign clicint_215_attr_shv_215_we = addr_hit[216] & reg_we & !reg_error;
  assign clicint_215_attr_shv_215_wd = reg_wdata[16];

  assign clicint_215_attr_trig_215_we = addr_hit[216] & reg_we & !reg_error;
  assign clicint_215_attr_trig_215_wd = reg_wdata[18:17];

  assign clicint_215_attr_mode_215_we = addr_hit[216] & reg_we & !reg_error;
  assign clicint_215_attr_mode_215_wd = reg_wdata[23:22];

  assign clicint_215_ctl_215_we = addr_hit[216] & reg_we & !reg_error;
  assign clicint_215_ctl_215_wd = reg_wdata[31:24];

  assign clicint_216_ip_216_we = addr_hit[217] & reg_we & !reg_error;
  assign clicint_216_ip_216_wd = reg_wdata[0];

  assign clicint_216_ie_216_we = addr_hit[217] & reg_we & !reg_error;
  assign clicint_216_ie_216_wd = reg_wdata[7];

  assign clicint_216_attr_shv_216_we = addr_hit[217] & reg_we & !reg_error;
  assign clicint_216_attr_shv_216_wd = reg_wdata[16];

  assign clicint_216_attr_trig_216_we = addr_hit[217] & reg_we & !reg_error;
  assign clicint_216_attr_trig_216_wd = reg_wdata[18:17];

  assign clicint_216_attr_mode_216_we = addr_hit[217] & reg_we & !reg_error;
  assign clicint_216_attr_mode_216_wd = reg_wdata[23:22];

  assign clicint_216_ctl_216_we = addr_hit[217] & reg_we & !reg_error;
  assign clicint_216_ctl_216_wd = reg_wdata[31:24];

  assign clicint_217_ip_217_we = addr_hit[218] & reg_we & !reg_error;
  assign clicint_217_ip_217_wd = reg_wdata[0];

  assign clicint_217_ie_217_we = addr_hit[218] & reg_we & !reg_error;
  assign clicint_217_ie_217_wd = reg_wdata[7];

  assign clicint_217_attr_shv_217_we = addr_hit[218] & reg_we & !reg_error;
  assign clicint_217_attr_shv_217_wd = reg_wdata[16];

  assign clicint_217_attr_trig_217_we = addr_hit[218] & reg_we & !reg_error;
  assign clicint_217_attr_trig_217_wd = reg_wdata[18:17];

  assign clicint_217_attr_mode_217_we = addr_hit[218] & reg_we & !reg_error;
  assign clicint_217_attr_mode_217_wd = reg_wdata[23:22];

  assign clicint_217_ctl_217_we = addr_hit[218] & reg_we & !reg_error;
  assign clicint_217_ctl_217_wd = reg_wdata[31:24];

  assign clicint_218_ip_218_we = addr_hit[219] & reg_we & !reg_error;
  assign clicint_218_ip_218_wd = reg_wdata[0];

  assign clicint_218_ie_218_we = addr_hit[219] & reg_we & !reg_error;
  assign clicint_218_ie_218_wd = reg_wdata[7];

  assign clicint_218_attr_shv_218_we = addr_hit[219] & reg_we & !reg_error;
  assign clicint_218_attr_shv_218_wd = reg_wdata[16];

  assign clicint_218_attr_trig_218_we = addr_hit[219] & reg_we & !reg_error;
  assign clicint_218_attr_trig_218_wd = reg_wdata[18:17];

  assign clicint_218_attr_mode_218_we = addr_hit[219] & reg_we & !reg_error;
  assign clicint_218_attr_mode_218_wd = reg_wdata[23:22];

  assign clicint_218_ctl_218_we = addr_hit[219] & reg_we & !reg_error;
  assign clicint_218_ctl_218_wd = reg_wdata[31:24];

  assign clicint_219_ip_219_we = addr_hit[220] & reg_we & !reg_error;
  assign clicint_219_ip_219_wd = reg_wdata[0];

  assign clicint_219_ie_219_we = addr_hit[220] & reg_we & !reg_error;
  assign clicint_219_ie_219_wd = reg_wdata[7];

  assign clicint_219_attr_shv_219_we = addr_hit[220] & reg_we & !reg_error;
  assign clicint_219_attr_shv_219_wd = reg_wdata[16];

  assign clicint_219_attr_trig_219_we = addr_hit[220] & reg_we & !reg_error;
  assign clicint_219_attr_trig_219_wd = reg_wdata[18:17];

  assign clicint_219_attr_mode_219_we = addr_hit[220] & reg_we & !reg_error;
  assign clicint_219_attr_mode_219_wd = reg_wdata[23:22];

  assign clicint_219_ctl_219_we = addr_hit[220] & reg_we & !reg_error;
  assign clicint_219_ctl_219_wd = reg_wdata[31:24];

  assign clicint_220_ip_220_we = addr_hit[221] & reg_we & !reg_error;
  assign clicint_220_ip_220_wd = reg_wdata[0];

  assign clicint_220_ie_220_we = addr_hit[221] & reg_we & !reg_error;
  assign clicint_220_ie_220_wd = reg_wdata[7];

  assign clicint_220_attr_shv_220_we = addr_hit[221] & reg_we & !reg_error;
  assign clicint_220_attr_shv_220_wd = reg_wdata[16];

  assign clicint_220_attr_trig_220_we = addr_hit[221] & reg_we & !reg_error;
  assign clicint_220_attr_trig_220_wd = reg_wdata[18:17];

  assign clicint_220_attr_mode_220_we = addr_hit[221] & reg_we & !reg_error;
  assign clicint_220_attr_mode_220_wd = reg_wdata[23:22];

  assign clicint_220_ctl_220_we = addr_hit[221] & reg_we & !reg_error;
  assign clicint_220_ctl_220_wd = reg_wdata[31:24];

  assign clicint_221_ip_221_we = addr_hit[222] & reg_we & !reg_error;
  assign clicint_221_ip_221_wd = reg_wdata[0];

  assign clicint_221_ie_221_we = addr_hit[222] & reg_we & !reg_error;
  assign clicint_221_ie_221_wd = reg_wdata[7];

  assign clicint_221_attr_shv_221_we = addr_hit[222] & reg_we & !reg_error;
  assign clicint_221_attr_shv_221_wd = reg_wdata[16];

  assign clicint_221_attr_trig_221_we = addr_hit[222] & reg_we & !reg_error;
  assign clicint_221_attr_trig_221_wd = reg_wdata[18:17];

  assign clicint_221_attr_mode_221_we = addr_hit[222] & reg_we & !reg_error;
  assign clicint_221_attr_mode_221_wd = reg_wdata[23:22];

  assign clicint_221_ctl_221_we = addr_hit[222] & reg_we & !reg_error;
  assign clicint_221_ctl_221_wd = reg_wdata[31:24];

  assign clicint_222_ip_222_we = addr_hit[223] & reg_we & !reg_error;
  assign clicint_222_ip_222_wd = reg_wdata[0];

  assign clicint_222_ie_222_we = addr_hit[223] & reg_we & !reg_error;
  assign clicint_222_ie_222_wd = reg_wdata[7];

  assign clicint_222_attr_shv_222_we = addr_hit[223] & reg_we & !reg_error;
  assign clicint_222_attr_shv_222_wd = reg_wdata[16];

  assign clicint_222_attr_trig_222_we = addr_hit[223] & reg_we & !reg_error;
  assign clicint_222_attr_trig_222_wd = reg_wdata[18:17];

  assign clicint_222_attr_mode_222_we = addr_hit[223] & reg_we & !reg_error;
  assign clicint_222_attr_mode_222_wd = reg_wdata[23:22];

  assign clicint_222_ctl_222_we = addr_hit[223] & reg_we & !reg_error;
  assign clicint_222_ctl_222_wd = reg_wdata[31:24];

  assign clicint_223_ip_223_we = addr_hit[224] & reg_we & !reg_error;
  assign clicint_223_ip_223_wd = reg_wdata[0];

  assign clicint_223_ie_223_we = addr_hit[224] & reg_we & !reg_error;
  assign clicint_223_ie_223_wd = reg_wdata[7];

  assign clicint_223_attr_shv_223_we = addr_hit[224] & reg_we & !reg_error;
  assign clicint_223_attr_shv_223_wd = reg_wdata[16];

  assign clicint_223_attr_trig_223_we = addr_hit[224] & reg_we & !reg_error;
  assign clicint_223_attr_trig_223_wd = reg_wdata[18:17];

  assign clicint_223_attr_mode_223_we = addr_hit[224] & reg_we & !reg_error;
  assign clicint_223_attr_mode_223_wd = reg_wdata[23:22];

  assign clicint_223_ctl_223_we = addr_hit[224] & reg_we & !reg_error;
  assign clicint_223_ctl_223_wd = reg_wdata[31:24];

  assign clicint_224_ip_224_we = addr_hit[225] & reg_we & !reg_error;
  assign clicint_224_ip_224_wd = reg_wdata[0];

  assign clicint_224_ie_224_we = addr_hit[225] & reg_we & !reg_error;
  assign clicint_224_ie_224_wd = reg_wdata[7];

  assign clicint_224_attr_shv_224_we = addr_hit[225] & reg_we & !reg_error;
  assign clicint_224_attr_shv_224_wd = reg_wdata[16];

  assign clicint_224_attr_trig_224_we = addr_hit[225] & reg_we & !reg_error;
  assign clicint_224_attr_trig_224_wd = reg_wdata[18:17];

  assign clicint_224_attr_mode_224_we = addr_hit[225] & reg_we & !reg_error;
  assign clicint_224_attr_mode_224_wd = reg_wdata[23:22];

  assign clicint_224_ctl_224_we = addr_hit[225] & reg_we & !reg_error;
  assign clicint_224_ctl_224_wd = reg_wdata[31:24];

  assign clicint_225_ip_225_we = addr_hit[226] & reg_we & !reg_error;
  assign clicint_225_ip_225_wd = reg_wdata[0];

  assign clicint_225_ie_225_we = addr_hit[226] & reg_we & !reg_error;
  assign clicint_225_ie_225_wd = reg_wdata[7];

  assign clicint_225_attr_shv_225_we = addr_hit[226] & reg_we & !reg_error;
  assign clicint_225_attr_shv_225_wd = reg_wdata[16];

  assign clicint_225_attr_trig_225_we = addr_hit[226] & reg_we & !reg_error;
  assign clicint_225_attr_trig_225_wd = reg_wdata[18:17];

  assign clicint_225_attr_mode_225_we = addr_hit[226] & reg_we & !reg_error;
  assign clicint_225_attr_mode_225_wd = reg_wdata[23:22];

  assign clicint_225_ctl_225_we = addr_hit[226] & reg_we & !reg_error;
  assign clicint_225_ctl_225_wd = reg_wdata[31:24];

  assign clicint_226_ip_226_we = addr_hit[227] & reg_we & !reg_error;
  assign clicint_226_ip_226_wd = reg_wdata[0];

  assign clicint_226_ie_226_we = addr_hit[227] & reg_we & !reg_error;
  assign clicint_226_ie_226_wd = reg_wdata[7];

  assign clicint_226_attr_shv_226_we = addr_hit[227] & reg_we & !reg_error;
  assign clicint_226_attr_shv_226_wd = reg_wdata[16];

  assign clicint_226_attr_trig_226_we = addr_hit[227] & reg_we & !reg_error;
  assign clicint_226_attr_trig_226_wd = reg_wdata[18:17];

  assign clicint_226_attr_mode_226_we = addr_hit[227] & reg_we & !reg_error;
  assign clicint_226_attr_mode_226_wd = reg_wdata[23:22];

  assign clicint_226_ctl_226_we = addr_hit[227] & reg_we & !reg_error;
  assign clicint_226_ctl_226_wd = reg_wdata[31:24];

  assign clicint_227_ip_227_we = addr_hit[228] & reg_we & !reg_error;
  assign clicint_227_ip_227_wd = reg_wdata[0];

  assign clicint_227_ie_227_we = addr_hit[228] & reg_we & !reg_error;
  assign clicint_227_ie_227_wd = reg_wdata[7];

  assign clicint_227_attr_shv_227_we = addr_hit[228] & reg_we & !reg_error;
  assign clicint_227_attr_shv_227_wd = reg_wdata[16];

  assign clicint_227_attr_trig_227_we = addr_hit[228] & reg_we & !reg_error;
  assign clicint_227_attr_trig_227_wd = reg_wdata[18:17];

  assign clicint_227_attr_mode_227_we = addr_hit[228] & reg_we & !reg_error;
  assign clicint_227_attr_mode_227_wd = reg_wdata[23:22];

  assign clicint_227_ctl_227_we = addr_hit[228] & reg_we & !reg_error;
  assign clicint_227_ctl_227_wd = reg_wdata[31:24];

  assign clicint_228_ip_228_we = addr_hit[229] & reg_we & !reg_error;
  assign clicint_228_ip_228_wd = reg_wdata[0];

  assign clicint_228_ie_228_we = addr_hit[229] & reg_we & !reg_error;
  assign clicint_228_ie_228_wd = reg_wdata[7];

  assign clicint_228_attr_shv_228_we = addr_hit[229] & reg_we & !reg_error;
  assign clicint_228_attr_shv_228_wd = reg_wdata[16];

  assign clicint_228_attr_trig_228_we = addr_hit[229] & reg_we & !reg_error;
  assign clicint_228_attr_trig_228_wd = reg_wdata[18:17];

  assign clicint_228_attr_mode_228_we = addr_hit[229] & reg_we & !reg_error;
  assign clicint_228_attr_mode_228_wd = reg_wdata[23:22];

  assign clicint_228_ctl_228_we = addr_hit[229] & reg_we & !reg_error;
  assign clicint_228_ctl_228_wd = reg_wdata[31:24];

  assign clicint_229_ip_229_we = addr_hit[230] & reg_we & !reg_error;
  assign clicint_229_ip_229_wd = reg_wdata[0];

  assign clicint_229_ie_229_we = addr_hit[230] & reg_we & !reg_error;
  assign clicint_229_ie_229_wd = reg_wdata[7];

  assign clicint_229_attr_shv_229_we = addr_hit[230] & reg_we & !reg_error;
  assign clicint_229_attr_shv_229_wd = reg_wdata[16];

  assign clicint_229_attr_trig_229_we = addr_hit[230] & reg_we & !reg_error;
  assign clicint_229_attr_trig_229_wd = reg_wdata[18:17];

  assign clicint_229_attr_mode_229_we = addr_hit[230] & reg_we & !reg_error;
  assign clicint_229_attr_mode_229_wd = reg_wdata[23:22];

  assign clicint_229_ctl_229_we = addr_hit[230] & reg_we & !reg_error;
  assign clicint_229_ctl_229_wd = reg_wdata[31:24];

  assign clicint_230_ip_230_we = addr_hit[231] & reg_we & !reg_error;
  assign clicint_230_ip_230_wd = reg_wdata[0];

  assign clicint_230_ie_230_we = addr_hit[231] & reg_we & !reg_error;
  assign clicint_230_ie_230_wd = reg_wdata[7];

  assign clicint_230_attr_shv_230_we = addr_hit[231] & reg_we & !reg_error;
  assign clicint_230_attr_shv_230_wd = reg_wdata[16];

  assign clicint_230_attr_trig_230_we = addr_hit[231] & reg_we & !reg_error;
  assign clicint_230_attr_trig_230_wd = reg_wdata[18:17];

  assign clicint_230_attr_mode_230_we = addr_hit[231] & reg_we & !reg_error;
  assign clicint_230_attr_mode_230_wd = reg_wdata[23:22];

  assign clicint_230_ctl_230_we = addr_hit[231] & reg_we & !reg_error;
  assign clicint_230_ctl_230_wd = reg_wdata[31:24];

  assign clicint_231_ip_231_we = addr_hit[232] & reg_we & !reg_error;
  assign clicint_231_ip_231_wd = reg_wdata[0];

  assign clicint_231_ie_231_we = addr_hit[232] & reg_we & !reg_error;
  assign clicint_231_ie_231_wd = reg_wdata[7];

  assign clicint_231_attr_shv_231_we = addr_hit[232] & reg_we & !reg_error;
  assign clicint_231_attr_shv_231_wd = reg_wdata[16];

  assign clicint_231_attr_trig_231_we = addr_hit[232] & reg_we & !reg_error;
  assign clicint_231_attr_trig_231_wd = reg_wdata[18:17];

  assign clicint_231_attr_mode_231_we = addr_hit[232] & reg_we & !reg_error;
  assign clicint_231_attr_mode_231_wd = reg_wdata[23:22];

  assign clicint_231_ctl_231_we = addr_hit[232] & reg_we & !reg_error;
  assign clicint_231_ctl_231_wd = reg_wdata[31:24];

  assign clicint_232_ip_232_we = addr_hit[233] & reg_we & !reg_error;
  assign clicint_232_ip_232_wd = reg_wdata[0];

  assign clicint_232_ie_232_we = addr_hit[233] & reg_we & !reg_error;
  assign clicint_232_ie_232_wd = reg_wdata[7];

  assign clicint_232_attr_shv_232_we = addr_hit[233] & reg_we & !reg_error;
  assign clicint_232_attr_shv_232_wd = reg_wdata[16];

  assign clicint_232_attr_trig_232_we = addr_hit[233] & reg_we & !reg_error;
  assign clicint_232_attr_trig_232_wd = reg_wdata[18:17];

  assign clicint_232_attr_mode_232_we = addr_hit[233] & reg_we & !reg_error;
  assign clicint_232_attr_mode_232_wd = reg_wdata[23:22];

  assign clicint_232_ctl_232_we = addr_hit[233] & reg_we & !reg_error;
  assign clicint_232_ctl_232_wd = reg_wdata[31:24];

  assign clicint_233_ip_233_we = addr_hit[234] & reg_we & !reg_error;
  assign clicint_233_ip_233_wd = reg_wdata[0];

  assign clicint_233_ie_233_we = addr_hit[234] & reg_we & !reg_error;
  assign clicint_233_ie_233_wd = reg_wdata[7];

  assign clicint_233_attr_shv_233_we = addr_hit[234] & reg_we & !reg_error;
  assign clicint_233_attr_shv_233_wd = reg_wdata[16];

  assign clicint_233_attr_trig_233_we = addr_hit[234] & reg_we & !reg_error;
  assign clicint_233_attr_trig_233_wd = reg_wdata[18:17];

  assign clicint_233_attr_mode_233_we = addr_hit[234] & reg_we & !reg_error;
  assign clicint_233_attr_mode_233_wd = reg_wdata[23:22];

  assign clicint_233_ctl_233_we = addr_hit[234] & reg_we & !reg_error;
  assign clicint_233_ctl_233_wd = reg_wdata[31:24];

  assign clicint_234_ip_234_we = addr_hit[235] & reg_we & !reg_error;
  assign clicint_234_ip_234_wd = reg_wdata[0];

  assign clicint_234_ie_234_we = addr_hit[235] & reg_we & !reg_error;
  assign clicint_234_ie_234_wd = reg_wdata[7];

  assign clicint_234_attr_shv_234_we = addr_hit[235] & reg_we & !reg_error;
  assign clicint_234_attr_shv_234_wd = reg_wdata[16];

  assign clicint_234_attr_trig_234_we = addr_hit[235] & reg_we & !reg_error;
  assign clicint_234_attr_trig_234_wd = reg_wdata[18:17];

  assign clicint_234_attr_mode_234_we = addr_hit[235] & reg_we & !reg_error;
  assign clicint_234_attr_mode_234_wd = reg_wdata[23:22];

  assign clicint_234_ctl_234_we = addr_hit[235] & reg_we & !reg_error;
  assign clicint_234_ctl_234_wd = reg_wdata[31:24];

  assign clicint_235_ip_235_we = addr_hit[236] & reg_we & !reg_error;
  assign clicint_235_ip_235_wd = reg_wdata[0];

  assign clicint_235_ie_235_we = addr_hit[236] & reg_we & !reg_error;
  assign clicint_235_ie_235_wd = reg_wdata[7];

  assign clicint_235_attr_shv_235_we = addr_hit[236] & reg_we & !reg_error;
  assign clicint_235_attr_shv_235_wd = reg_wdata[16];

  assign clicint_235_attr_trig_235_we = addr_hit[236] & reg_we & !reg_error;
  assign clicint_235_attr_trig_235_wd = reg_wdata[18:17];

  assign clicint_235_attr_mode_235_we = addr_hit[236] & reg_we & !reg_error;
  assign clicint_235_attr_mode_235_wd = reg_wdata[23:22];

  assign clicint_235_ctl_235_we = addr_hit[236] & reg_we & !reg_error;
  assign clicint_235_ctl_235_wd = reg_wdata[31:24];

  assign clicint_236_ip_236_we = addr_hit[237] & reg_we & !reg_error;
  assign clicint_236_ip_236_wd = reg_wdata[0];

  assign clicint_236_ie_236_we = addr_hit[237] & reg_we & !reg_error;
  assign clicint_236_ie_236_wd = reg_wdata[7];

  assign clicint_236_attr_shv_236_we = addr_hit[237] & reg_we & !reg_error;
  assign clicint_236_attr_shv_236_wd = reg_wdata[16];

  assign clicint_236_attr_trig_236_we = addr_hit[237] & reg_we & !reg_error;
  assign clicint_236_attr_trig_236_wd = reg_wdata[18:17];

  assign clicint_236_attr_mode_236_we = addr_hit[237] & reg_we & !reg_error;
  assign clicint_236_attr_mode_236_wd = reg_wdata[23:22];

  assign clicint_236_ctl_236_we = addr_hit[237] & reg_we & !reg_error;
  assign clicint_236_ctl_236_wd = reg_wdata[31:24];

  assign clicint_237_ip_237_we = addr_hit[238] & reg_we & !reg_error;
  assign clicint_237_ip_237_wd = reg_wdata[0];

  assign clicint_237_ie_237_we = addr_hit[238] & reg_we & !reg_error;
  assign clicint_237_ie_237_wd = reg_wdata[7];

  assign clicint_237_attr_shv_237_we = addr_hit[238] & reg_we & !reg_error;
  assign clicint_237_attr_shv_237_wd = reg_wdata[16];

  assign clicint_237_attr_trig_237_we = addr_hit[238] & reg_we & !reg_error;
  assign clicint_237_attr_trig_237_wd = reg_wdata[18:17];

  assign clicint_237_attr_mode_237_we = addr_hit[238] & reg_we & !reg_error;
  assign clicint_237_attr_mode_237_wd = reg_wdata[23:22];

  assign clicint_237_ctl_237_we = addr_hit[238] & reg_we & !reg_error;
  assign clicint_237_ctl_237_wd = reg_wdata[31:24];

  assign clicint_238_ip_238_we = addr_hit[239] & reg_we & !reg_error;
  assign clicint_238_ip_238_wd = reg_wdata[0];

  assign clicint_238_ie_238_we = addr_hit[239] & reg_we & !reg_error;
  assign clicint_238_ie_238_wd = reg_wdata[7];

  assign clicint_238_attr_shv_238_we = addr_hit[239] & reg_we & !reg_error;
  assign clicint_238_attr_shv_238_wd = reg_wdata[16];

  assign clicint_238_attr_trig_238_we = addr_hit[239] & reg_we & !reg_error;
  assign clicint_238_attr_trig_238_wd = reg_wdata[18:17];

  assign clicint_238_attr_mode_238_we = addr_hit[239] & reg_we & !reg_error;
  assign clicint_238_attr_mode_238_wd = reg_wdata[23:22];

  assign clicint_238_ctl_238_we = addr_hit[239] & reg_we & !reg_error;
  assign clicint_238_ctl_238_wd = reg_wdata[31:24];

  assign clicint_239_ip_239_we = addr_hit[240] & reg_we & !reg_error;
  assign clicint_239_ip_239_wd = reg_wdata[0];

  assign clicint_239_ie_239_we = addr_hit[240] & reg_we & !reg_error;
  assign clicint_239_ie_239_wd = reg_wdata[7];

  assign clicint_239_attr_shv_239_we = addr_hit[240] & reg_we & !reg_error;
  assign clicint_239_attr_shv_239_wd = reg_wdata[16];

  assign clicint_239_attr_trig_239_we = addr_hit[240] & reg_we & !reg_error;
  assign clicint_239_attr_trig_239_wd = reg_wdata[18:17];

  assign clicint_239_attr_mode_239_we = addr_hit[240] & reg_we & !reg_error;
  assign clicint_239_attr_mode_239_wd = reg_wdata[23:22];

  assign clicint_239_ctl_239_we = addr_hit[240] & reg_we & !reg_error;
  assign clicint_239_ctl_239_wd = reg_wdata[31:24];

  assign clicint_240_ip_240_we = addr_hit[241] & reg_we & !reg_error;
  assign clicint_240_ip_240_wd = reg_wdata[0];

  assign clicint_240_ie_240_we = addr_hit[241] & reg_we & !reg_error;
  assign clicint_240_ie_240_wd = reg_wdata[7];

  assign clicint_240_attr_shv_240_we = addr_hit[241] & reg_we & !reg_error;
  assign clicint_240_attr_shv_240_wd = reg_wdata[16];

  assign clicint_240_attr_trig_240_we = addr_hit[241] & reg_we & !reg_error;
  assign clicint_240_attr_trig_240_wd = reg_wdata[18:17];

  assign clicint_240_attr_mode_240_we = addr_hit[241] & reg_we & !reg_error;
  assign clicint_240_attr_mode_240_wd = reg_wdata[23:22];

  assign clicint_240_ctl_240_we = addr_hit[241] & reg_we & !reg_error;
  assign clicint_240_ctl_240_wd = reg_wdata[31:24];

  assign clicint_241_ip_241_we = addr_hit[242] & reg_we & !reg_error;
  assign clicint_241_ip_241_wd = reg_wdata[0];

  assign clicint_241_ie_241_we = addr_hit[242] & reg_we & !reg_error;
  assign clicint_241_ie_241_wd = reg_wdata[7];

  assign clicint_241_attr_shv_241_we = addr_hit[242] & reg_we & !reg_error;
  assign clicint_241_attr_shv_241_wd = reg_wdata[16];

  assign clicint_241_attr_trig_241_we = addr_hit[242] & reg_we & !reg_error;
  assign clicint_241_attr_trig_241_wd = reg_wdata[18:17];

  assign clicint_241_attr_mode_241_we = addr_hit[242] & reg_we & !reg_error;
  assign clicint_241_attr_mode_241_wd = reg_wdata[23:22];

  assign clicint_241_ctl_241_we = addr_hit[242] & reg_we & !reg_error;
  assign clicint_241_ctl_241_wd = reg_wdata[31:24];

  assign clicint_242_ip_242_we = addr_hit[243] & reg_we & !reg_error;
  assign clicint_242_ip_242_wd = reg_wdata[0];

  assign clicint_242_ie_242_we = addr_hit[243] & reg_we & !reg_error;
  assign clicint_242_ie_242_wd = reg_wdata[7];

  assign clicint_242_attr_shv_242_we = addr_hit[243] & reg_we & !reg_error;
  assign clicint_242_attr_shv_242_wd = reg_wdata[16];

  assign clicint_242_attr_trig_242_we = addr_hit[243] & reg_we & !reg_error;
  assign clicint_242_attr_trig_242_wd = reg_wdata[18:17];

  assign clicint_242_attr_mode_242_we = addr_hit[243] & reg_we & !reg_error;
  assign clicint_242_attr_mode_242_wd = reg_wdata[23:22];

  assign clicint_242_ctl_242_we = addr_hit[243] & reg_we & !reg_error;
  assign clicint_242_ctl_242_wd = reg_wdata[31:24];

  assign clicint_243_ip_243_we = addr_hit[244] & reg_we & !reg_error;
  assign clicint_243_ip_243_wd = reg_wdata[0];

  assign clicint_243_ie_243_we = addr_hit[244] & reg_we & !reg_error;
  assign clicint_243_ie_243_wd = reg_wdata[7];

  assign clicint_243_attr_shv_243_we = addr_hit[244] & reg_we & !reg_error;
  assign clicint_243_attr_shv_243_wd = reg_wdata[16];

  assign clicint_243_attr_trig_243_we = addr_hit[244] & reg_we & !reg_error;
  assign clicint_243_attr_trig_243_wd = reg_wdata[18:17];

  assign clicint_243_attr_mode_243_we = addr_hit[244] & reg_we & !reg_error;
  assign clicint_243_attr_mode_243_wd = reg_wdata[23:22];

  assign clicint_243_ctl_243_we = addr_hit[244] & reg_we & !reg_error;
  assign clicint_243_ctl_243_wd = reg_wdata[31:24];

  assign clicint_244_ip_244_we = addr_hit[245] & reg_we & !reg_error;
  assign clicint_244_ip_244_wd = reg_wdata[0];

  assign clicint_244_ie_244_we = addr_hit[245] & reg_we & !reg_error;
  assign clicint_244_ie_244_wd = reg_wdata[7];

  assign clicint_244_attr_shv_244_we = addr_hit[245] & reg_we & !reg_error;
  assign clicint_244_attr_shv_244_wd = reg_wdata[16];

  assign clicint_244_attr_trig_244_we = addr_hit[245] & reg_we & !reg_error;
  assign clicint_244_attr_trig_244_wd = reg_wdata[18:17];

  assign clicint_244_attr_mode_244_we = addr_hit[245] & reg_we & !reg_error;
  assign clicint_244_attr_mode_244_wd = reg_wdata[23:22];

  assign clicint_244_ctl_244_we = addr_hit[245] & reg_we & !reg_error;
  assign clicint_244_ctl_244_wd = reg_wdata[31:24];

  assign clicint_245_ip_245_we = addr_hit[246] & reg_we & !reg_error;
  assign clicint_245_ip_245_wd = reg_wdata[0];

  assign clicint_245_ie_245_we = addr_hit[246] & reg_we & !reg_error;
  assign clicint_245_ie_245_wd = reg_wdata[7];

  assign clicint_245_attr_shv_245_we = addr_hit[246] & reg_we & !reg_error;
  assign clicint_245_attr_shv_245_wd = reg_wdata[16];

  assign clicint_245_attr_trig_245_we = addr_hit[246] & reg_we & !reg_error;
  assign clicint_245_attr_trig_245_wd = reg_wdata[18:17];

  assign clicint_245_attr_mode_245_we = addr_hit[246] & reg_we & !reg_error;
  assign clicint_245_attr_mode_245_wd = reg_wdata[23:22];

  assign clicint_245_ctl_245_we = addr_hit[246] & reg_we & !reg_error;
  assign clicint_245_ctl_245_wd = reg_wdata[31:24];

  assign clicint_246_ip_246_we = addr_hit[247] & reg_we & !reg_error;
  assign clicint_246_ip_246_wd = reg_wdata[0];

  assign clicint_246_ie_246_we = addr_hit[247] & reg_we & !reg_error;
  assign clicint_246_ie_246_wd = reg_wdata[7];

  assign clicint_246_attr_shv_246_we = addr_hit[247] & reg_we & !reg_error;
  assign clicint_246_attr_shv_246_wd = reg_wdata[16];

  assign clicint_246_attr_trig_246_we = addr_hit[247] & reg_we & !reg_error;
  assign clicint_246_attr_trig_246_wd = reg_wdata[18:17];

  assign clicint_246_attr_mode_246_we = addr_hit[247] & reg_we & !reg_error;
  assign clicint_246_attr_mode_246_wd = reg_wdata[23:22];

  assign clicint_246_ctl_246_we = addr_hit[247] & reg_we & !reg_error;
  assign clicint_246_ctl_246_wd = reg_wdata[31:24];

  assign clicint_247_ip_247_we = addr_hit[248] & reg_we & !reg_error;
  assign clicint_247_ip_247_wd = reg_wdata[0];

  assign clicint_247_ie_247_we = addr_hit[248] & reg_we & !reg_error;
  assign clicint_247_ie_247_wd = reg_wdata[7];

  assign clicint_247_attr_shv_247_we = addr_hit[248] & reg_we & !reg_error;
  assign clicint_247_attr_shv_247_wd = reg_wdata[16];

  assign clicint_247_attr_trig_247_we = addr_hit[248] & reg_we & !reg_error;
  assign clicint_247_attr_trig_247_wd = reg_wdata[18:17];

  assign clicint_247_attr_mode_247_we = addr_hit[248] & reg_we & !reg_error;
  assign clicint_247_attr_mode_247_wd = reg_wdata[23:22];

  assign clicint_247_ctl_247_we = addr_hit[248] & reg_we & !reg_error;
  assign clicint_247_ctl_247_wd = reg_wdata[31:24];

  assign clicint_248_ip_248_we = addr_hit[249] & reg_we & !reg_error;
  assign clicint_248_ip_248_wd = reg_wdata[0];

  assign clicint_248_ie_248_we = addr_hit[249] & reg_we & !reg_error;
  assign clicint_248_ie_248_wd = reg_wdata[7];

  assign clicint_248_attr_shv_248_we = addr_hit[249] & reg_we & !reg_error;
  assign clicint_248_attr_shv_248_wd = reg_wdata[16];

  assign clicint_248_attr_trig_248_we = addr_hit[249] & reg_we & !reg_error;
  assign clicint_248_attr_trig_248_wd = reg_wdata[18:17];

  assign clicint_248_attr_mode_248_we = addr_hit[249] & reg_we & !reg_error;
  assign clicint_248_attr_mode_248_wd = reg_wdata[23:22];

  assign clicint_248_ctl_248_we = addr_hit[249] & reg_we & !reg_error;
  assign clicint_248_ctl_248_wd = reg_wdata[31:24];

  assign clicint_249_ip_249_we = addr_hit[250] & reg_we & !reg_error;
  assign clicint_249_ip_249_wd = reg_wdata[0];

  assign clicint_249_ie_249_we = addr_hit[250] & reg_we & !reg_error;
  assign clicint_249_ie_249_wd = reg_wdata[7];

  assign clicint_249_attr_shv_249_we = addr_hit[250] & reg_we & !reg_error;
  assign clicint_249_attr_shv_249_wd = reg_wdata[16];

  assign clicint_249_attr_trig_249_we = addr_hit[250] & reg_we & !reg_error;
  assign clicint_249_attr_trig_249_wd = reg_wdata[18:17];

  assign clicint_249_attr_mode_249_we = addr_hit[250] & reg_we & !reg_error;
  assign clicint_249_attr_mode_249_wd = reg_wdata[23:22];

  assign clicint_249_ctl_249_we = addr_hit[250] & reg_we & !reg_error;
  assign clicint_249_ctl_249_wd = reg_wdata[31:24];

  assign clicint_250_ip_250_we = addr_hit[251] & reg_we & !reg_error;
  assign clicint_250_ip_250_wd = reg_wdata[0];

  assign clicint_250_ie_250_we = addr_hit[251] & reg_we & !reg_error;
  assign clicint_250_ie_250_wd = reg_wdata[7];

  assign clicint_250_attr_shv_250_we = addr_hit[251] & reg_we & !reg_error;
  assign clicint_250_attr_shv_250_wd = reg_wdata[16];

  assign clicint_250_attr_trig_250_we = addr_hit[251] & reg_we & !reg_error;
  assign clicint_250_attr_trig_250_wd = reg_wdata[18:17];

  assign clicint_250_attr_mode_250_we = addr_hit[251] & reg_we & !reg_error;
  assign clicint_250_attr_mode_250_wd = reg_wdata[23:22];

  assign clicint_250_ctl_250_we = addr_hit[251] & reg_we & !reg_error;
  assign clicint_250_ctl_250_wd = reg_wdata[31:24];

  assign clicint_251_ip_251_we = addr_hit[252] & reg_we & !reg_error;
  assign clicint_251_ip_251_wd = reg_wdata[0];

  assign clicint_251_ie_251_we = addr_hit[252] & reg_we & !reg_error;
  assign clicint_251_ie_251_wd = reg_wdata[7];

  assign clicint_251_attr_shv_251_we = addr_hit[252] & reg_we & !reg_error;
  assign clicint_251_attr_shv_251_wd = reg_wdata[16];

  assign clicint_251_attr_trig_251_we = addr_hit[252] & reg_we & !reg_error;
  assign clicint_251_attr_trig_251_wd = reg_wdata[18:17];

  assign clicint_251_attr_mode_251_we = addr_hit[252] & reg_we & !reg_error;
  assign clicint_251_attr_mode_251_wd = reg_wdata[23:22];

  assign clicint_251_ctl_251_we = addr_hit[252] & reg_we & !reg_error;
  assign clicint_251_ctl_251_wd = reg_wdata[31:24];

  assign clicint_252_ip_252_we = addr_hit[253] & reg_we & !reg_error;
  assign clicint_252_ip_252_wd = reg_wdata[0];

  assign clicint_252_ie_252_we = addr_hit[253] & reg_we & !reg_error;
  assign clicint_252_ie_252_wd = reg_wdata[7];

  assign clicint_252_attr_shv_252_we = addr_hit[253] & reg_we & !reg_error;
  assign clicint_252_attr_shv_252_wd = reg_wdata[16];

  assign clicint_252_attr_trig_252_we = addr_hit[253] & reg_we & !reg_error;
  assign clicint_252_attr_trig_252_wd = reg_wdata[18:17];

  assign clicint_252_attr_mode_252_we = addr_hit[253] & reg_we & !reg_error;
  assign clicint_252_attr_mode_252_wd = reg_wdata[23:22];

  assign clicint_252_ctl_252_we = addr_hit[253] & reg_we & !reg_error;
  assign clicint_252_ctl_252_wd = reg_wdata[31:24];

  assign clicint_253_ip_253_we = addr_hit[254] & reg_we & !reg_error;
  assign clicint_253_ip_253_wd = reg_wdata[0];

  assign clicint_253_ie_253_we = addr_hit[254] & reg_we & !reg_error;
  assign clicint_253_ie_253_wd = reg_wdata[7];

  assign clicint_253_attr_shv_253_we = addr_hit[254] & reg_we & !reg_error;
  assign clicint_253_attr_shv_253_wd = reg_wdata[16];

  assign clicint_253_attr_trig_253_we = addr_hit[254] & reg_we & !reg_error;
  assign clicint_253_attr_trig_253_wd = reg_wdata[18:17];

  assign clicint_253_attr_mode_253_we = addr_hit[254] & reg_we & !reg_error;
  assign clicint_253_attr_mode_253_wd = reg_wdata[23:22];

  assign clicint_253_ctl_253_we = addr_hit[254] & reg_we & !reg_error;
  assign clicint_253_ctl_253_wd = reg_wdata[31:24];

  assign clicint_254_ip_254_we = addr_hit[255] & reg_we & !reg_error;
  assign clicint_254_ip_254_wd = reg_wdata[0];

  assign clicint_254_ie_254_we = addr_hit[255] & reg_we & !reg_error;
  assign clicint_254_ie_254_wd = reg_wdata[7];

  assign clicint_254_attr_shv_254_we = addr_hit[255] & reg_we & !reg_error;
  assign clicint_254_attr_shv_254_wd = reg_wdata[16];

  assign clicint_254_attr_trig_254_we = addr_hit[255] & reg_we & !reg_error;
  assign clicint_254_attr_trig_254_wd = reg_wdata[18:17];

  assign clicint_254_attr_mode_254_we = addr_hit[255] & reg_we & !reg_error;
  assign clicint_254_attr_mode_254_wd = reg_wdata[23:22];

  assign clicint_254_ctl_254_we = addr_hit[255] & reg_we & !reg_error;
  assign clicint_254_ctl_254_wd = reg_wdata[31:24];

  assign clicint_255_ip_255_we = addr_hit[256] & reg_we & !reg_error;
  assign clicint_255_ip_255_wd = reg_wdata[0];

  assign clicint_255_ie_255_we = addr_hit[256] & reg_we & !reg_error;
  assign clicint_255_ie_255_wd = reg_wdata[7];

  assign clicint_255_attr_shv_255_we = addr_hit[256] & reg_we & !reg_error;
  assign clicint_255_attr_shv_255_wd = reg_wdata[16];

  assign clicint_255_attr_trig_255_we = addr_hit[256] & reg_we & !reg_error;
  assign clicint_255_attr_trig_255_wd = reg_wdata[18:17];

  assign clicint_255_attr_mode_255_we = addr_hit[256] & reg_we & !reg_error;
  assign clicint_255_attr_mode_255_wd = reg_wdata[23:22];

  assign clicint_255_ctl_255_we = addr_hit[256] & reg_we & !reg_error;
  assign clicint_255_ctl_255_wd = reg_wdata[31:24];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[3:0] = mcliccfg_mnlbits_qs;
        reg_rdata_next[5:4] = mcliccfg_nmbits_qs;
        reg_rdata_next[19:16] = mcliccfg_snlbits_qs;
        reg_rdata_next[27:24] = mcliccfg_unlbits_qs;
        reg_rdata_next[31:28] = mcliccfg_reserved_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = clicint_0_ip_0_qs;
        reg_rdata_next[7] = clicint_0_ie_0_qs;
        reg_rdata_next[16] = clicint_0_attr_shv_0_qs;
        reg_rdata_next[18:17] = clicint_0_attr_trig_0_qs;
        reg_rdata_next[23:22] = clicint_0_attr_mode_0_qs;
        reg_rdata_next[31:24] = clicint_0_ctl_0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = clicint_1_ip_1_qs;
        reg_rdata_next[7] = clicint_1_ie_1_qs;
        reg_rdata_next[16] = clicint_1_attr_shv_1_qs;
        reg_rdata_next[18:17] = clicint_1_attr_trig_1_qs;
        reg_rdata_next[23:22] = clicint_1_attr_mode_1_qs;
        reg_rdata_next[31:24] = clicint_1_ctl_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = clicint_2_ip_2_qs;
        reg_rdata_next[7] = clicint_2_ie_2_qs;
        reg_rdata_next[16] = clicint_2_attr_shv_2_qs;
        reg_rdata_next[18:17] = clicint_2_attr_trig_2_qs;
        reg_rdata_next[23:22] = clicint_2_attr_mode_2_qs;
        reg_rdata_next[31:24] = clicint_2_ctl_2_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = clicint_3_ip_3_qs;
        reg_rdata_next[7] = clicint_3_ie_3_qs;
        reg_rdata_next[16] = clicint_3_attr_shv_3_qs;
        reg_rdata_next[18:17] = clicint_3_attr_trig_3_qs;
        reg_rdata_next[23:22] = clicint_3_attr_mode_3_qs;
        reg_rdata_next[31:24] = clicint_3_ctl_3_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = clicint_4_ip_4_qs;
        reg_rdata_next[7] = clicint_4_ie_4_qs;
        reg_rdata_next[16] = clicint_4_attr_shv_4_qs;
        reg_rdata_next[18:17] = clicint_4_attr_trig_4_qs;
        reg_rdata_next[23:22] = clicint_4_attr_mode_4_qs;
        reg_rdata_next[31:24] = clicint_4_ctl_4_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = clicint_5_ip_5_qs;
        reg_rdata_next[7] = clicint_5_ie_5_qs;
        reg_rdata_next[16] = clicint_5_attr_shv_5_qs;
        reg_rdata_next[18:17] = clicint_5_attr_trig_5_qs;
        reg_rdata_next[23:22] = clicint_5_attr_mode_5_qs;
        reg_rdata_next[31:24] = clicint_5_ctl_5_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = clicint_6_ip_6_qs;
        reg_rdata_next[7] = clicint_6_ie_6_qs;
        reg_rdata_next[16] = clicint_6_attr_shv_6_qs;
        reg_rdata_next[18:17] = clicint_6_attr_trig_6_qs;
        reg_rdata_next[23:22] = clicint_6_attr_mode_6_qs;
        reg_rdata_next[31:24] = clicint_6_ctl_6_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = clicint_7_ip_7_qs;
        reg_rdata_next[7] = clicint_7_ie_7_qs;
        reg_rdata_next[16] = clicint_7_attr_shv_7_qs;
        reg_rdata_next[18:17] = clicint_7_attr_trig_7_qs;
        reg_rdata_next[23:22] = clicint_7_attr_mode_7_qs;
        reg_rdata_next[31:24] = clicint_7_ctl_7_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = clicint_8_ip_8_qs;
        reg_rdata_next[7] = clicint_8_ie_8_qs;
        reg_rdata_next[16] = clicint_8_attr_shv_8_qs;
        reg_rdata_next[18:17] = clicint_8_attr_trig_8_qs;
        reg_rdata_next[23:22] = clicint_8_attr_mode_8_qs;
        reg_rdata_next[31:24] = clicint_8_ctl_8_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = clicint_9_ip_9_qs;
        reg_rdata_next[7] = clicint_9_ie_9_qs;
        reg_rdata_next[16] = clicint_9_attr_shv_9_qs;
        reg_rdata_next[18:17] = clicint_9_attr_trig_9_qs;
        reg_rdata_next[23:22] = clicint_9_attr_mode_9_qs;
        reg_rdata_next[31:24] = clicint_9_ctl_9_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = clicint_10_ip_10_qs;
        reg_rdata_next[7] = clicint_10_ie_10_qs;
        reg_rdata_next[16] = clicint_10_attr_shv_10_qs;
        reg_rdata_next[18:17] = clicint_10_attr_trig_10_qs;
        reg_rdata_next[23:22] = clicint_10_attr_mode_10_qs;
        reg_rdata_next[31:24] = clicint_10_ctl_10_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = clicint_11_ip_11_qs;
        reg_rdata_next[7] = clicint_11_ie_11_qs;
        reg_rdata_next[16] = clicint_11_attr_shv_11_qs;
        reg_rdata_next[18:17] = clicint_11_attr_trig_11_qs;
        reg_rdata_next[23:22] = clicint_11_attr_mode_11_qs;
        reg_rdata_next[31:24] = clicint_11_ctl_11_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = clicint_12_ip_12_qs;
        reg_rdata_next[7] = clicint_12_ie_12_qs;
        reg_rdata_next[16] = clicint_12_attr_shv_12_qs;
        reg_rdata_next[18:17] = clicint_12_attr_trig_12_qs;
        reg_rdata_next[23:22] = clicint_12_attr_mode_12_qs;
        reg_rdata_next[31:24] = clicint_12_ctl_12_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = clicint_13_ip_13_qs;
        reg_rdata_next[7] = clicint_13_ie_13_qs;
        reg_rdata_next[16] = clicint_13_attr_shv_13_qs;
        reg_rdata_next[18:17] = clicint_13_attr_trig_13_qs;
        reg_rdata_next[23:22] = clicint_13_attr_mode_13_qs;
        reg_rdata_next[31:24] = clicint_13_ctl_13_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = clicint_14_ip_14_qs;
        reg_rdata_next[7] = clicint_14_ie_14_qs;
        reg_rdata_next[16] = clicint_14_attr_shv_14_qs;
        reg_rdata_next[18:17] = clicint_14_attr_trig_14_qs;
        reg_rdata_next[23:22] = clicint_14_attr_mode_14_qs;
        reg_rdata_next[31:24] = clicint_14_ctl_14_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = clicint_15_ip_15_qs;
        reg_rdata_next[7] = clicint_15_ie_15_qs;
        reg_rdata_next[16] = clicint_15_attr_shv_15_qs;
        reg_rdata_next[18:17] = clicint_15_attr_trig_15_qs;
        reg_rdata_next[23:22] = clicint_15_attr_mode_15_qs;
        reg_rdata_next[31:24] = clicint_15_ctl_15_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = clicint_16_ip_16_qs;
        reg_rdata_next[7] = clicint_16_ie_16_qs;
        reg_rdata_next[16] = clicint_16_attr_shv_16_qs;
        reg_rdata_next[18:17] = clicint_16_attr_trig_16_qs;
        reg_rdata_next[23:22] = clicint_16_attr_mode_16_qs;
        reg_rdata_next[31:24] = clicint_16_ctl_16_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = clicint_17_ip_17_qs;
        reg_rdata_next[7] = clicint_17_ie_17_qs;
        reg_rdata_next[16] = clicint_17_attr_shv_17_qs;
        reg_rdata_next[18:17] = clicint_17_attr_trig_17_qs;
        reg_rdata_next[23:22] = clicint_17_attr_mode_17_qs;
        reg_rdata_next[31:24] = clicint_17_ctl_17_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = clicint_18_ip_18_qs;
        reg_rdata_next[7] = clicint_18_ie_18_qs;
        reg_rdata_next[16] = clicint_18_attr_shv_18_qs;
        reg_rdata_next[18:17] = clicint_18_attr_trig_18_qs;
        reg_rdata_next[23:22] = clicint_18_attr_mode_18_qs;
        reg_rdata_next[31:24] = clicint_18_ctl_18_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = clicint_19_ip_19_qs;
        reg_rdata_next[7] = clicint_19_ie_19_qs;
        reg_rdata_next[16] = clicint_19_attr_shv_19_qs;
        reg_rdata_next[18:17] = clicint_19_attr_trig_19_qs;
        reg_rdata_next[23:22] = clicint_19_attr_mode_19_qs;
        reg_rdata_next[31:24] = clicint_19_ctl_19_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = clicint_20_ip_20_qs;
        reg_rdata_next[7] = clicint_20_ie_20_qs;
        reg_rdata_next[16] = clicint_20_attr_shv_20_qs;
        reg_rdata_next[18:17] = clicint_20_attr_trig_20_qs;
        reg_rdata_next[23:22] = clicint_20_attr_mode_20_qs;
        reg_rdata_next[31:24] = clicint_20_ctl_20_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = clicint_21_ip_21_qs;
        reg_rdata_next[7] = clicint_21_ie_21_qs;
        reg_rdata_next[16] = clicint_21_attr_shv_21_qs;
        reg_rdata_next[18:17] = clicint_21_attr_trig_21_qs;
        reg_rdata_next[23:22] = clicint_21_attr_mode_21_qs;
        reg_rdata_next[31:24] = clicint_21_ctl_21_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = clicint_22_ip_22_qs;
        reg_rdata_next[7] = clicint_22_ie_22_qs;
        reg_rdata_next[16] = clicint_22_attr_shv_22_qs;
        reg_rdata_next[18:17] = clicint_22_attr_trig_22_qs;
        reg_rdata_next[23:22] = clicint_22_attr_mode_22_qs;
        reg_rdata_next[31:24] = clicint_22_ctl_22_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = clicint_23_ip_23_qs;
        reg_rdata_next[7] = clicint_23_ie_23_qs;
        reg_rdata_next[16] = clicint_23_attr_shv_23_qs;
        reg_rdata_next[18:17] = clicint_23_attr_trig_23_qs;
        reg_rdata_next[23:22] = clicint_23_attr_mode_23_qs;
        reg_rdata_next[31:24] = clicint_23_ctl_23_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = clicint_24_ip_24_qs;
        reg_rdata_next[7] = clicint_24_ie_24_qs;
        reg_rdata_next[16] = clicint_24_attr_shv_24_qs;
        reg_rdata_next[18:17] = clicint_24_attr_trig_24_qs;
        reg_rdata_next[23:22] = clicint_24_attr_mode_24_qs;
        reg_rdata_next[31:24] = clicint_24_ctl_24_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = clicint_25_ip_25_qs;
        reg_rdata_next[7] = clicint_25_ie_25_qs;
        reg_rdata_next[16] = clicint_25_attr_shv_25_qs;
        reg_rdata_next[18:17] = clicint_25_attr_trig_25_qs;
        reg_rdata_next[23:22] = clicint_25_attr_mode_25_qs;
        reg_rdata_next[31:24] = clicint_25_ctl_25_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = clicint_26_ip_26_qs;
        reg_rdata_next[7] = clicint_26_ie_26_qs;
        reg_rdata_next[16] = clicint_26_attr_shv_26_qs;
        reg_rdata_next[18:17] = clicint_26_attr_trig_26_qs;
        reg_rdata_next[23:22] = clicint_26_attr_mode_26_qs;
        reg_rdata_next[31:24] = clicint_26_ctl_26_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = clicint_27_ip_27_qs;
        reg_rdata_next[7] = clicint_27_ie_27_qs;
        reg_rdata_next[16] = clicint_27_attr_shv_27_qs;
        reg_rdata_next[18:17] = clicint_27_attr_trig_27_qs;
        reg_rdata_next[23:22] = clicint_27_attr_mode_27_qs;
        reg_rdata_next[31:24] = clicint_27_ctl_27_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = clicint_28_ip_28_qs;
        reg_rdata_next[7] = clicint_28_ie_28_qs;
        reg_rdata_next[16] = clicint_28_attr_shv_28_qs;
        reg_rdata_next[18:17] = clicint_28_attr_trig_28_qs;
        reg_rdata_next[23:22] = clicint_28_attr_mode_28_qs;
        reg_rdata_next[31:24] = clicint_28_ctl_28_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = clicint_29_ip_29_qs;
        reg_rdata_next[7] = clicint_29_ie_29_qs;
        reg_rdata_next[16] = clicint_29_attr_shv_29_qs;
        reg_rdata_next[18:17] = clicint_29_attr_trig_29_qs;
        reg_rdata_next[23:22] = clicint_29_attr_mode_29_qs;
        reg_rdata_next[31:24] = clicint_29_ctl_29_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = clicint_30_ip_30_qs;
        reg_rdata_next[7] = clicint_30_ie_30_qs;
        reg_rdata_next[16] = clicint_30_attr_shv_30_qs;
        reg_rdata_next[18:17] = clicint_30_attr_trig_30_qs;
        reg_rdata_next[23:22] = clicint_30_attr_mode_30_qs;
        reg_rdata_next[31:24] = clicint_30_ctl_30_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = clicint_31_ip_31_qs;
        reg_rdata_next[7] = clicint_31_ie_31_qs;
        reg_rdata_next[16] = clicint_31_attr_shv_31_qs;
        reg_rdata_next[18:17] = clicint_31_attr_trig_31_qs;
        reg_rdata_next[23:22] = clicint_31_attr_mode_31_qs;
        reg_rdata_next[31:24] = clicint_31_ctl_31_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = clicint_32_ip_32_qs;
        reg_rdata_next[7] = clicint_32_ie_32_qs;
        reg_rdata_next[16] = clicint_32_attr_shv_32_qs;
        reg_rdata_next[18:17] = clicint_32_attr_trig_32_qs;
        reg_rdata_next[23:22] = clicint_32_attr_mode_32_qs;
        reg_rdata_next[31:24] = clicint_32_ctl_32_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = clicint_33_ip_33_qs;
        reg_rdata_next[7] = clicint_33_ie_33_qs;
        reg_rdata_next[16] = clicint_33_attr_shv_33_qs;
        reg_rdata_next[18:17] = clicint_33_attr_trig_33_qs;
        reg_rdata_next[23:22] = clicint_33_attr_mode_33_qs;
        reg_rdata_next[31:24] = clicint_33_ctl_33_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = clicint_34_ip_34_qs;
        reg_rdata_next[7] = clicint_34_ie_34_qs;
        reg_rdata_next[16] = clicint_34_attr_shv_34_qs;
        reg_rdata_next[18:17] = clicint_34_attr_trig_34_qs;
        reg_rdata_next[23:22] = clicint_34_attr_mode_34_qs;
        reg_rdata_next[31:24] = clicint_34_ctl_34_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = clicint_35_ip_35_qs;
        reg_rdata_next[7] = clicint_35_ie_35_qs;
        reg_rdata_next[16] = clicint_35_attr_shv_35_qs;
        reg_rdata_next[18:17] = clicint_35_attr_trig_35_qs;
        reg_rdata_next[23:22] = clicint_35_attr_mode_35_qs;
        reg_rdata_next[31:24] = clicint_35_ctl_35_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = clicint_36_ip_36_qs;
        reg_rdata_next[7] = clicint_36_ie_36_qs;
        reg_rdata_next[16] = clicint_36_attr_shv_36_qs;
        reg_rdata_next[18:17] = clicint_36_attr_trig_36_qs;
        reg_rdata_next[23:22] = clicint_36_attr_mode_36_qs;
        reg_rdata_next[31:24] = clicint_36_ctl_36_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = clicint_37_ip_37_qs;
        reg_rdata_next[7] = clicint_37_ie_37_qs;
        reg_rdata_next[16] = clicint_37_attr_shv_37_qs;
        reg_rdata_next[18:17] = clicint_37_attr_trig_37_qs;
        reg_rdata_next[23:22] = clicint_37_attr_mode_37_qs;
        reg_rdata_next[31:24] = clicint_37_ctl_37_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = clicint_38_ip_38_qs;
        reg_rdata_next[7] = clicint_38_ie_38_qs;
        reg_rdata_next[16] = clicint_38_attr_shv_38_qs;
        reg_rdata_next[18:17] = clicint_38_attr_trig_38_qs;
        reg_rdata_next[23:22] = clicint_38_attr_mode_38_qs;
        reg_rdata_next[31:24] = clicint_38_ctl_38_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = clicint_39_ip_39_qs;
        reg_rdata_next[7] = clicint_39_ie_39_qs;
        reg_rdata_next[16] = clicint_39_attr_shv_39_qs;
        reg_rdata_next[18:17] = clicint_39_attr_trig_39_qs;
        reg_rdata_next[23:22] = clicint_39_attr_mode_39_qs;
        reg_rdata_next[31:24] = clicint_39_ctl_39_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0] = clicint_40_ip_40_qs;
        reg_rdata_next[7] = clicint_40_ie_40_qs;
        reg_rdata_next[16] = clicint_40_attr_shv_40_qs;
        reg_rdata_next[18:17] = clicint_40_attr_trig_40_qs;
        reg_rdata_next[23:22] = clicint_40_attr_mode_40_qs;
        reg_rdata_next[31:24] = clicint_40_ctl_40_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = clicint_41_ip_41_qs;
        reg_rdata_next[7] = clicint_41_ie_41_qs;
        reg_rdata_next[16] = clicint_41_attr_shv_41_qs;
        reg_rdata_next[18:17] = clicint_41_attr_trig_41_qs;
        reg_rdata_next[23:22] = clicint_41_attr_mode_41_qs;
        reg_rdata_next[31:24] = clicint_41_ctl_41_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[0] = clicint_42_ip_42_qs;
        reg_rdata_next[7] = clicint_42_ie_42_qs;
        reg_rdata_next[16] = clicint_42_attr_shv_42_qs;
        reg_rdata_next[18:17] = clicint_42_attr_trig_42_qs;
        reg_rdata_next[23:22] = clicint_42_attr_mode_42_qs;
        reg_rdata_next[31:24] = clicint_42_ctl_42_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = clicint_43_ip_43_qs;
        reg_rdata_next[7] = clicint_43_ie_43_qs;
        reg_rdata_next[16] = clicint_43_attr_shv_43_qs;
        reg_rdata_next[18:17] = clicint_43_attr_trig_43_qs;
        reg_rdata_next[23:22] = clicint_43_attr_mode_43_qs;
        reg_rdata_next[31:24] = clicint_43_ctl_43_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = clicint_44_ip_44_qs;
        reg_rdata_next[7] = clicint_44_ie_44_qs;
        reg_rdata_next[16] = clicint_44_attr_shv_44_qs;
        reg_rdata_next[18:17] = clicint_44_attr_trig_44_qs;
        reg_rdata_next[23:22] = clicint_44_attr_mode_44_qs;
        reg_rdata_next[31:24] = clicint_44_ctl_44_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = clicint_45_ip_45_qs;
        reg_rdata_next[7] = clicint_45_ie_45_qs;
        reg_rdata_next[16] = clicint_45_attr_shv_45_qs;
        reg_rdata_next[18:17] = clicint_45_attr_trig_45_qs;
        reg_rdata_next[23:22] = clicint_45_attr_mode_45_qs;
        reg_rdata_next[31:24] = clicint_45_ctl_45_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[0] = clicint_46_ip_46_qs;
        reg_rdata_next[7] = clicint_46_ie_46_qs;
        reg_rdata_next[16] = clicint_46_attr_shv_46_qs;
        reg_rdata_next[18:17] = clicint_46_attr_trig_46_qs;
        reg_rdata_next[23:22] = clicint_46_attr_mode_46_qs;
        reg_rdata_next[31:24] = clicint_46_ctl_46_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = clicint_47_ip_47_qs;
        reg_rdata_next[7] = clicint_47_ie_47_qs;
        reg_rdata_next[16] = clicint_47_attr_shv_47_qs;
        reg_rdata_next[18:17] = clicint_47_attr_trig_47_qs;
        reg_rdata_next[23:22] = clicint_47_attr_mode_47_qs;
        reg_rdata_next[31:24] = clicint_47_ctl_47_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = clicint_48_ip_48_qs;
        reg_rdata_next[7] = clicint_48_ie_48_qs;
        reg_rdata_next[16] = clicint_48_attr_shv_48_qs;
        reg_rdata_next[18:17] = clicint_48_attr_trig_48_qs;
        reg_rdata_next[23:22] = clicint_48_attr_mode_48_qs;
        reg_rdata_next[31:24] = clicint_48_ctl_48_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = clicint_49_ip_49_qs;
        reg_rdata_next[7] = clicint_49_ie_49_qs;
        reg_rdata_next[16] = clicint_49_attr_shv_49_qs;
        reg_rdata_next[18:17] = clicint_49_attr_trig_49_qs;
        reg_rdata_next[23:22] = clicint_49_attr_mode_49_qs;
        reg_rdata_next[31:24] = clicint_49_ctl_49_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[0] = clicint_50_ip_50_qs;
        reg_rdata_next[7] = clicint_50_ie_50_qs;
        reg_rdata_next[16] = clicint_50_attr_shv_50_qs;
        reg_rdata_next[18:17] = clicint_50_attr_trig_50_qs;
        reg_rdata_next[23:22] = clicint_50_attr_mode_50_qs;
        reg_rdata_next[31:24] = clicint_50_ctl_50_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = clicint_51_ip_51_qs;
        reg_rdata_next[7] = clicint_51_ie_51_qs;
        reg_rdata_next[16] = clicint_51_attr_shv_51_qs;
        reg_rdata_next[18:17] = clicint_51_attr_trig_51_qs;
        reg_rdata_next[23:22] = clicint_51_attr_mode_51_qs;
        reg_rdata_next[31:24] = clicint_51_ctl_51_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[0] = clicint_52_ip_52_qs;
        reg_rdata_next[7] = clicint_52_ie_52_qs;
        reg_rdata_next[16] = clicint_52_attr_shv_52_qs;
        reg_rdata_next[18:17] = clicint_52_attr_trig_52_qs;
        reg_rdata_next[23:22] = clicint_52_attr_mode_52_qs;
        reg_rdata_next[31:24] = clicint_52_ctl_52_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = clicint_53_ip_53_qs;
        reg_rdata_next[7] = clicint_53_ie_53_qs;
        reg_rdata_next[16] = clicint_53_attr_shv_53_qs;
        reg_rdata_next[18:17] = clicint_53_attr_trig_53_qs;
        reg_rdata_next[23:22] = clicint_53_attr_mode_53_qs;
        reg_rdata_next[31:24] = clicint_53_ctl_53_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[0] = clicint_54_ip_54_qs;
        reg_rdata_next[7] = clicint_54_ie_54_qs;
        reg_rdata_next[16] = clicint_54_attr_shv_54_qs;
        reg_rdata_next[18:17] = clicint_54_attr_trig_54_qs;
        reg_rdata_next[23:22] = clicint_54_attr_mode_54_qs;
        reg_rdata_next[31:24] = clicint_54_ctl_54_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = clicint_55_ip_55_qs;
        reg_rdata_next[7] = clicint_55_ie_55_qs;
        reg_rdata_next[16] = clicint_55_attr_shv_55_qs;
        reg_rdata_next[18:17] = clicint_55_attr_trig_55_qs;
        reg_rdata_next[23:22] = clicint_55_attr_mode_55_qs;
        reg_rdata_next[31:24] = clicint_55_ctl_55_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = clicint_56_ip_56_qs;
        reg_rdata_next[7] = clicint_56_ie_56_qs;
        reg_rdata_next[16] = clicint_56_attr_shv_56_qs;
        reg_rdata_next[18:17] = clicint_56_attr_trig_56_qs;
        reg_rdata_next[23:22] = clicint_56_attr_mode_56_qs;
        reg_rdata_next[31:24] = clicint_56_ctl_56_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = clicint_57_ip_57_qs;
        reg_rdata_next[7] = clicint_57_ie_57_qs;
        reg_rdata_next[16] = clicint_57_attr_shv_57_qs;
        reg_rdata_next[18:17] = clicint_57_attr_trig_57_qs;
        reg_rdata_next[23:22] = clicint_57_attr_mode_57_qs;
        reg_rdata_next[31:24] = clicint_57_ctl_57_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = clicint_58_ip_58_qs;
        reg_rdata_next[7] = clicint_58_ie_58_qs;
        reg_rdata_next[16] = clicint_58_attr_shv_58_qs;
        reg_rdata_next[18:17] = clicint_58_attr_trig_58_qs;
        reg_rdata_next[23:22] = clicint_58_attr_mode_58_qs;
        reg_rdata_next[31:24] = clicint_58_ctl_58_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = clicint_59_ip_59_qs;
        reg_rdata_next[7] = clicint_59_ie_59_qs;
        reg_rdata_next[16] = clicint_59_attr_shv_59_qs;
        reg_rdata_next[18:17] = clicint_59_attr_trig_59_qs;
        reg_rdata_next[23:22] = clicint_59_attr_mode_59_qs;
        reg_rdata_next[31:24] = clicint_59_ctl_59_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[0] = clicint_60_ip_60_qs;
        reg_rdata_next[7] = clicint_60_ie_60_qs;
        reg_rdata_next[16] = clicint_60_attr_shv_60_qs;
        reg_rdata_next[18:17] = clicint_60_attr_trig_60_qs;
        reg_rdata_next[23:22] = clicint_60_attr_mode_60_qs;
        reg_rdata_next[31:24] = clicint_60_ctl_60_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[0] = clicint_61_ip_61_qs;
        reg_rdata_next[7] = clicint_61_ie_61_qs;
        reg_rdata_next[16] = clicint_61_attr_shv_61_qs;
        reg_rdata_next[18:17] = clicint_61_attr_trig_61_qs;
        reg_rdata_next[23:22] = clicint_61_attr_mode_61_qs;
        reg_rdata_next[31:24] = clicint_61_ctl_61_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[0] = clicint_62_ip_62_qs;
        reg_rdata_next[7] = clicint_62_ie_62_qs;
        reg_rdata_next[16] = clicint_62_attr_shv_62_qs;
        reg_rdata_next[18:17] = clicint_62_attr_trig_62_qs;
        reg_rdata_next[23:22] = clicint_62_attr_mode_62_qs;
        reg_rdata_next[31:24] = clicint_62_ctl_62_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = clicint_63_ip_63_qs;
        reg_rdata_next[7] = clicint_63_ie_63_qs;
        reg_rdata_next[16] = clicint_63_attr_shv_63_qs;
        reg_rdata_next[18:17] = clicint_63_attr_trig_63_qs;
        reg_rdata_next[23:22] = clicint_63_attr_mode_63_qs;
        reg_rdata_next[31:24] = clicint_63_ctl_63_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[0] = clicint_64_ip_64_qs;
        reg_rdata_next[7] = clicint_64_ie_64_qs;
        reg_rdata_next[16] = clicint_64_attr_shv_64_qs;
        reg_rdata_next[18:17] = clicint_64_attr_trig_64_qs;
        reg_rdata_next[23:22] = clicint_64_attr_mode_64_qs;
        reg_rdata_next[31:24] = clicint_64_ctl_64_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[0] = clicint_65_ip_65_qs;
        reg_rdata_next[7] = clicint_65_ie_65_qs;
        reg_rdata_next[16] = clicint_65_attr_shv_65_qs;
        reg_rdata_next[18:17] = clicint_65_attr_trig_65_qs;
        reg_rdata_next[23:22] = clicint_65_attr_mode_65_qs;
        reg_rdata_next[31:24] = clicint_65_ctl_65_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[0] = clicint_66_ip_66_qs;
        reg_rdata_next[7] = clicint_66_ie_66_qs;
        reg_rdata_next[16] = clicint_66_attr_shv_66_qs;
        reg_rdata_next[18:17] = clicint_66_attr_trig_66_qs;
        reg_rdata_next[23:22] = clicint_66_attr_mode_66_qs;
        reg_rdata_next[31:24] = clicint_66_ctl_66_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = clicint_67_ip_67_qs;
        reg_rdata_next[7] = clicint_67_ie_67_qs;
        reg_rdata_next[16] = clicint_67_attr_shv_67_qs;
        reg_rdata_next[18:17] = clicint_67_attr_trig_67_qs;
        reg_rdata_next[23:22] = clicint_67_attr_mode_67_qs;
        reg_rdata_next[31:24] = clicint_67_ctl_67_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[0] = clicint_68_ip_68_qs;
        reg_rdata_next[7] = clicint_68_ie_68_qs;
        reg_rdata_next[16] = clicint_68_attr_shv_68_qs;
        reg_rdata_next[18:17] = clicint_68_attr_trig_68_qs;
        reg_rdata_next[23:22] = clicint_68_attr_mode_68_qs;
        reg_rdata_next[31:24] = clicint_68_ctl_68_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = clicint_69_ip_69_qs;
        reg_rdata_next[7] = clicint_69_ie_69_qs;
        reg_rdata_next[16] = clicint_69_attr_shv_69_qs;
        reg_rdata_next[18:17] = clicint_69_attr_trig_69_qs;
        reg_rdata_next[23:22] = clicint_69_attr_mode_69_qs;
        reg_rdata_next[31:24] = clicint_69_ctl_69_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[0] = clicint_70_ip_70_qs;
        reg_rdata_next[7] = clicint_70_ie_70_qs;
        reg_rdata_next[16] = clicint_70_attr_shv_70_qs;
        reg_rdata_next[18:17] = clicint_70_attr_trig_70_qs;
        reg_rdata_next[23:22] = clicint_70_attr_mode_70_qs;
        reg_rdata_next[31:24] = clicint_70_ctl_70_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = clicint_71_ip_71_qs;
        reg_rdata_next[7] = clicint_71_ie_71_qs;
        reg_rdata_next[16] = clicint_71_attr_shv_71_qs;
        reg_rdata_next[18:17] = clicint_71_attr_trig_71_qs;
        reg_rdata_next[23:22] = clicint_71_attr_mode_71_qs;
        reg_rdata_next[31:24] = clicint_71_ctl_71_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[0] = clicint_72_ip_72_qs;
        reg_rdata_next[7] = clicint_72_ie_72_qs;
        reg_rdata_next[16] = clicint_72_attr_shv_72_qs;
        reg_rdata_next[18:17] = clicint_72_attr_trig_72_qs;
        reg_rdata_next[23:22] = clicint_72_attr_mode_72_qs;
        reg_rdata_next[31:24] = clicint_72_ctl_72_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = clicint_73_ip_73_qs;
        reg_rdata_next[7] = clicint_73_ie_73_qs;
        reg_rdata_next[16] = clicint_73_attr_shv_73_qs;
        reg_rdata_next[18:17] = clicint_73_attr_trig_73_qs;
        reg_rdata_next[23:22] = clicint_73_attr_mode_73_qs;
        reg_rdata_next[31:24] = clicint_73_ctl_73_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[0] = clicint_74_ip_74_qs;
        reg_rdata_next[7] = clicint_74_ie_74_qs;
        reg_rdata_next[16] = clicint_74_attr_shv_74_qs;
        reg_rdata_next[18:17] = clicint_74_attr_trig_74_qs;
        reg_rdata_next[23:22] = clicint_74_attr_mode_74_qs;
        reg_rdata_next[31:24] = clicint_74_ctl_74_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = clicint_75_ip_75_qs;
        reg_rdata_next[7] = clicint_75_ie_75_qs;
        reg_rdata_next[16] = clicint_75_attr_shv_75_qs;
        reg_rdata_next[18:17] = clicint_75_attr_trig_75_qs;
        reg_rdata_next[23:22] = clicint_75_attr_mode_75_qs;
        reg_rdata_next[31:24] = clicint_75_ctl_75_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[0] = clicint_76_ip_76_qs;
        reg_rdata_next[7] = clicint_76_ie_76_qs;
        reg_rdata_next[16] = clicint_76_attr_shv_76_qs;
        reg_rdata_next[18:17] = clicint_76_attr_trig_76_qs;
        reg_rdata_next[23:22] = clicint_76_attr_mode_76_qs;
        reg_rdata_next[31:24] = clicint_76_ctl_76_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = clicint_77_ip_77_qs;
        reg_rdata_next[7] = clicint_77_ie_77_qs;
        reg_rdata_next[16] = clicint_77_attr_shv_77_qs;
        reg_rdata_next[18:17] = clicint_77_attr_trig_77_qs;
        reg_rdata_next[23:22] = clicint_77_attr_mode_77_qs;
        reg_rdata_next[31:24] = clicint_77_ctl_77_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[0] = clicint_78_ip_78_qs;
        reg_rdata_next[7] = clicint_78_ie_78_qs;
        reg_rdata_next[16] = clicint_78_attr_shv_78_qs;
        reg_rdata_next[18:17] = clicint_78_attr_trig_78_qs;
        reg_rdata_next[23:22] = clicint_78_attr_mode_78_qs;
        reg_rdata_next[31:24] = clicint_78_ctl_78_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = clicint_79_ip_79_qs;
        reg_rdata_next[7] = clicint_79_ie_79_qs;
        reg_rdata_next[16] = clicint_79_attr_shv_79_qs;
        reg_rdata_next[18:17] = clicint_79_attr_trig_79_qs;
        reg_rdata_next[23:22] = clicint_79_attr_mode_79_qs;
        reg_rdata_next[31:24] = clicint_79_ctl_79_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[0] = clicint_80_ip_80_qs;
        reg_rdata_next[7] = clicint_80_ie_80_qs;
        reg_rdata_next[16] = clicint_80_attr_shv_80_qs;
        reg_rdata_next[18:17] = clicint_80_attr_trig_80_qs;
        reg_rdata_next[23:22] = clicint_80_attr_mode_80_qs;
        reg_rdata_next[31:24] = clicint_80_ctl_80_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = clicint_81_ip_81_qs;
        reg_rdata_next[7] = clicint_81_ie_81_qs;
        reg_rdata_next[16] = clicint_81_attr_shv_81_qs;
        reg_rdata_next[18:17] = clicint_81_attr_trig_81_qs;
        reg_rdata_next[23:22] = clicint_81_attr_mode_81_qs;
        reg_rdata_next[31:24] = clicint_81_ctl_81_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[0] = clicint_82_ip_82_qs;
        reg_rdata_next[7] = clicint_82_ie_82_qs;
        reg_rdata_next[16] = clicint_82_attr_shv_82_qs;
        reg_rdata_next[18:17] = clicint_82_attr_trig_82_qs;
        reg_rdata_next[23:22] = clicint_82_attr_mode_82_qs;
        reg_rdata_next[31:24] = clicint_82_ctl_82_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = clicint_83_ip_83_qs;
        reg_rdata_next[7] = clicint_83_ie_83_qs;
        reg_rdata_next[16] = clicint_83_attr_shv_83_qs;
        reg_rdata_next[18:17] = clicint_83_attr_trig_83_qs;
        reg_rdata_next[23:22] = clicint_83_attr_mode_83_qs;
        reg_rdata_next[31:24] = clicint_83_ctl_83_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[0] = clicint_84_ip_84_qs;
        reg_rdata_next[7] = clicint_84_ie_84_qs;
        reg_rdata_next[16] = clicint_84_attr_shv_84_qs;
        reg_rdata_next[18:17] = clicint_84_attr_trig_84_qs;
        reg_rdata_next[23:22] = clicint_84_attr_mode_84_qs;
        reg_rdata_next[31:24] = clicint_84_ctl_84_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[0] = clicint_85_ip_85_qs;
        reg_rdata_next[7] = clicint_85_ie_85_qs;
        reg_rdata_next[16] = clicint_85_attr_shv_85_qs;
        reg_rdata_next[18:17] = clicint_85_attr_trig_85_qs;
        reg_rdata_next[23:22] = clicint_85_attr_mode_85_qs;
        reg_rdata_next[31:24] = clicint_85_ctl_85_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[0] = clicint_86_ip_86_qs;
        reg_rdata_next[7] = clicint_86_ie_86_qs;
        reg_rdata_next[16] = clicint_86_attr_shv_86_qs;
        reg_rdata_next[18:17] = clicint_86_attr_trig_86_qs;
        reg_rdata_next[23:22] = clicint_86_attr_mode_86_qs;
        reg_rdata_next[31:24] = clicint_86_ctl_86_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = clicint_87_ip_87_qs;
        reg_rdata_next[7] = clicint_87_ie_87_qs;
        reg_rdata_next[16] = clicint_87_attr_shv_87_qs;
        reg_rdata_next[18:17] = clicint_87_attr_trig_87_qs;
        reg_rdata_next[23:22] = clicint_87_attr_mode_87_qs;
        reg_rdata_next[31:24] = clicint_87_ctl_87_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[0] = clicint_88_ip_88_qs;
        reg_rdata_next[7] = clicint_88_ie_88_qs;
        reg_rdata_next[16] = clicint_88_attr_shv_88_qs;
        reg_rdata_next[18:17] = clicint_88_attr_trig_88_qs;
        reg_rdata_next[23:22] = clicint_88_attr_mode_88_qs;
        reg_rdata_next[31:24] = clicint_88_ctl_88_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = clicint_89_ip_89_qs;
        reg_rdata_next[7] = clicint_89_ie_89_qs;
        reg_rdata_next[16] = clicint_89_attr_shv_89_qs;
        reg_rdata_next[18:17] = clicint_89_attr_trig_89_qs;
        reg_rdata_next[23:22] = clicint_89_attr_mode_89_qs;
        reg_rdata_next[31:24] = clicint_89_ctl_89_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = clicint_90_ip_90_qs;
        reg_rdata_next[7] = clicint_90_ie_90_qs;
        reg_rdata_next[16] = clicint_90_attr_shv_90_qs;
        reg_rdata_next[18:17] = clicint_90_attr_trig_90_qs;
        reg_rdata_next[23:22] = clicint_90_attr_mode_90_qs;
        reg_rdata_next[31:24] = clicint_90_ctl_90_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = clicint_91_ip_91_qs;
        reg_rdata_next[7] = clicint_91_ie_91_qs;
        reg_rdata_next[16] = clicint_91_attr_shv_91_qs;
        reg_rdata_next[18:17] = clicint_91_attr_trig_91_qs;
        reg_rdata_next[23:22] = clicint_91_attr_mode_91_qs;
        reg_rdata_next[31:24] = clicint_91_ctl_91_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[0] = clicint_92_ip_92_qs;
        reg_rdata_next[7] = clicint_92_ie_92_qs;
        reg_rdata_next[16] = clicint_92_attr_shv_92_qs;
        reg_rdata_next[18:17] = clicint_92_attr_trig_92_qs;
        reg_rdata_next[23:22] = clicint_92_attr_mode_92_qs;
        reg_rdata_next[31:24] = clicint_92_ctl_92_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = clicint_93_ip_93_qs;
        reg_rdata_next[7] = clicint_93_ie_93_qs;
        reg_rdata_next[16] = clicint_93_attr_shv_93_qs;
        reg_rdata_next[18:17] = clicint_93_attr_trig_93_qs;
        reg_rdata_next[23:22] = clicint_93_attr_mode_93_qs;
        reg_rdata_next[31:24] = clicint_93_ctl_93_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[0] = clicint_94_ip_94_qs;
        reg_rdata_next[7] = clicint_94_ie_94_qs;
        reg_rdata_next[16] = clicint_94_attr_shv_94_qs;
        reg_rdata_next[18:17] = clicint_94_attr_trig_94_qs;
        reg_rdata_next[23:22] = clicint_94_attr_mode_94_qs;
        reg_rdata_next[31:24] = clicint_94_ctl_94_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = clicint_95_ip_95_qs;
        reg_rdata_next[7] = clicint_95_ie_95_qs;
        reg_rdata_next[16] = clicint_95_attr_shv_95_qs;
        reg_rdata_next[18:17] = clicint_95_attr_trig_95_qs;
        reg_rdata_next[23:22] = clicint_95_attr_mode_95_qs;
        reg_rdata_next[31:24] = clicint_95_ctl_95_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[0] = clicint_96_ip_96_qs;
        reg_rdata_next[7] = clicint_96_ie_96_qs;
        reg_rdata_next[16] = clicint_96_attr_shv_96_qs;
        reg_rdata_next[18:17] = clicint_96_attr_trig_96_qs;
        reg_rdata_next[23:22] = clicint_96_attr_mode_96_qs;
        reg_rdata_next[31:24] = clicint_96_ctl_96_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[0] = clicint_97_ip_97_qs;
        reg_rdata_next[7] = clicint_97_ie_97_qs;
        reg_rdata_next[16] = clicint_97_attr_shv_97_qs;
        reg_rdata_next[18:17] = clicint_97_attr_trig_97_qs;
        reg_rdata_next[23:22] = clicint_97_attr_mode_97_qs;
        reg_rdata_next[31:24] = clicint_97_ctl_97_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[0] = clicint_98_ip_98_qs;
        reg_rdata_next[7] = clicint_98_ie_98_qs;
        reg_rdata_next[16] = clicint_98_attr_shv_98_qs;
        reg_rdata_next[18:17] = clicint_98_attr_trig_98_qs;
        reg_rdata_next[23:22] = clicint_98_attr_mode_98_qs;
        reg_rdata_next[31:24] = clicint_98_ctl_98_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[0] = clicint_99_ip_99_qs;
        reg_rdata_next[7] = clicint_99_ie_99_qs;
        reg_rdata_next[16] = clicint_99_attr_shv_99_qs;
        reg_rdata_next[18:17] = clicint_99_attr_trig_99_qs;
        reg_rdata_next[23:22] = clicint_99_attr_mode_99_qs;
        reg_rdata_next[31:24] = clicint_99_ctl_99_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[0] = clicint_100_ip_100_qs;
        reg_rdata_next[7] = clicint_100_ie_100_qs;
        reg_rdata_next[16] = clicint_100_attr_shv_100_qs;
        reg_rdata_next[18:17] = clicint_100_attr_trig_100_qs;
        reg_rdata_next[23:22] = clicint_100_attr_mode_100_qs;
        reg_rdata_next[31:24] = clicint_100_ctl_100_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[0] = clicint_101_ip_101_qs;
        reg_rdata_next[7] = clicint_101_ie_101_qs;
        reg_rdata_next[16] = clicint_101_attr_shv_101_qs;
        reg_rdata_next[18:17] = clicint_101_attr_trig_101_qs;
        reg_rdata_next[23:22] = clicint_101_attr_mode_101_qs;
        reg_rdata_next[31:24] = clicint_101_ctl_101_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[0] = clicint_102_ip_102_qs;
        reg_rdata_next[7] = clicint_102_ie_102_qs;
        reg_rdata_next[16] = clicint_102_attr_shv_102_qs;
        reg_rdata_next[18:17] = clicint_102_attr_trig_102_qs;
        reg_rdata_next[23:22] = clicint_102_attr_mode_102_qs;
        reg_rdata_next[31:24] = clicint_102_ctl_102_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[0] = clicint_103_ip_103_qs;
        reg_rdata_next[7] = clicint_103_ie_103_qs;
        reg_rdata_next[16] = clicint_103_attr_shv_103_qs;
        reg_rdata_next[18:17] = clicint_103_attr_trig_103_qs;
        reg_rdata_next[23:22] = clicint_103_attr_mode_103_qs;
        reg_rdata_next[31:24] = clicint_103_ctl_103_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[0] = clicint_104_ip_104_qs;
        reg_rdata_next[7] = clicint_104_ie_104_qs;
        reg_rdata_next[16] = clicint_104_attr_shv_104_qs;
        reg_rdata_next[18:17] = clicint_104_attr_trig_104_qs;
        reg_rdata_next[23:22] = clicint_104_attr_mode_104_qs;
        reg_rdata_next[31:24] = clicint_104_ctl_104_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[0] = clicint_105_ip_105_qs;
        reg_rdata_next[7] = clicint_105_ie_105_qs;
        reg_rdata_next[16] = clicint_105_attr_shv_105_qs;
        reg_rdata_next[18:17] = clicint_105_attr_trig_105_qs;
        reg_rdata_next[23:22] = clicint_105_attr_mode_105_qs;
        reg_rdata_next[31:24] = clicint_105_ctl_105_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[0] = clicint_106_ip_106_qs;
        reg_rdata_next[7] = clicint_106_ie_106_qs;
        reg_rdata_next[16] = clicint_106_attr_shv_106_qs;
        reg_rdata_next[18:17] = clicint_106_attr_trig_106_qs;
        reg_rdata_next[23:22] = clicint_106_attr_mode_106_qs;
        reg_rdata_next[31:24] = clicint_106_ctl_106_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[0] = clicint_107_ip_107_qs;
        reg_rdata_next[7] = clicint_107_ie_107_qs;
        reg_rdata_next[16] = clicint_107_attr_shv_107_qs;
        reg_rdata_next[18:17] = clicint_107_attr_trig_107_qs;
        reg_rdata_next[23:22] = clicint_107_attr_mode_107_qs;
        reg_rdata_next[31:24] = clicint_107_ctl_107_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[0] = clicint_108_ip_108_qs;
        reg_rdata_next[7] = clicint_108_ie_108_qs;
        reg_rdata_next[16] = clicint_108_attr_shv_108_qs;
        reg_rdata_next[18:17] = clicint_108_attr_trig_108_qs;
        reg_rdata_next[23:22] = clicint_108_attr_mode_108_qs;
        reg_rdata_next[31:24] = clicint_108_ctl_108_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[0] = clicint_109_ip_109_qs;
        reg_rdata_next[7] = clicint_109_ie_109_qs;
        reg_rdata_next[16] = clicint_109_attr_shv_109_qs;
        reg_rdata_next[18:17] = clicint_109_attr_trig_109_qs;
        reg_rdata_next[23:22] = clicint_109_attr_mode_109_qs;
        reg_rdata_next[31:24] = clicint_109_ctl_109_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[0] = clicint_110_ip_110_qs;
        reg_rdata_next[7] = clicint_110_ie_110_qs;
        reg_rdata_next[16] = clicint_110_attr_shv_110_qs;
        reg_rdata_next[18:17] = clicint_110_attr_trig_110_qs;
        reg_rdata_next[23:22] = clicint_110_attr_mode_110_qs;
        reg_rdata_next[31:24] = clicint_110_ctl_110_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[0] = clicint_111_ip_111_qs;
        reg_rdata_next[7] = clicint_111_ie_111_qs;
        reg_rdata_next[16] = clicint_111_attr_shv_111_qs;
        reg_rdata_next[18:17] = clicint_111_attr_trig_111_qs;
        reg_rdata_next[23:22] = clicint_111_attr_mode_111_qs;
        reg_rdata_next[31:24] = clicint_111_ctl_111_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[0] = clicint_112_ip_112_qs;
        reg_rdata_next[7] = clicint_112_ie_112_qs;
        reg_rdata_next[16] = clicint_112_attr_shv_112_qs;
        reg_rdata_next[18:17] = clicint_112_attr_trig_112_qs;
        reg_rdata_next[23:22] = clicint_112_attr_mode_112_qs;
        reg_rdata_next[31:24] = clicint_112_ctl_112_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[0] = clicint_113_ip_113_qs;
        reg_rdata_next[7] = clicint_113_ie_113_qs;
        reg_rdata_next[16] = clicint_113_attr_shv_113_qs;
        reg_rdata_next[18:17] = clicint_113_attr_trig_113_qs;
        reg_rdata_next[23:22] = clicint_113_attr_mode_113_qs;
        reg_rdata_next[31:24] = clicint_113_ctl_113_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[0] = clicint_114_ip_114_qs;
        reg_rdata_next[7] = clicint_114_ie_114_qs;
        reg_rdata_next[16] = clicint_114_attr_shv_114_qs;
        reg_rdata_next[18:17] = clicint_114_attr_trig_114_qs;
        reg_rdata_next[23:22] = clicint_114_attr_mode_114_qs;
        reg_rdata_next[31:24] = clicint_114_ctl_114_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[0] = clicint_115_ip_115_qs;
        reg_rdata_next[7] = clicint_115_ie_115_qs;
        reg_rdata_next[16] = clicint_115_attr_shv_115_qs;
        reg_rdata_next[18:17] = clicint_115_attr_trig_115_qs;
        reg_rdata_next[23:22] = clicint_115_attr_mode_115_qs;
        reg_rdata_next[31:24] = clicint_115_ctl_115_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[0] = clicint_116_ip_116_qs;
        reg_rdata_next[7] = clicint_116_ie_116_qs;
        reg_rdata_next[16] = clicint_116_attr_shv_116_qs;
        reg_rdata_next[18:17] = clicint_116_attr_trig_116_qs;
        reg_rdata_next[23:22] = clicint_116_attr_mode_116_qs;
        reg_rdata_next[31:24] = clicint_116_ctl_116_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[0] = clicint_117_ip_117_qs;
        reg_rdata_next[7] = clicint_117_ie_117_qs;
        reg_rdata_next[16] = clicint_117_attr_shv_117_qs;
        reg_rdata_next[18:17] = clicint_117_attr_trig_117_qs;
        reg_rdata_next[23:22] = clicint_117_attr_mode_117_qs;
        reg_rdata_next[31:24] = clicint_117_ctl_117_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[0] = clicint_118_ip_118_qs;
        reg_rdata_next[7] = clicint_118_ie_118_qs;
        reg_rdata_next[16] = clicint_118_attr_shv_118_qs;
        reg_rdata_next[18:17] = clicint_118_attr_trig_118_qs;
        reg_rdata_next[23:22] = clicint_118_attr_mode_118_qs;
        reg_rdata_next[31:24] = clicint_118_ctl_118_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[0] = clicint_119_ip_119_qs;
        reg_rdata_next[7] = clicint_119_ie_119_qs;
        reg_rdata_next[16] = clicint_119_attr_shv_119_qs;
        reg_rdata_next[18:17] = clicint_119_attr_trig_119_qs;
        reg_rdata_next[23:22] = clicint_119_attr_mode_119_qs;
        reg_rdata_next[31:24] = clicint_119_ctl_119_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[0] = clicint_120_ip_120_qs;
        reg_rdata_next[7] = clicint_120_ie_120_qs;
        reg_rdata_next[16] = clicint_120_attr_shv_120_qs;
        reg_rdata_next[18:17] = clicint_120_attr_trig_120_qs;
        reg_rdata_next[23:22] = clicint_120_attr_mode_120_qs;
        reg_rdata_next[31:24] = clicint_120_ctl_120_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[0] = clicint_121_ip_121_qs;
        reg_rdata_next[7] = clicint_121_ie_121_qs;
        reg_rdata_next[16] = clicint_121_attr_shv_121_qs;
        reg_rdata_next[18:17] = clicint_121_attr_trig_121_qs;
        reg_rdata_next[23:22] = clicint_121_attr_mode_121_qs;
        reg_rdata_next[31:24] = clicint_121_ctl_121_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[0] = clicint_122_ip_122_qs;
        reg_rdata_next[7] = clicint_122_ie_122_qs;
        reg_rdata_next[16] = clicint_122_attr_shv_122_qs;
        reg_rdata_next[18:17] = clicint_122_attr_trig_122_qs;
        reg_rdata_next[23:22] = clicint_122_attr_mode_122_qs;
        reg_rdata_next[31:24] = clicint_122_ctl_122_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[0] = clicint_123_ip_123_qs;
        reg_rdata_next[7] = clicint_123_ie_123_qs;
        reg_rdata_next[16] = clicint_123_attr_shv_123_qs;
        reg_rdata_next[18:17] = clicint_123_attr_trig_123_qs;
        reg_rdata_next[23:22] = clicint_123_attr_mode_123_qs;
        reg_rdata_next[31:24] = clicint_123_ctl_123_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[0] = clicint_124_ip_124_qs;
        reg_rdata_next[7] = clicint_124_ie_124_qs;
        reg_rdata_next[16] = clicint_124_attr_shv_124_qs;
        reg_rdata_next[18:17] = clicint_124_attr_trig_124_qs;
        reg_rdata_next[23:22] = clicint_124_attr_mode_124_qs;
        reg_rdata_next[31:24] = clicint_124_ctl_124_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[0] = clicint_125_ip_125_qs;
        reg_rdata_next[7] = clicint_125_ie_125_qs;
        reg_rdata_next[16] = clicint_125_attr_shv_125_qs;
        reg_rdata_next[18:17] = clicint_125_attr_trig_125_qs;
        reg_rdata_next[23:22] = clicint_125_attr_mode_125_qs;
        reg_rdata_next[31:24] = clicint_125_ctl_125_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[0] = clicint_126_ip_126_qs;
        reg_rdata_next[7] = clicint_126_ie_126_qs;
        reg_rdata_next[16] = clicint_126_attr_shv_126_qs;
        reg_rdata_next[18:17] = clicint_126_attr_trig_126_qs;
        reg_rdata_next[23:22] = clicint_126_attr_mode_126_qs;
        reg_rdata_next[31:24] = clicint_126_ctl_126_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[0] = clicint_127_ip_127_qs;
        reg_rdata_next[7] = clicint_127_ie_127_qs;
        reg_rdata_next[16] = clicint_127_attr_shv_127_qs;
        reg_rdata_next[18:17] = clicint_127_attr_trig_127_qs;
        reg_rdata_next[23:22] = clicint_127_attr_mode_127_qs;
        reg_rdata_next[31:24] = clicint_127_ctl_127_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[0] = clicint_128_ip_128_qs;
        reg_rdata_next[7] = clicint_128_ie_128_qs;
        reg_rdata_next[16] = clicint_128_attr_shv_128_qs;
        reg_rdata_next[18:17] = clicint_128_attr_trig_128_qs;
        reg_rdata_next[23:22] = clicint_128_attr_mode_128_qs;
        reg_rdata_next[31:24] = clicint_128_ctl_128_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[0] = clicint_129_ip_129_qs;
        reg_rdata_next[7] = clicint_129_ie_129_qs;
        reg_rdata_next[16] = clicint_129_attr_shv_129_qs;
        reg_rdata_next[18:17] = clicint_129_attr_trig_129_qs;
        reg_rdata_next[23:22] = clicint_129_attr_mode_129_qs;
        reg_rdata_next[31:24] = clicint_129_ctl_129_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[0] = clicint_130_ip_130_qs;
        reg_rdata_next[7] = clicint_130_ie_130_qs;
        reg_rdata_next[16] = clicint_130_attr_shv_130_qs;
        reg_rdata_next[18:17] = clicint_130_attr_trig_130_qs;
        reg_rdata_next[23:22] = clicint_130_attr_mode_130_qs;
        reg_rdata_next[31:24] = clicint_130_ctl_130_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[0] = clicint_131_ip_131_qs;
        reg_rdata_next[7] = clicint_131_ie_131_qs;
        reg_rdata_next[16] = clicint_131_attr_shv_131_qs;
        reg_rdata_next[18:17] = clicint_131_attr_trig_131_qs;
        reg_rdata_next[23:22] = clicint_131_attr_mode_131_qs;
        reg_rdata_next[31:24] = clicint_131_ctl_131_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[0] = clicint_132_ip_132_qs;
        reg_rdata_next[7] = clicint_132_ie_132_qs;
        reg_rdata_next[16] = clicint_132_attr_shv_132_qs;
        reg_rdata_next[18:17] = clicint_132_attr_trig_132_qs;
        reg_rdata_next[23:22] = clicint_132_attr_mode_132_qs;
        reg_rdata_next[31:24] = clicint_132_ctl_132_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[0] = clicint_133_ip_133_qs;
        reg_rdata_next[7] = clicint_133_ie_133_qs;
        reg_rdata_next[16] = clicint_133_attr_shv_133_qs;
        reg_rdata_next[18:17] = clicint_133_attr_trig_133_qs;
        reg_rdata_next[23:22] = clicint_133_attr_mode_133_qs;
        reg_rdata_next[31:24] = clicint_133_ctl_133_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[0] = clicint_134_ip_134_qs;
        reg_rdata_next[7] = clicint_134_ie_134_qs;
        reg_rdata_next[16] = clicint_134_attr_shv_134_qs;
        reg_rdata_next[18:17] = clicint_134_attr_trig_134_qs;
        reg_rdata_next[23:22] = clicint_134_attr_mode_134_qs;
        reg_rdata_next[31:24] = clicint_134_ctl_134_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[0] = clicint_135_ip_135_qs;
        reg_rdata_next[7] = clicint_135_ie_135_qs;
        reg_rdata_next[16] = clicint_135_attr_shv_135_qs;
        reg_rdata_next[18:17] = clicint_135_attr_trig_135_qs;
        reg_rdata_next[23:22] = clicint_135_attr_mode_135_qs;
        reg_rdata_next[31:24] = clicint_135_ctl_135_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[0] = clicint_136_ip_136_qs;
        reg_rdata_next[7] = clicint_136_ie_136_qs;
        reg_rdata_next[16] = clicint_136_attr_shv_136_qs;
        reg_rdata_next[18:17] = clicint_136_attr_trig_136_qs;
        reg_rdata_next[23:22] = clicint_136_attr_mode_136_qs;
        reg_rdata_next[31:24] = clicint_136_ctl_136_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[0] = clicint_137_ip_137_qs;
        reg_rdata_next[7] = clicint_137_ie_137_qs;
        reg_rdata_next[16] = clicint_137_attr_shv_137_qs;
        reg_rdata_next[18:17] = clicint_137_attr_trig_137_qs;
        reg_rdata_next[23:22] = clicint_137_attr_mode_137_qs;
        reg_rdata_next[31:24] = clicint_137_ctl_137_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[0] = clicint_138_ip_138_qs;
        reg_rdata_next[7] = clicint_138_ie_138_qs;
        reg_rdata_next[16] = clicint_138_attr_shv_138_qs;
        reg_rdata_next[18:17] = clicint_138_attr_trig_138_qs;
        reg_rdata_next[23:22] = clicint_138_attr_mode_138_qs;
        reg_rdata_next[31:24] = clicint_138_ctl_138_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[0] = clicint_139_ip_139_qs;
        reg_rdata_next[7] = clicint_139_ie_139_qs;
        reg_rdata_next[16] = clicint_139_attr_shv_139_qs;
        reg_rdata_next[18:17] = clicint_139_attr_trig_139_qs;
        reg_rdata_next[23:22] = clicint_139_attr_mode_139_qs;
        reg_rdata_next[31:24] = clicint_139_ctl_139_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[0] = clicint_140_ip_140_qs;
        reg_rdata_next[7] = clicint_140_ie_140_qs;
        reg_rdata_next[16] = clicint_140_attr_shv_140_qs;
        reg_rdata_next[18:17] = clicint_140_attr_trig_140_qs;
        reg_rdata_next[23:22] = clicint_140_attr_mode_140_qs;
        reg_rdata_next[31:24] = clicint_140_ctl_140_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[0] = clicint_141_ip_141_qs;
        reg_rdata_next[7] = clicint_141_ie_141_qs;
        reg_rdata_next[16] = clicint_141_attr_shv_141_qs;
        reg_rdata_next[18:17] = clicint_141_attr_trig_141_qs;
        reg_rdata_next[23:22] = clicint_141_attr_mode_141_qs;
        reg_rdata_next[31:24] = clicint_141_ctl_141_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[0] = clicint_142_ip_142_qs;
        reg_rdata_next[7] = clicint_142_ie_142_qs;
        reg_rdata_next[16] = clicint_142_attr_shv_142_qs;
        reg_rdata_next[18:17] = clicint_142_attr_trig_142_qs;
        reg_rdata_next[23:22] = clicint_142_attr_mode_142_qs;
        reg_rdata_next[31:24] = clicint_142_ctl_142_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[0] = clicint_143_ip_143_qs;
        reg_rdata_next[7] = clicint_143_ie_143_qs;
        reg_rdata_next[16] = clicint_143_attr_shv_143_qs;
        reg_rdata_next[18:17] = clicint_143_attr_trig_143_qs;
        reg_rdata_next[23:22] = clicint_143_attr_mode_143_qs;
        reg_rdata_next[31:24] = clicint_143_ctl_143_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[0] = clicint_144_ip_144_qs;
        reg_rdata_next[7] = clicint_144_ie_144_qs;
        reg_rdata_next[16] = clicint_144_attr_shv_144_qs;
        reg_rdata_next[18:17] = clicint_144_attr_trig_144_qs;
        reg_rdata_next[23:22] = clicint_144_attr_mode_144_qs;
        reg_rdata_next[31:24] = clicint_144_ctl_144_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[0] = clicint_145_ip_145_qs;
        reg_rdata_next[7] = clicint_145_ie_145_qs;
        reg_rdata_next[16] = clicint_145_attr_shv_145_qs;
        reg_rdata_next[18:17] = clicint_145_attr_trig_145_qs;
        reg_rdata_next[23:22] = clicint_145_attr_mode_145_qs;
        reg_rdata_next[31:24] = clicint_145_ctl_145_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[0] = clicint_146_ip_146_qs;
        reg_rdata_next[7] = clicint_146_ie_146_qs;
        reg_rdata_next[16] = clicint_146_attr_shv_146_qs;
        reg_rdata_next[18:17] = clicint_146_attr_trig_146_qs;
        reg_rdata_next[23:22] = clicint_146_attr_mode_146_qs;
        reg_rdata_next[31:24] = clicint_146_ctl_146_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[0] = clicint_147_ip_147_qs;
        reg_rdata_next[7] = clicint_147_ie_147_qs;
        reg_rdata_next[16] = clicint_147_attr_shv_147_qs;
        reg_rdata_next[18:17] = clicint_147_attr_trig_147_qs;
        reg_rdata_next[23:22] = clicint_147_attr_mode_147_qs;
        reg_rdata_next[31:24] = clicint_147_ctl_147_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[0] = clicint_148_ip_148_qs;
        reg_rdata_next[7] = clicint_148_ie_148_qs;
        reg_rdata_next[16] = clicint_148_attr_shv_148_qs;
        reg_rdata_next[18:17] = clicint_148_attr_trig_148_qs;
        reg_rdata_next[23:22] = clicint_148_attr_mode_148_qs;
        reg_rdata_next[31:24] = clicint_148_ctl_148_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[0] = clicint_149_ip_149_qs;
        reg_rdata_next[7] = clicint_149_ie_149_qs;
        reg_rdata_next[16] = clicint_149_attr_shv_149_qs;
        reg_rdata_next[18:17] = clicint_149_attr_trig_149_qs;
        reg_rdata_next[23:22] = clicint_149_attr_mode_149_qs;
        reg_rdata_next[31:24] = clicint_149_ctl_149_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[0] = clicint_150_ip_150_qs;
        reg_rdata_next[7] = clicint_150_ie_150_qs;
        reg_rdata_next[16] = clicint_150_attr_shv_150_qs;
        reg_rdata_next[18:17] = clicint_150_attr_trig_150_qs;
        reg_rdata_next[23:22] = clicint_150_attr_mode_150_qs;
        reg_rdata_next[31:24] = clicint_150_ctl_150_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[0] = clicint_151_ip_151_qs;
        reg_rdata_next[7] = clicint_151_ie_151_qs;
        reg_rdata_next[16] = clicint_151_attr_shv_151_qs;
        reg_rdata_next[18:17] = clicint_151_attr_trig_151_qs;
        reg_rdata_next[23:22] = clicint_151_attr_mode_151_qs;
        reg_rdata_next[31:24] = clicint_151_ctl_151_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[0] = clicint_152_ip_152_qs;
        reg_rdata_next[7] = clicint_152_ie_152_qs;
        reg_rdata_next[16] = clicint_152_attr_shv_152_qs;
        reg_rdata_next[18:17] = clicint_152_attr_trig_152_qs;
        reg_rdata_next[23:22] = clicint_152_attr_mode_152_qs;
        reg_rdata_next[31:24] = clicint_152_ctl_152_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[0] = clicint_153_ip_153_qs;
        reg_rdata_next[7] = clicint_153_ie_153_qs;
        reg_rdata_next[16] = clicint_153_attr_shv_153_qs;
        reg_rdata_next[18:17] = clicint_153_attr_trig_153_qs;
        reg_rdata_next[23:22] = clicint_153_attr_mode_153_qs;
        reg_rdata_next[31:24] = clicint_153_ctl_153_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[0] = clicint_154_ip_154_qs;
        reg_rdata_next[7] = clicint_154_ie_154_qs;
        reg_rdata_next[16] = clicint_154_attr_shv_154_qs;
        reg_rdata_next[18:17] = clicint_154_attr_trig_154_qs;
        reg_rdata_next[23:22] = clicint_154_attr_mode_154_qs;
        reg_rdata_next[31:24] = clicint_154_ctl_154_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[0] = clicint_155_ip_155_qs;
        reg_rdata_next[7] = clicint_155_ie_155_qs;
        reg_rdata_next[16] = clicint_155_attr_shv_155_qs;
        reg_rdata_next[18:17] = clicint_155_attr_trig_155_qs;
        reg_rdata_next[23:22] = clicint_155_attr_mode_155_qs;
        reg_rdata_next[31:24] = clicint_155_ctl_155_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[0] = clicint_156_ip_156_qs;
        reg_rdata_next[7] = clicint_156_ie_156_qs;
        reg_rdata_next[16] = clicint_156_attr_shv_156_qs;
        reg_rdata_next[18:17] = clicint_156_attr_trig_156_qs;
        reg_rdata_next[23:22] = clicint_156_attr_mode_156_qs;
        reg_rdata_next[31:24] = clicint_156_ctl_156_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[0] = clicint_157_ip_157_qs;
        reg_rdata_next[7] = clicint_157_ie_157_qs;
        reg_rdata_next[16] = clicint_157_attr_shv_157_qs;
        reg_rdata_next[18:17] = clicint_157_attr_trig_157_qs;
        reg_rdata_next[23:22] = clicint_157_attr_mode_157_qs;
        reg_rdata_next[31:24] = clicint_157_ctl_157_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[0] = clicint_158_ip_158_qs;
        reg_rdata_next[7] = clicint_158_ie_158_qs;
        reg_rdata_next[16] = clicint_158_attr_shv_158_qs;
        reg_rdata_next[18:17] = clicint_158_attr_trig_158_qs;
        reg_rdata_next[23:22] = clicint_158_attr_mode_158_qs;
        reg_rdata_next[31:24] = clicint_158_ctl_158_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[0] = clicint_159_ip_159_qs;
        reg_rdata_next[7] = clicint_159_ie_159_qs;
        reg_rdata_next[16] = clicint_159_attr_shv_159_qs;
        reg_rdata_next[18:17] = clicint_159_attr_trig_159_qs;
        reg_rdata_next[23:22] = clicint_159_attr_mode_159_qs;
        reg_rdata_next[31:24] = clicint_159_ctl_159_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[0] = clicint_160_ip_160_qs;
        reg_rdata_next[7] = clicint_160_ie_160_qs;
        reg_rdata_next[16] = clicint_160_attr_shv_160_qs;
        reg_rdata_next[18:17] = clicint_160_attr_trig_160_qs;
        reg_rdata_next[23:22] = clicint_160_attr_mode_160_qs;
        reg_rdata_next[31:24] = clicint_160_ctl_160_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[0] = clicint_161_ip_161_qs;
        reg_rdata_next[7] = clicint_161_ie_161_qs;
        reg_rdata_next[16] = clicint_161_attr_shv_161_qs;
        reg_rdata_next[18:17] = clicint_161_attr_trig_161_qs;
        reg_rdata_next[23:22] = clicint_161_attr_mode_161_qs;
        reg_rdata_next[31:24] = clicint_161_ctl_161_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[0] = clicint_162_ip_162_qs;
        reg_rdata_next[7] = clicint_162_ie_162_qs;
        reg_rdata_next[16] = clicint_162_attr_shv_162_qs;
        reg_rdata_next[18:17] = clicint_162_attr_trig_162_qs;
        reg_rdata_next[23:22] = clicint_162_attr_mode_162_qs;
        reg_rdata_next[31:24] = clicint_162_ctl_162_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[0] = clicint_163_ip_163_qs;
        reg_rdata_next[7] = clicint_163_ie_163_qs;
        reg_rdata_next[16] = clicint_163_attr_shv_163_qs;
        reg_rdata_next[18:17] = clicint_163_attr_trig_163_qs;
        reg_rdata_next[23:22] = clicint_163_attr_mode_163_qs;
        reg_rdata_next[31:24] = clicint_163_ctl_163_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[0] = clicint_164_ip_164_qs;
        reg_rdata_next[7] = clicint_164_ie_164_qs;
        reg_rdata_next[16] = clicint_164_attr_shv_164_qs;
        reg_rdata_next[18:17] = clicint_164_attr_trig_164_qs;
        reg_rdata_next[23:22] = clicint_164_attr_mode_164_qs;
        reg_rdata_next[31:24] = clicint_164_ctl_164_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[0] = clicint_165_ip_165_qs;
        reg_rdata_next[7] = clicint_165_ie_165_qs;
        reg_rdata_next[16] = clicint_165_attr_shv_165_qs;
        reg_rdata_next[18:17] = clicint_165_attr_trig_165_qs;
        reg_rdata_next[23:22] = clicint_165_attr_mode_165_qs;
        reg_rdata_next[31:24] = clicint_165_ctl_165_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[0] = clicint_166_ip_166_qs;
        reg_rdata_next[7] = clicint_166_ie_166_qs;
        reg_rdata_next[16] = clicint_166_attr_shv_166_qs;
        reg_rdata_next[18:17] = clicint_166_attr_trig_166_qs;
        reg_rdata_next[23:22] = clicint_166_attr_mode_166_qs;
        reg_rdata_next[31:24] = clicint_166_ctl_166_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[0] = clicint_167_ip_167_qs;
        reg_rdata_next[7] = clicint_167_ie_167_qs;
        reg_rdata_next[16] = clicint_167_attr_shv_167_qs;
        reg_rdata_next[18:17] = clicint_167_attr_trig_167_qs;
        reg_rdata_next[23:22] = clicint_167_attr_mode_167_qs;
        reg_rdata_next[31:24] = clicint_167_ctl_167_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[0] = clicint_168_ip_168_qs;
        reg_rdata_next[7] = clicint_168_ie_168_qs;
        reg_rdata_next[16] = clicint_168_attr_shv_168_qs;
        reg_rdata_next[18:17] = clicint_168_attr_trig_168_qs;
        reg_rdata_next[23:22] = clicint_168_attr_mode_168_qs;
        reg_rdata_next[31:24] = clicint_168_ctl_168_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[0] = clicint_169_ip_169_qs;
        reg_rdata_next[7] = clicint_169_ie_169_qs;
        reg_rdata_next[16] = clicint_169_attr_shv_169_qs;
        reg_rdata_next[18:17] = clicint_169_attr_trig_169_qs;
        reg_rdata_next[23:22] = clicint_169_attr_mode_169_qs;
        reg_rdata_next[31:24] = clicint_169_ctl_169_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[0] = clicint_170_ip_170_qs;
        reg_rdata_next[7] = clicint_170_ie_170_qs;
        reg_rdata_next[16] = clicint_170_attr_shv_170_qs;
        reg_rdata_next[18:17] = clicint_170_attr_trig_170_qs;
        reg_rdata_next[23:22] = clicint_170_attr_mode_170_qs;
        reg_rdata_next[31:24] = clicint_170_ctl_170_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[0] = clicint_171_ip_171_qs;
        reg_rdata_next[7] = clicint_171_ie_171_qs;
        reg_rdata_next[16] = clicint_171_attr_shv_171_qs;
        reg_rdata_next[18:17] = clicint_171_attr_trig_171_qs;
        reg_rdata_next[23:22] = clicint_171_attr_mode_171_qs;
        reg_rdata_next[31:24] = clicint_171_ctl_171_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[0] = clicint_172_ip_172_qs;
        reg_rdata_next[7] = clicint_172_ie_172_qs;
        reg_rdata_next[16] = clicint_172_attr_shv_172_qs;
        reg_rdata_next[18:17] = clicint_172_attr_trig_172_qs;
        reg_rdata_next[23:22] = clicint_172_attr_mode_172_qs;
        reg_rdata_next[31:24] = clicint_172_ctl_172_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[0] = clicint_173_ip_173_qs;
        reg_rdata_next[7] = clicint_173_ie_173_qs;
        reg_rdata_next[16] = clicint_173_attr_shv_173_qs;
        reg_rdata_next[18:17] = clicint_173_attr_trig_173_qs;
        reg_rdata_next[23:22] = clicint_173_attr_mode_173_qs;
        reg_rdata_next[31:24] = clicint_173_ctl_173_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[0] = clicint_174_ip_174_qs;
        reg_rdata_next[7] = clicint_174_ie_174_qs;
        reg_rdata_next[16] = clicint_174_attr_shv_174_qs;
        reg_rdata_next[18:17] = clicint_174_attr_trig_174_qs;
        reg_rdata_next[23:22] = clicint_174_attr_mode_174_qs;
        reg_rdata_next[31:24] = clicint_174_ctl_174_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[0] = clicint_175_ip_175_qs;
        reg_rdata_next[7] = clicint_175_ie_175_qs;
        reg_rdata_next[16] = clicint_175_attr_shv_175_qs;
        reg_rdata_next[18:17] = clicint_175_attr_trig_175_qs;
        reg_rdata_next[23:22] = clicint_175_attr_mode_175_qs;
        reg_rdata_next[31:24] = clicint_175_ctl_175_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[0] = clicint_176_ip_176_qs;
        reg_rdata_next[7] = clicint_176_ie_176_qs;
        reg_rdata_next[16] = clicint_176_attr_shv_176_qs;
        reg_rdata_next[18:17] = clicint_176_attr_trig_176_qs;
        reg_rdata_next[23:22] = clicint_176_attr_mode_176_qs;
        reg_rdata_next[31:24] = clicint_176_ctl_176_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[0] = clicint_177_ip_177_qs;
        reg_rdata_next[7] = clicint_177_ie_177_qs;
        reg_rdata_next[16] = clicint_177_attr_shv_177_qs;
        reg_rdata_next[18:17] = clicint_177_attr_trig_177_qs;
        reg_rdata_next[23:22] = clicint_177_attr_mode_177_qs;
        reg_rdata_next[31:24] = clicint_177_ctl_177_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[0] = clicint_178_ip_178_qs;
        reg_rdata_next[7] = clicint_178_ie_178_qs;
        reg_rdata_next[16] = clicint_178_attr_shv_178_qs;
        reg_rdata_next[18:17] = clicint_178_attr_trig_178_qs;
        reg_rdata_next[23:22] = clicint_178_attr_mode_178_qs;
        reg_rdata_next[31:24] = clicint_178_ctl_178_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[0] = clicint_179_ip_179_qs;
        reg_rdata_next[7] = clicint_179_ie_179_qs;
        reg_rdata_next[16] = clicint_179_attr_shv_179_qs;
        reg_rdata_next[18:17] = clicint_179_attr_trig_179_qs;
        reg_rdata_next[23:22] = clicint_179_attr_mode_179_qs;
        reg_rdata_next[31:24] = clicint_179_ctl_179_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[0] = clicint_180_ip_180_qs;
        reg_rdata_next[7] = clicint_180_ie_180_qs;
        reg_rdata_next[16] = clicint_180_attr_shv_180_qs;
        reg_rdata_next[18:17] = clicint_180_attr_trig_180_qs;
        reg_rdata_next[23:22] = clicint_180_attr_mode_180_qs;
        reg_rdata_next[31:24] = clicint_180_ctl_180_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[0] = clicint_181_ip_181_qs;
        reg_rdata_next[7] = clicint_181_ie_181_qs;
        reg_rdata_next[16] = clicint_181_attr_shv_181_qs;
        reg_rdata_next[18:17] = clicint_181_attr_trig_181_qs;
        reg_rdata_next[23:22] = clicint_181_attr_mode_181_qs;
        reg_rdata_next[31:24] = clicint_181_ctl_181_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[0] = clicint_182_ip_182_qs;
        reg_rdata_next[7] = clicint_182_ie_182_qs;
        reg_rdata_next[16] = clicint_182_attr_shv_182_qs;
        reg_rdata_next[18:17] = clicint_182_attr_trig_182_qs;
        reg_rdata_next[23:22] = clicint_182_attr_mode_182_qs;
        reg_rdata_next[31:24] = clicint_182_ctl_182_qs;
      end

      addr_hit[184]: begin
        reg_rdata_next[0] = clicint_183_ip_183_qs;
        reg_rdata_next[7] = clicint_183_ie_183_qs;
        reg_rdata_next[16] = clicint_183_attr_shv_183_qs;
        reg_rdata_next[18:17] = clicint_183_attr_trig_183_qs;
        reg_rdata_next[23:22] = clicint_183_attr_mode_183_qs;
        reg_rdata_next[31:24] = clicint_183_ctl_183_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[0] = clicint_184_ip_184_qs;
        reg_rdata_next[7] = clicint_184_ie_184_qs;
        reg_rdata_next[16] = clicint_184_attr_shv_184_qs;
        reg_rdata_next[18:17] = clicint_184_attr_trig_184_qs;
        reg_rdata_next[23:22] = clicint_184_attr_mode_184_qs;
        reg_rdata_next[31:24] = clicint_184_ctl_184_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[0] = clicint_185_ip_185_qs;
        reg_rdata_next[7] = clicint_185_ie_185_qs;
        reg_rdata_next[16] = clicint_185_attr_shv_185_qs;
        reg_rdata_next[18:17] = clicint_185_attr_trig_185_qs;
        reg_rdata_next[23:22] = clicint_185_attr_mode_185_qs;
        reg_rdata_next[31:24] = clicint_185_ctl_185_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[0] = clicint_186_ip_186_qs;
        reg_rdata_next[7] = clicint_186_ie_186_qs;
        reg_rdata_next[16] = clicint_186_attr_shv_186_qs;
        reg_rdata_next[18:17] = clicint_186_attr_trig_186_qs;
        reg_rdata_next[23:22] = clicint_186_attr_mode_186_qs;
        reg_rdata_next[31:24] = clicint_186_ctl_186_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[0] = clicint_187_ip_187_qs;
        reg_rdata_next[7] = clicint_187_ie_187_qs;
        reg_rdata_next[16] = clicint_187_attr_shv_187_qs;
        reg_rdata_next[18:17] = clicint_187_attr_trig_187_qs;
        reg_rdata_next[23:22] = clicint_187_attr_mode_187_qs;
        reg_rdata_next[31:24] = clicint_187_ctl_187_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[0] = clicint_188_ip_188_qs;
        reg_rdata_next[7] = clicint_188_ie_188_qs;
        reg_rdata_next[16] = clicint_188_attr_shv_188_qs;
        reg_rdata_next[18:17] = clicint_188_attr_trig_188_qs;
        reg_rdata_next[23:22] = clicint_188_attr_mode_188_qs;
        reg_rdata_next[31:24] = clicint_188_ctl_188_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[0] = clicint_189_ip_189_qs;
        reg_rdata_next[7] = clicint_189_ie_189_qs;
        reg_rdata_next[16] = clicint_189_attr_shv_189_qs;
        reg_rdata_next[18:17] = clicint_189_attr_trig_189_qs;
        reg_rdata_next[23:22] = clicint_189_attr_mode_189_qs;
        reg_rdata_next[31:24] = clicint_189_ctl_189_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[0] = clicint_190_ip_190_qs;
        reg_rdata_next[7] = clicint_190_ie_190_qs;
        reg_rdata_next[16] = clicint_190_attr_shv_190_qs;
        reg_rdata_next[18:17] = clicint_190_attr_trig_190_qs;
        reg_rdata_next[23:22] = clicint_190_attr_mode_190_qs;
        reg_rdata_next[31:24] = clicint_190_ctl_190_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[0] = clicint_191_ip_191_qs;
        reg_rdata_next[7] = clicint_191_ie_191_qs;
        reg_rdata_next[16] = clicint_191_attr_shv_191_qs;
        reg_rdata_next[18:17] = clicint_191_attr_trig_191_qs;
        reg_rdata_next[23:22] = clicint_191_attr_mode_191_qs;
        reg_rdata_next[31:24] = clicint_191_ctl_191_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[0] = clicint_192_ip_192_qs;
        reg_rdata_next[7] = clicint_192_ie_192_qs;
        reg_rdata_next[16] = clicint_192_attr_shv_192_qs;
        reg_rdata_next[18:17] = clicint_192_attr_trig_192_qs;
        reg_rdata_next[23:22] = clicint_192_attr_mode_192_qs;
        reg_rdata_next[31:24] = clicint_192_ctl_192_qs;
      end

      addr_hit[194]: begin
        reg_rdata_next[0] = clicint_193_ip_193_qs;
        reg_rdata_next[7] = clicint_193_ie_193_qs;
        reg_rdata_next[16] = clicint_193_attr_shv_193_qs;
        reg_rdata_next[18:17] = clicint_193_attr_trig_193_qs;
        reg_rdata_next[23:22] = clicint_193_attr_mode_193_qs;
        reg_rdata_next[31:24] = clicint_193_ctl_193_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[0] = clicint_194_ip_194_qs;
        reg_rdata_next[7] = clicint_194_ie_194_qs;
        reg_rdata_next[16] = clicint_194_attr_shv_194_qs;
        reg_rdata_next[18:17] = clicint_194_attr_trig_194_qs;
        reg_rdata_next[23:22] = clicint_194_attr_mode_194_qs;
        reg_rdata_next[31:24] = clicint_194_ctl_194_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[0] = clicint_195_ip_195_qs;
        reg_rdata_next[7] = clicint_195_ie_195_qs;
        reg_rdata_next[16] = clicint_195_attr_shv_195_qs;
        reg_rdata_next[18:17] = clicint_195_attr_trig_195_qs;
        reg_rdata_next[23:22] = clicint_195_attr_mode_195_qs;
        reg_rdata_next[31:24] = clicint_195_ctl_195_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[0] = clicint_196_ip_196_qs;
        reg_rdata_next[7] = clicint_196_ie_196_qs;
        reg_rdata_next[16] = clicint_196_attr_shv_196_qs;
        reg_rdata_next[18:17] = clicint_196_attr_trig_196_qs;
        reg_rdata_next[23:22] = clicint_196_attr_mode_196_qs;
        reg_rdata_next[31:24] = clicint_196_ctl_196_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[0] = clicint_197_ip_197_qs;
        reg_rdata_next[7] = clicint_197_ie_197_qs;
        reg_rdata_next[16] = clicint_197_attr_shv_197_qs;
        reg_rdata_next[18:17] = clicint_197_attr_trig_197_qs;
        reg_rdata_next[23:22] = clicint_197_attr_mode_197_qs;
        reg_rdata_next[31:24] = clicint_197_ctl_197_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[0] = clicint_198_ip_198_qs;
        reg_rdata_next[7] = clicint_198_ie_198_qs;
        reg_rdata_next[16] = clicint_198_attr_shv_198_qs;
        reg_rdata_next[18:17] = clicint_198_attr_trig_198_qs;
        reg_rdata_next[23:22] = clicint_198_attr_mode_198_qs;
        reg_rdata_next[31:24] = clicint_198_ctl_198_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[0] = clicint_199_ip_199_qs;
        reg_rdata_next[7] = clicint_199_ie_199_qs;
        reg_rdata_next[16] = clicint_199_attr_shv_199_qs;
        reg_rdata_next[18:17] = clicint_199_attr_trig_199_qs;
        reg_rdata_next[23:22] = clicint_199_attr_mode_199_qs;
        reg_rdata_next[31:24] = clicint_199_ctl_199_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[0] = clicint_200_ip_200_qs;
        reg_rdata_next[7] = clicint_200_ie_200_qs;
        reg_rdata_next[16] = clicint_200_attr_shv_200_qs;
        reg_rdata_next[18:17] = clicint_200_attr_trig_200_qs;
        reg_rdata_next[23:22] = clicint_200_attr_mode_200_qs;
        reg_rdata_next[31:24] = clicint_200_ctl_200_qs;
      end

      addr_hit[202]: begin
        reg_rdata_next[0] = clicint_201_ip_201_qs;
        reg_rdata_next[7] = clicint_201_ie_201_qs;
        reg_rdata_next[16] = clicint_201_attr_shv_201_qs;
        reg_rdata_next[18:17] = clicint_201_attr_trig_201_qs;
        reg_rdata_next[23:22] = clicint_201_attr_mode_201_qs;
        reg_rdata_next[31:24] = clicint_201_ctl_201_qs;
      end

      addr_hit[203]: begin
        reg_rdata_next[0] = clicint_202_ip_202_qs;
        reg_rdata_next[7] = clicint_202_ie_202_qs;
        reg_rdata_next[16] = clicint_202_attr_shv_202_qs;
        reg_rdata_next[18:17] = clicint_202_attr_trig_202_qs;
        reg_rdata_next[23:22] = clicint_202_attr_mode_202_qs;
        reg_rdata_next[31:24] = clicint_202_ctl_202_qs;
      end

      addr_hit[204]: begin
        reg_rdata_next[0] = clicint_203_ip_203_qs;
        reg_rdata_next[7] = clicint_203_ie_203_qs;
        reg_rdata_next[16] = clicint_203_attr_shv_203_qs;
        reg_rdata_next[18:17] = clicint_203_attr_trig_203_qs;
        reg_rdata_next[23:22] = clicint_203_attr_mode_203_qs;
        reg_rdata_next[31:24] = clicint_203_ctl_203_qs;
      end

      addr_hit[205]: begin
        reg_rdata_next[0] = clicint_204_ip_204_qs;
        reg_rdata_next[7] = clicint_204_ie_204_qs;
        reg_rdata_next[16] = clicint_204_attr_shv_204_qs;
        reg_rdata_next[18:17] = clicint_204_attr_trig_204_qs;
        reg_rdata_next[23:22] = clicint_204_attr_mode_204_qs;
        reg_rdata_next[31:24] = clicint_204_ctl_204_qs;
      end

      addr_hit[206]: begin
        reg_rdata_next[0] = clicint_205_ip_205_qs;
        reg_rdata_next[7] = clicint_205_ie_205_qs;
        reg_rdata_next[16] = clicint_205_attr_shv_205_qs;
        reg_rdata_next[18:17] = clicint_205_attr_trig_205_qs;
        reg_rdata_next[23:22] = clicint_205_attr_mode_205_qs;
        reg_rdata_next[31:24] = clicint_205_ctl_205_qs;
      end

      addr_hit[207]: begin
        reg_rdata_next[0] = clicint_206_ip_206_qs;
        reg_rdata_next[7] = clicint_206_ie_206_qs;
        reg_rdata_next[16] = clicint_206_attr_shv_206_qs;
        reg_rdata_next[18:17] = clicint_206_attr_trig_206_qs;
        reg_rdata_next[23:22] = clicint_206_attr_mode_206_qs;
        reg_rdata_next[31:24] = clicint_206_ctl_206_qs;
      end

      addr_hit[208]: begin
        reg_rdata_next[0] = clicint_207_ip_207_qs;
        reg_rdata_next[7] = clicint_207_ie_207_qs;
        reg_rdata_next[16] = clicint_207_attr_shv_207_qs;
        reg_rdata_next[18:17] = clicint_207_attr_trig_207_qs;
        reg_rdata_next[23:22] = clicint_207_attr_mode_207_qs;
        reg_rdata_next[31:24] = clicint_207_ctl_207_qs;
      end

      addr_hit[209]: begin
        reg_rdata_next[0] = clicint_208_ip_208_qs;
        reg_rdata_next[7] = clicint_208_ie_208_qs;
        reg_rdata_next[16] = clicint_208_attr_shv_208_qs;
        reg_rdata_next[18:17] = clicint_208_attr_trig_208_qs;
        reg_rdata_next[23:22] = clicint_208_attr_mode_208_qs;
        reg_rdata_next[31:24] = clicint_208_ctl_208_qs;
      end

      addr_hit[210]: begin
        reg_rdata_next[0] = clicint_209_ip_209_qs;
        reg_rdata_next[7] = clicint_209_ie_209_qs;
        reg_rdata_next[16] = clicint_209_attr_shv_209_qs;
        reg_rdata_next[18:17] = clicint_209_attr_trig_209_qs;
        reg_rdata_next[23:22] = clicint_209_attr_mode_209_qs;
        reg_rdata_next[31:24] = clicint_209_ctl_209_qs;
      end

      addr_hit[211]: begin
        reg_rdata_next[0] = clicint_210_ip_210_qs;
        reg_rdata_next[7] = clicint_210_ie_210_qs;
        reg_rdata_next[16] = clicint_210_attr_shv_210_qs;
        reg_rdata_next[18:17] = clicint_210_attr_trig_210_qs;
        reg_rdata_next[23:22] = clicint_210_attr_mode_210_qs;
        reg_rdata_next[31:24] = clicint_210_ctl_210_qs;
      end

      addr_hit[212]: begin
        reg_rdata_next[0] = clicint_211_ip_211_qs;
        reg_rdata_next[7] = clicint_211_ie_211_qs;
        reg_rdata_next[16] = clicint_211_attr_shv_211_qs;
        reg_rdata_next[18:17] = clicint_211_attr_trig_211_qs;
        reg_rdata_next[23:22] = clicint_211_attr_mode_211_qs;
        reg_rdata_next[31:24] = clicint_211_ctl_211_qs;
      end

      addr_hit[213]: begin
        reg_rdata_next[0] = clicint_212_ip_212_qs;
        reg_rdata_next[7] = clicint_212_ie_212_qs;
        reg_rdata_next[16] = clicint_212_attr_shv_212_qs;
        reg_rdata_next[18:17] = clicint_212_attr_trig_212_qs;
        reg_rdata_next[23:22] = clicint_212_attr_mode_212_qs;
        reg_rdata_next[31:24] = clicint_212_ctl_212_qs;
      end

      addr_hit[214]: begin
        reg_rdata_next[0] = clicint_213_ip_213_qs;
        reg_rdata_next[7] = clicint_213_ie_213_qs;
        reg_rdata_next[16] = clicint_213_attr_shv_213_qs;
        reg_rdata_next[18:17] = clicint_213_attr_trig_213_qs;
        reg_rdata_next[23:22] = clicint_213_attr_mode_213_qs;
        reg_rdata_next[31:24] = clicint_213_ctl_213_qs;
      end

      addr_hit[215]: begin
        reg_rdata_next[0] = clicint_214_ip_214_qs;
        reg_rdata_next[7] = clicint_214_ie_214_qs;
        reg_rdata_next[16] = clicint_214_attr_shv_214_qs;
        reg_rdata_next[18:17] = clicint_214_attr_trig_214_qs;
        reg_rdata_next[23:22] = clicint_214_attr_mode_214_qs;
        reg_rdata_next[31:24] = clicint_214_ctl_214_qs;
      end

      addr_hit[216]: begin
        reg_rdata_next[0] = clicint_215_ip_215_qs;
        reg_rdata_next[7] = clicint_215_ie_215_qs;
        reg_rdata_next[16] = clicint_215_attr_shv_215_qs;
        reg_rdata_next[18:17] = clicint_215_attr_trig_215_qs;
        reg_rdata_next[23:22] = clicint_215_attr_mode_215_qs;
        reg_rdata_next[31:24] = clicint_215_ctl_215_qs;
      end

      addr_hit[217]: begin
        reg_rdata_next[0] = clicint_216_ip_216_qs;
        reg_rdata_next[7] = clicint_216_ie_216_qs;
        reg_rdata_next[16] = clicint_216_attr_shv_216_qs;
        reg_rdata_next[18:17] = clicint_216_attr_trig_216_qs;
        reg_rdata_next[23:22] = clicint_216_attr_mode_216_qs;
        reg_rdata_next[31:24] = clicint_216_ctl_216_qs;
      end

      addr_hit[218]: begin
        reg_rdata_next[0] = clicint_217_ip_217_qs;
        reg_rdata_next[7] = clicint_217_ie_217_qs;
        reg_rdata_next[16] = clicint_217_attr_shv_217_qs;
        reg_rdata_next[18:17] = clicint_217_attr_trig_217_qs;
        reg_rdata_next[23:22] = clicint_217_attr_mode_217_qs;
        reg_rdata_next[31:24] = clicint_217_ctl_217_qs;
      end

      addr_hit[219]: begin
        reg_rdata_next[0] = clicint_218_ip_218_qs;
        reg_rdata_next[7] = clicint_218_ie_218_qs;
        reg_rdata_next[16] = clicint_218_attr_shv_218_qs;
        reg_rdata_next[18:17] = clicint_218_attr_trig_218_qs;
        reg_rdata_next[23:22] = clicint_218_attr_mode_218_qs;
        reg_rdata_next[31:24] = clicint_218_ctl_218_qs;
      end

      addr_hit[220]: begin
        reg_rdata_next[0] = clicint_219_ip_219_qs;
        reg_rdata_next[7] = clicint_219_ie_219_qs;
        reg_rdata_next[16] = clicint_219_attr_shv_219_qs;
        reg_rdata_next[18:17] = clicint_219_attr_trig_219_qs;
        reg_rdata_next[23:22] = clicint_219_attr_mode_219_qs;
        reg_rdata_next[31:24] = clicint_219_ctl_219_qs;
      end

      addr_hit[221]: begin
        reg_rdata_next[0] = clicint_220_ip_220_qs;
        reg_rdata_next[7] = clicint_220_ie_220_qs;
        reg_rdata_next[16] = clicint_220_attr_shv_220_qs;
        reg_rdata_next[18:17] = clicint_220_attr_trig_220_qs;
        reg_rdata_next[23:22] = clicint_220_attr_mode_220_qs;
        reg_rdata_next[31:24] = clicint_220_ctl_220_qs;
      end

      addr_hit[222]: begin
        reg_rdata_next[0] = clicint_221_ip_221_qs;
        reg_rdata_next[7] = clicint_221_ie_221_qs;
        reg_rdata_next[16] = clicint_221_attr_shv_221_qs;
        reg_rdata_next[18:17] = clicint_221_attr_trig_221_qs;
        reg_rdata_next[23:22] = clicint_221_attr_mode_221_qs;
        reg_rdata_next[31:24] = clicint_221_ctl_221_qs;
      end

      addr_hit[223]: begin
        reg_rdata_next[0] = clicint_222_ip_222_qs;
        reg_rdata_next[7] = clicint_222_ie_222_qs;
        reg_rdata_next[16] = clicint_222_attr_shv_222_qs;
        reg_rdata_next[18:17] = clicint_222_attr_trig_222_qs;
        reg_rdata_next[23:22] = clicint_222_attr_mode_222_qs;
        reg_rdata_next[31:24] = clicint_222_ctl_222_qs;
      end

      addr_hit[224]: begin
        reg_rdata_next[0] = clicint_223_ip_223_qs;
        reg_rdata_next[7] = clicint_223_ie_223_qs;
        reg_rdata_next[16] = clicint_223_attr_shv_223_qs;
        reg_rdata_next[18:17] = clicint_223_attr_trig_223_qs;
        reg_rdata_next[23:22] = clicint_223_attr_mode_223_qs;
        reg_rdata_next[31:24] = clicint_223_ctl_223_qs;
      end

      addr_hit[225]: begin
        reg_rdata_next[0] = clicint_224_ip_224_qs;
        reg_rdata_next[7] = clicint_224_ie_224_qs;
        reg_rdata_next[16] = clicint_224_attr_shv_224_qs;
        reg_rdata_next[18:17] = clicint_224_attr_trig_224_qs;
        reg_rdata_next[23:22] = clicint_224_attr_mode_224_qs;
        reg_rdata_next[31:24] = clicint_224_ctl_224_qs;
      end

      addr_hit[226]: begin
        reg_rdata_next[0] = clicint_225_ip_225_qs;
        reg_rdata_next[7] = clicint_225_ie_225_qs;
        reg_rdata_next[16] = clicint_225_attr_shv_225_qs;
        reg_rdata_next[18:17] = clicint_225_attr_trig_225_qs;
        reg_rdata_next[23:22] = clicint_225_attr_mode_225_qs;
        reg_rdata_next[31:24] = clicint_225_ctl_225_qs;
      end

      addr_hit[227]: begin
        reg_rdata_next[0] = clicint_226_ip_226_qs;
        reg_rdata_next[7] = clicint_226_ie_226_qs;
        reg_rdata_next[16] = clicint_226_attr_shv_226_qs;
        reg_rdata_next[18:17] = clicint_226_attr_trig_226_qs;
        reg_rdata_next[23:22] = clicint_226_attr_mode_226_qs;
        reg_rdata_next[31:24] = clicint_226_ctl_226_qs;
      end

      addr_hit[228]: begin
        reg_rdata_next[0] = clicint_227_ip_227_qs;
        reg_rdata_next[7] = clicint_227_ie_227_qs;
        reg_rdata_next[16] = clicint_227_attr_shv_227_qs;
        reg_rdata_next[18:17] = clicint_227_attr_trig_227_qs;
        reg_rdata_next[23:22] = clicint_227_attr_mode_227_qs;
        reg_rdata_next[31:24] = clicint_227_ctl_227_qs;
      end

      addr_hit[229]: begin
        reg_rdata_next[0] = clicint_228_ip_228_qs;
        reg_rdata_next[7] = clicint_228_ie_228_qs;
        reg_rdata_next[16] = clicint_228_attr_shv_228_qs;
        reg_rdata_next[18:17] = clicint_228_attr_trig_228_qs;
        reg_rdata_next[23:22] = clicint_228_attr_mode_228_qs;
        reg_rdata_next[31:24] = clicint_228_ctl_228_qs;
      end

      addr_hit[230]: begin
        reg_rdata_next[0] = clicint_229_ip_229_qs;
        reg_rdata_next[7] = clicint_229_ie_229_qs;
        reg_rdata_next[16] = clicint_229_attr_shv_229_qs;
        reg_rdata_next[18:17] = clicint_229_attr_trig_229_qs;
        reg_rdata_next[23:22] = clicint_229_attr_mode_229_qs;
        reg_rdata_next[31:24] = clicint_229_ctl_229_qs;
      end

      addr_hit[231]: begin
        reg_rdata_next[0] = clicint_230_ip_230_qs;
        reg_rdata_next[7] = clicint_230_ie_230_qs;
        reg_rdata_next[16] = clicint_230_attr_shv_230_qs;
        reg_rdata_next[18:17] = clicint_230_attr_trig_230_qs;
        reg_rdata_next[23:22] = clicint_230_attr_mode_230_qs;
        reg_rdata_next[31:24] = clicint_230_ctl_230_qs;
      end

      addr_hit[232]: begin
        reg_rdata_next[0] = clicint_231_ip_231_qs;
        reg_rdata_next[7] = clicint_231_ie_231_qs;
        reg_rdata_next[16] = clicint_231_attr_shv_231_qs;
        reg_rdata_next[18:17] = clicint_231_attr_trig_231_qs;
        reg_rdata_next[23:22] = clicint_231_attr_mode_231_qs;
        reg_rdata_next[31:24] = clicint_231_ctl_231_qs;
      end

      addr_hit[233]: begin
        reg_rdata_next[0] = clicint_232_ip_232_qs;
        reg_rdata_next[7] = clicint_232_ie_232_qs;
        reg_rdata_next[16] = clicint_232_attr_shv_232_qs;
        reg_rdata_next[18:17] = clicint_232_attr_trig_232_qs;
        reg_rdata_next[23:22] = clicint_232_attr_mode_232_qs;
        reg_rdata_next[31:24] = clicint_232_ctl_232_qs;
      end

      addr_hit[234]: begin
        reg_rdata_next[0] = clicint_233_ip_233_qs;
        reg_rdata_next[7] = clicint_233_ie_233_qs;
        reg_rdata_next[16] = clicint_233_attr_shv_233_qs;
        reg_rdata_next[18:17] = clicint_233_attr_trig_233_qs;
        reg_rdata_next[23:22] = clicint_233_attr_mode_233_qs;
        reg_rdata_next[31:24] = clicint_233_ctl_233_qs;
      end

      addr_hit[235]: begin
        reg_rdata_next[0] = clicint_234_ip_234_qs;
        reg_rdata_next[7] = clicint_234_ie_234_qs;
        reg_rdata_next[16] = clicint_234_attr_shv_234_qs;
        reg_rdata_next[18:17] = clicint_234_attr_trig_234_qs;
        reg_rdata_next[23:22] = clicint_234_attr_mode_234_qs;
        reg_rdata_next[31:24] = clicint_234_ctl_234_qs;
      end

      addr_hit[236]: begin
        reg_rdata_next[0] = clicint_235_ip_235_qs;
        reg_rdata_next[7] = clicint_235_ie_235_qs;
        reg_rdata_next[16] = clicint_235_attr_shv_235_qs;
        reg_rdata_next[18:17] = clicint_235_attr_trig_235_qs;
        reg_rdata_next[23:22] = clicint_235_attr_mode_235_qs;
        reg_rdata_next[31:24] = clicint_235_ctl_235_qs;
      end

      addr_hit[237]: begin
        reg_rdata_next[0] = clicint_236_ip_236_qs;
        reg_rdata_next[7] = clicint_236_ie_236_qs;
        reg_rdata_next[16] = clicint_236_attr_shv_236_qs;
        reg_rdata_next[18:17] = clicint_236_attr_trig_236_qs;
        reg_rdata_next[23:22] = clicint_236_attr_mode_236_qs;
        reg_rdata_next[31:24] = clicint_236_ctl_236_qs;
      end

      addr_hit[238]: begin
        reg_rdata_next[0] = clicint_237_ip_237_qs;
        reg_rdata_next[7] = clicint_237_ie_237_qs;
        reg_rdata_next[16] = clicint_237_attr_shv_237_qs;
        reg_rdata_next[18:17] = clicint_237_attr_trig_237_qs;
        reg_rdata_next[23:22] = clicint_237_attr_mode_237_qs;
        reg_rdata_next[31:24] = clicint_237_ctl_237_qs;
      end

      addr_hit[239]: begin
        reg_rdata_next[0] = clicint_238_ip_238_qs;
        reg_rdata_next[7] = clicint_238_ie_238_qs;
        reg_rdata_next[16] = clicint_238_attr_shv_238_qs;
        reg_rdata_next[18:17] = clicint_238_attr_trig_238_qs;
        reg_rdata_next[23:22] = clicint_238_attr_mode_238_qs;
        reg_rdata_next[31:24] = clicint_238_ctl_238_qs;
      end

      addr_hit[240]: begin
        reg_rdata_next[0] = clicint_239_ip_239_qs;
        reg_rdata_next[7] = clicint_239_ie_239_qs;
        reg_rdata_next[16] = clicint_239_attr_shv_239_qs;
        reg_rdata_next[18:17] = clicint_239_attr_trig_239_qs;
        reg_rdata_next[23:22] = clicint_239_attr_mode_239_qs;
        reg_rdata_next[31:24] = clicint_239_ctl_239_qs;
      end

      addr_hit[241]: begin
        reg_rdata_next[0] = clicint_240_ip_240_qs;
        reg_rdata_next[7] = clicint_240_ie_240_qs;
        reg_rdata_next[16] = clicint_240_attr_shv_240_qs;
        reg_rdata_next[18:17] = clicint_240_attr_trig_240_qs;
        reg_rdata_next[23:22] = clicint_240_attr_mode_240_qs;
        reg_rdata_next[31:24] = clicint_240_ctl_240_qs;
      end

      addr_hit[242]: begin
        reg_rdata_next[0] = clicint_241_ip_241_qs;
        reg_rdata_next[7] = clicint_241_ie_241_qs;
        reg_rdata_next[16] = clicint_241_attr_shv_241_qs;
        reg_rdata_next[18:17] = clicint_241_attr_trig_241_qs;
        reg_rdata_next[23:22] = clicint_241_attr_mode_241_qs;
        reg_rdata_next[31:24] = clicint_241_ctl_241_qs;
      end

      addr_hit[243]: begin
        reg_rdata_next[0] = clicint_242_ip_242_qs;
        reg_rdata_next[7] = clicint_242_ie_242_qs;
        reg_rdata_next[16] = clicint_242_attr_shv_242_qs;
        reg_rdata_next[18:17] = clicint_242_attr_trig_242_qs;
        reg_rdata_next[23:22] = clicint_242_attr_mode_242_qs;
        reg_rdata_next[31:24] = clicint_242_ctl_242_qs;
      end

      addr_hit[244]: begin
        reg_rdata_next[0] = clicint_243_ip_243_qs;
        reg_rdata_next[7] = clicint_243_ie_243_qs;
        reg_rdata_next[16] = clicint_243_attr_shv_243_qs;
        reg_rdata_next[18:17] = clicint_243_attr_trig_243_qs;
        reg_rdata_next[23:22] = clicint_243_attr_mode_243_qs;
        reg_rdata_next[31:24] = clicint_243_ctl_243_qs;
      end

      addr_hit[245]: begin
        reg_rdata_next[0] = clicint_244_ip_244_qs;
        reg_rdata_next[7] = clicint_244_ie_244_qs;
        reg_rdata_next[16] = clicint_244_attr_shv_244_qs;
        reg_rdata_next[18:17] = clicint_244_attr_trig_244_qs;
        reg_rdata_next[23:22] = clicint_244_attr_mode_244_qs;
        reg_rdata_next[31:24] = clicint_244_ctl_244_qs;
      end

      addr_hit[246]: begin
        reg_rdata_next[0] = clicint_245_ip_245_qs;
        reg_rdata_next[7] = clicint_245_ie_245_qs;
        reg_rdata_next[16] = clicint_245_attr_shv_245_qs;
        reg_rdata_next[18:17] = clicint_245_attr_trig_245_qs;
        reg_rdata_next[23:22] = clicint_245_attr_mode_245_qs;
        reg_rdata_next[31:24] = clicint_245_ctl_245_qs;
      end

      addr_hit[247]: begin
        reg_rdata_next[0] = clicint_246_ip_246_qs;
        reg_rdata_next[7] = clicint_246_ie_246_qs;
        reg_rdata_next[16] = clicint_246_attr_shv_246_qs;
        reg_rdata_next[18:17] = clicint_246_attr_trig_246_qs;
        reg_rdata_next[23:22] = clicint_246_attr_mode_246_qs;
        reg_rdata_next[31:24] = clicint_246_ctl_246_qs;
      end

      addr_hit[248]: begin
        reg_rdata_next[0] = clicint_247_ip_247_qs;
        reg_rdata_next[7] = clicint_247_ie_247_qs;
        reg_rdata_next[16] = clicint_247_attr_shv_247_qs;
        reg_rdata_next[18:17] = clicint_247_attr_trig_247_qs;
        reg_rdata_next[23:22] = clicint_247_attr_mode_247_qs;
        reg_rdata_next[31:24] = clicint_247_ctl_247_qs;
      end

      addr_hit[249]: begin
        reg_rdata_next[0] = clicint_248_ip_248_qs;
        reg_rdata_next[7] = clicint_248_ie_248_qs;
        reg_rdata_next[16] = clicint_248_attr_shv_248_qs;
        reg_rdata_next[18:17] = clicint_248_attr_trig_248_qs;
        reg_rdata_next[23:22] = clicint_248_attr_mode_248_qs;
        reg_rdata_next[31:24] = clicint_248_ctl_248_qs;
      end

      addr_hit[250]: begin
        reg_rdata_next[0] = clicint_249_ip_249_qs;
        reg_rdata_next[7] = clicint_249_ie_249_qs;
        reg_rdata_next[16] = clicint_249_attr_shv_249_qs;
        reg_rdata_next[18:17] = clicint_249_attr_trig_249_qs;
        reg_rdata_next[23:22] = clicint_249_attr_mode_249_qs;
        reg_rdata_next[31:24] = clicint_249_ctl_249_qs;
      end

      addr_hit[251]: begin
        reg_rdata_next[0] = clicint_250_ip_250_qs;
        reg_rdata_next[7] = clicint_250_ie_250_qs;
        reg_rdata_next[16] = clicint_250_attr_shv_250_qs;
        reg_rdata_next[18:17] = clicint_250_attr_trig_250_qs;
        reg_rdata_next[23:22] = clicint_250_attr_mode_250_qs;
        reg_rdata_next[31:24] = clicint_250_ctl_250_qs;
      end

      addr_hit[252]: begin
        reg_rdata_next[0] = clicint_251_ip_251_qs;
        reg_rdata_next[7] = clicint_251_ie_251_qs;
        reg_rdata_next[16] = clicint_251_attr_shv_251_qs;
        reg_rdata_next[18:17] = clicint_251_attr_trig_251_qs;
        reg_rdata_next[23:22] = clicint_251_attr_mode_251_qs;
        reg_rdata_next[31:24] = clicint_251_ctl_251_qs;
      end

      addr_hit[253]: begin
        reg_rdata_next[0] = clicint_252_ip_252_qs;
        reg_rdata_next[7] = clicint_252_ie_252_qs;
        reg_rdata_next[16] = clicint_252_attr_shv_252_qs;
        reg_rdata_next[18:17] = clicint_252_attr_trig_252_qs;
        reg_rdata_next[23:22] = clicint_252_attr_mode_252_qs;
        reg_rdata_next[31:24] = clicint_252_ctl_252_qs;
      end

      addr_hit[254]: begin
        reg_rdata_next[0] = clicint_253_ip_253_qs;
        reg_rdata_next[7] = clicint_253_ie_253_qs;
        reg_rdata_next[16] = clicint_253_attr_shv_253_qs;
        reg_rdata_next[18:17] = clicint_253_attr_trig_253_qs;
        reg_rdata_next[23:22] = clicint_253_attr_mode_253_qs;
        reg_rdata_next[31:24] = clicint_253_ctl_253_qs;
      end

      addr_hit[255]: begin
        reg_rdata_next[0] = clicint_254_ip_254_qs;
        reg_rdata_next[7] = clicint_254_ie_254_qs;
        reg_rdata_next[16] = clicint_254_attr_shv_254_qs;
        reg_rdata_next[18:17] = clicint_254_attr_trig_254_qs;
        reg_rdata_next[23:22] = clicint_254_attr_mode_254_qs;
        reg_rdata_next[31:24] = clicint_254_ctl_254_qs;
      end

      addr_hit[256]: begin
        reg_rdata_next[0] = clicint_255_ip_255_qs;
        reg_rdata_next[7] = clicint_255_ie_255_qs;
        reg_rdata_next[16] = clicint_255_attr_shv_255_qs;
        reg_rdata_next[18:17] = clicint_255_attr_trig_255_qs;
        reg_rdata_next[23:22] = clicint_255_attr_mode_255_qs;
        reg_rdata_next[31:24] = clicint_255_ctl_255_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
